{
"version":3,
"file":"module$node_modules$refractor$lang$markup.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,uBADc,CAEvBC,OAAQ,gBAFe,CAGvBC,QAAS,qBAHc,CAIvBC,MAAO,4BAJgB,CAKvBC,IAAK,CACHC,QAAS,uHADN,CAEHC,OAAQ,CAAA,CAFL,CAGHC,OAAQ,CACNH,IAAK,CACHC,QAAS,iBADN,CAEHE,OAAQ,CACNC,YAAa,OADP,CAENC,UAAW,cAFL,CAFL,CADC;AAQN,aAAc,CACZJ,QAAS,qCADG,CAEZE,OAAQ,CACNC,YAAa,CACX,IADW,CAEX,CACEH,QAAS,kBADX,CAEEK,WAAY,CAAA,CAFd,CAFW,CADP,CAFI,CARR,CAoBNF,YAAa,MApBP,CAqBN,YAAa,CACXH,QAAS,WADE,CAEXE,OAAQ,CACNE,UAAW,cADL,CAFG,CArBP,CAHL,CALkB,CAqCvBE,OAAQ,mBArCe,CAuCzBb,MAAAC,UAAAF,OAAA,IAAAU,OAAA,CAAqC,YAArC,CAAAA,OAAA,OAAA,CACET,KAAAC,UAAAF,OAAA,OACFC,MAAAc,MAAAC,IAAA,CAAgB,MAAhB,CAAwB,QAAQ,CAACC,GAAD,CAAM,CACnB,QAAjB,GAAIA,GAAAC,KAAJ,GACED,GAAAE,WAAA,MADF,CAC4BF,GAAAG,QAAAC,MAAAC,QAAA,CAA0B,OAA1B,CAAmC,MAAnC,CAD5B,CADoC,CAAtC,CAKAC,OAAAC,eAAA,CAAsBvB,KAAAC,UAAAF,OAAAO,IAAtB;AAAkD,YAAlD,CAAgE,CAY9Dc,MAAOI,QAAmB,CAACC,OAAD,CAAUC,IAAV,CAAgB,CACxC,IAAIC,oBAAsB,EAC1BA,oBAAA,CAAoB,WAApB,CAAkCD,IAAlC,CAAA,CAA0C,CACxCnB,QAAS,mCAD+B,CAExCK,WAAY,CAAA,CAF4B,CAGxCH,OAAQT,KAAAC,UAAA,CAAgByB,IAAhB,CAHgC,CAK1CC,oBAAA,MAAA,CAA+B,sBAC3BlB,oBAAAA,CAAS,CACX,iBAAkB,CAChBF,QAAS,2BADO,CAEhBE,OAAQkB,mBAFQ,CADP,CAMblB,oBAAA,CAAO,WAAP,CAAqBiB,IAArB,CAAA,CAA6B,CAC3BnB,QAAS,SADkB,CAE3BE,OAAQT,KAAAC,UAAA,CAAgByB,IAAhB,CAFmB,CAIzBE,KAAAA,CAAM,EACVA,KAAA,CAAIH,OAAJ,CAAA,CAAe,CACblB,QAASsB,MAAA,CACP,kEAAAC,OAAAT,QAAA,CACE,KADF;AAEEI,OAFF,CADO,CAKP,GALO,CADI,CAQbb,WAAY,CAAA,CARC,CASbJ,OAAQ,CAAA,CATK,CAUbC,OAAQA,mBAVK,CAYfT,MAAAC,UAAA8B,aAAA,CAA6B,QAA7B,CAAuC,OAAvC,CAAgDH,IAAhD,CA/BwC,CAZoB,CAAhE,CA8CA5B,MAAAC,UAAA+B,IAAA,CAAsBhC,KAAAC,UAAAgC,OAAA,CAAuB,QAAvB,CAAiC,EAAjC,CACtBjC,MAAAC,UAAAiC,KAAA,CAAuBlC,KAAAC,UAAAF,OACvBC,MAAAC,UAAAkC,OAAA,CAAyBnC,KAAAC,UAAAF,OACzBC,MAAAC,UAAAmC,IAAA,CAAsBpC,KAAAC,UAAAF,OAhGD,CAHvBH,MAAAC,QAAA,CAAiBE,MACjBA,OAAAsC,YAAA,CAAqB,QACrBtC,OAAAuC,QAAA,CAAiB,CAAC,KAAD,CAAQ,MAAR,CAAgB,QAAhB,CAA0B,KAA1B,CAL0G;",
"sources":["node_modules/refractor/lang/markup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$markup\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: /\u003c!--[\\s\\S]*?--\u003e/,\n    prolog: /<\\?[\\s\\S]+?\\?>/,\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]\u003e/i,\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/i,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n          inside: {\n            punctuation: [\n              /^=/,\n              {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: /&#?[\\da-z]{1,8};/i\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity'] // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function(env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            tagName\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","markup","Prism","languages","comment","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","lookbehind","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","addInlined","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg","displayName","aliases"]
}
