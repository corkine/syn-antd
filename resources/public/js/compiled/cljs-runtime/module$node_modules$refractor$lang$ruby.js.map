{
"version":3,
"file":"module$node_modules$refractor$lang$ruby.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/refractor/lang/ruby.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$ruby\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","ruby","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","function","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","rb","displayName","aliases"]
}
