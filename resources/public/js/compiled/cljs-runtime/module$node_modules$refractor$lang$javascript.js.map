{
"version":3,
"file":"module$node_modules$refractor$lang$javascript.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM/HC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzBA,KAAAC,UAAAF,WAAA,CAA6BC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CAC3D,aAAc,CACZF,KAAAC,UAAAE,MAAA,CAAsB,YAAtB,CADY,CAEZ,CACEC,QAAS,yFADX,CAEEC,WAAY,CAAA,CAFd,CAFY,CAD6C,CAQ3DC,QAAS,CACP,CACEF,QAAS,iCADX,CAEEC,WAAY,CAAA,CAFd,CADO,CAKP,CACED,QAAS,4WADX;AAEEC,WAAY,CAAA,CAFd,CALO,CARkD,CAkB3DE,OAAQ,+NAlBmD,CAoB3DC,SAAU,mFApBiD,CAqB3DC,SAAU,gGArBiD,CAAhC,CAuB7BT,MAAAC,UAAAF,WAAA,CACE,YADF,CAAA,CAEE,CAFF,CAAAK,QAAA,CAEe,sEACfJ;KAAAC,UAAAS,aAAA,CAA6B,YAA7B,CAA2C,SAA3C,CAAsD,CACpDC,MAAO,CACLP,QAAS,0HADJ,CAELC,WAAY,CAAA,CAFP,CAGLO,OAAQ,CAAA,CAHH,CAD6C,CAOpD,oBAAqB,CACnBR,QAAS,+JADU,CAEnBS,MAAO,UAFY,CAP+B,CAWpDC,UAAW,CACT,CACEV,QAAS,uGADX;AAEEC,WAAY,CAAA,CAFd,CAGEU,OAAQf,KAAAC,UAAAF,WAHV,CADS,CAMT,CACEK,QAAS,+CADX,CAEEW,OAAQf,KAAAC,UAAAF,WAFV,CANS,CAUT,CACEK,QAAS,mDADX,CAEEC,WAAY,CAAA,CAFd,CAGEU,OAAQf,KAAAC,UAAAF,WAHV,CAVS,CAeT,CACEK,QAAS,ocADX;AAEEC,WAAY,CAAA,CAFd,CAGEU,OAAQf,KAAAC,UAAAF,WAHV,CAfS,CAXyC,CAgCpDiB,SAAU,2BAhC0C,CAAtD,CAkCAhB,MAAAC,UAAAS,aAAA,CAA6B,YAA7B,CAA2C,QAA3C,CAAqD,CACnD,kBAAmB,CACjBN,QAAS,mEADQ,CAEjBQ,OAAQ,CAAA,CAFS,CAGjBG,OAAQ,CACN,uBAAwB,CACtBX,QAAS,OADa,CAEtBS,MAAO,QAFe,CADlB,CAKNI,cAAe,CACbb,QAAS,4DADI,CAEbC,WAAY,CAAA,CAFC,CAGbU,OAAQ,CACN,4BAA6B,CAC3BX,QAAS,SADkB,CAE3BS,MAAO,aAFoB,CADvB,CAKNK,KAAMlB,KAAAC,UAAAF,WALA,CAHK,CALT;AAgBNoB,OAAQ,SAhBF,CAHS,CADgC,CAArD,CAwBInB,MAAAC,UAAAmB,OAAJ,EACEpB,KAAAC,UAAAmB,OAAAC,IAAAC,WAAA,CAAsC,QAAtC,CAAgD,YAAhD,CAEFtB,MAAAC,UAAAsB,GAAA,CAAqBvB,KAAAC,UAAAF,WAxFI,CAH3BH,MAAAC,QAAA,CAAiBE,UACjBA,WAAAyB,YAAA,CAAyB,YACzBzB,WAAA0B,QAAA,CAAqB,CAAC,IAAD,CAL0G;",
"sources":["node_modules/refractor/lang/javascript.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$javascript\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = javascript\njavascript.displayName = 'javascript'\njavascript.aliases = ['js']\nfunction javascript(Prism) {\n  Prism.languages.javascript = Prism.languages.extend('clike', {\n    'class-name': [\n      Prism.languages.clike['class-name'],\n      {\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n        lookbehind: true\n      }\n    ],\n    keyword: [\n      {\n        pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n        lookbehind: true\n      }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    function: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n  })\n  Prism.languages.javascript[\n    'class-name'\n  ][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    regex: {\n      pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n      lookbehind: true,\n      greedy: true\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    'function-variable': {\n      pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n      alias: 'function'\n    },\n    parameter: [\n      {\n        pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      {\n        pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n        inside: Prism.languages.javascript\n      },\n      {\n        pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      {\n        pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n  })\n  Prism.languages.insertBefore('javascript', 'string', {\n    'template-string': {\n      pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\${|}$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.javascript\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  if (Prism.languages.markup) {\n    Prism.languages.markup.tag.addInlined('script', 'javascript')\n  }\n  Prism.languages.js = Prism.languages.javascript\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","javascript","Prism","languages","extend","clike","pattern","lookbehind","keyword","number","function","operator","insertBefore","regex","greedy","alias","parameter","inside","constant","interpolation","rest","string","markup","tag","addInlined","js","displayName","aliases"]
}
