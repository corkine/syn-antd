{
"version":3,
"file":"module$node_modules$refractor$lang$java.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAEjB,IAAIC,SAAW,yaAAf;AACIC,UAAY,2BA4CfF,MA3CDG,UAAAJ,KAAA,CA2CCC,KA3CsBG,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CACrD,aAAc,CACZF,SADY,CAGZ,iCAHY,CADuC,CAMrDG,QAASJ,QAN4C,CAOrDK,SAAU,CAoCXN,KAnCGG,UAAAI,MAAAD,SADQ,CAER,CACEE,QAAS,eADX,CAEEC,WAAY,CAAA,CAFd,CAFQ,CAP2C,CAcrDC,OAAQ,kHAd6C,CAerDC,SAAU,CACRH,QAAS,+DADD,CAERC,WAAY,CAAA,CAFJ,CAf2C,CAAhC,CA2CtBT,MAvBDG,UAAAS,aAAA,CAA6B,MAA7B;AAAqC,YAArC,CAAmD,CACjDC,WAAY,CACVC,MAAO,aADG,CAEVN,QAAS,cAFC,CAGVC,WAAY,CAAA,CAHF,CADqC,CAMjDM,UAAW,CACTP,QAAS,kIADA,CAETC,WAAY,CAAA,CAFH,CAGTO,OAAQ,CACNC,YAAa,IADP,CAHC,CANsC,CAajDC,SAAU,CACRV,QAAS,qEADD,CAERQ,OAAQ,CACN,aAAcd,SADR,CAENG,QAASJ,QAFH,CAGNgB,YAAa,WAHP,CAINN,SAAU,OAJJ,CAFA,CAbuC,CAAnD,CAxBiB,CAHrBf,MAAAC,QAAA,CAAiBE,IACjBA,KAAAoB,YAAA,CAAmB,MACnBpB,KAAAqB,QAAA;AAAe,EAL0G;",
"sources":["node_modules/refractor/lang/java.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$java\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function(Prism) {\n    var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/ // based on the java naming conventions\n    var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [\n        className, // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(\\:\\:)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        alias: 'punctuation',\n        pattern: /(^|[^.])@\\w+/,\n        lookbehind: true\n      },\n      namespace: {\n        pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","java","Prism","keywords","className","languages","extend","keyword","function","clike","pattern","lookbehind","number","operator","insertBefore","annotation","alias","namespace","inside","punctuation","generics","displayName","aliases"]
}
