{
"version":3,
"file":"module$node_modules$refractor$lang$lua.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAAC,UAAAF,IAAA,CAAsB,CACpBG,QAAS,wCADW,CAGpBC,OAAQ,CACNC,QAAS,sFADH,CAENC,OAAQ,CAAA,CAFF,CAHY,CAOpBC,OAAQ,uGAPY,CAQpBC,QAAS,yHARW;AASpBC,SAAU,0BATU,CAUpBC,SAAU,CACR,uCADQ,CAER,CAEEL,QAAS,oBAFX,CAGEM,WAAY,CAAA,CAHd,CAFQ,CAVU,CAkBpBC,YAAa,qBAlBO,CADJ,CAHpBf,MAAAC,QAAA,CAAiBE,GACjBA,IAAAa,YAAA,CAAkB,KAClBb,IAAAc,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/lua.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$lua\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = lua\nlua.displayName = 'lua'\nlua.aliases = []\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number: /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n      /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n      {\n        // Match \"..\" but don't break \"...\"\n        pattern: /(^|[^.])\\.\\.(?!\\.)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","lua","Prism","languages","comment","string","pattern","greedy","number","keyword","function","operator","lookbehind","punctuation","displayName","aliases"]
}
