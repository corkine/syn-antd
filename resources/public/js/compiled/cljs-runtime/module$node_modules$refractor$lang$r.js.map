{
"version":3,
"file":"module$node_modules$refractor$lang$r.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMtHC,QAASA,EAAC,CAACC,KAAD,CAAQ,CAChBA,KAAAC,UAAAF,EAAA,CAAoB,CAClBG,QAAS,KADS,CAElBC,OAAQ,CACNC,QAAS,kCADH,CAENC,OAAQ,CAAA,CAFF,CAFU,CAMlB,mBAAoB,CAGlBD,QAAS,WAHS,CAIlBE,MAAO,UAJW,CANF,CAYlBC,QAAS,oBAZS,CAalBC,SAAU,gBAbQ,CAclBC,OAAQ,CACN,iBADM,CAEN,2EAFM,CAdU,CAkBlBC,QAAS,gHAlBS;AAmBlBC,SAAU,oDAnBQ,CAoBlBC,YAAa,cApBK,CADJ,CAHlBhB,MAAAC,QAAA,CAAiBE,CACjBA,EAAAc,YAAA,CAAgB,GAChBd,EAAAe,QAAA,CAAY,EAL0G;",
"sources":["node_modules/refractor/lang/r.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$r\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = r\nr.displayName = 'r'\nr.aliases = []\nfunction r(Prism) {\n  Prism.languages.r = {\n    comment: /#.*/,\n    string: {\n      pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'percent-operator': {\n      // Includes user-defined operators\n      // and %%, %*%, %/%, %in%, %o%, %x%\n      pattern: /%[^%\\s]*%/,\n      alias: 'operator'\n    },\n    boolean: /\\b(?:TRUE|FALSE)\\b/,\n    ellipsis: /\\.\\.(?:\\.|\\d+)/,\n    number: [\n      /\\b(?:NaN|Inf)\\b/,\n      /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/\n    ],\n    keyword: /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    punctuation: /[(){}\\[\\],;]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","r","Prism","languages","comment","string","pattern","greedy","alias","boolean","ellipsis","number","keyword","operator","punctuation","displayName","aliases"]
}
