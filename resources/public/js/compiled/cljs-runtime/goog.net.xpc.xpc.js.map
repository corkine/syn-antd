{
"version":3,
"file":"goog.net.xpc.xpc.js",
"lineCount":47,
"mappings":"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",
"sources":["goog/net/xpc/xpc.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides the namesspace for client-side communication\n * between pages originating from different domains (it works also\n * with pages from the same domain, but doing that is kinda\n * pointless).\n *\n * The only publicly visible class is goog.net.xpc.CrossPageChannel.\n *\n * Note: The preferred name for the main class would have been\n * CrossDomainChannel.  But as there already is a class named like\n * that (which serves a different purpose) in the maps codebase,\n * CrossPageChannel was chosen to avoid confusion.\n *\n * CrossPageChannel abstracts the underlying transport mechanism to\n * provide a common interface in all browsers.\n *\n *\n * @suppress {underscore}\n */\n\n/*\nTODO(user)\n- resolve fastback issues in Safari (IframeRelayTransport)\n */\n\n\n/**\n * Namespace for CrossPageChannel\n */\ngoog.provide('goog.net.xpc');\ngoog.provide('goog.net.xpc.CfgFields');\ngoog.provide('goog.net.xpc.ChannelStates');\ngoog.provide('goog.net.xpc.TransportNames');\ngoog.provide('goog.net.xpc.TransportTypes');\ngoog.provide('goog.net.xpc.UriCfgFields');\ngoog.require('goog.log');\n\ngoog.forwardDeclare('goog.net.xpc.CrossPageChannel');  // circular\n\n\n/**\n * Enum used to identify transport types.\n * @enum {number}\n */\ngoog.net.xpc.TransportTypes = {\n  UNDEFINED: 0,\n  NATIVE_MESSAGING: 1,\n  FRAME_ELEMENT_METHOD: 2,\n  IFRAME_RELAY: 3,\n  IFRAME_POLLING: 4,\n  FLASH: 5,\n  NIX: 6,\n  DIRECT: 7\n};\n\n\n/**\n * Enum containing transport names. These need to correspond to the\n * transport class names for createTransport_() to work.\n * @const {!Object<string,string>}\n */\ngoog.net.xpc.TransportNames = {\n  '1': 'NativeMessagingTransport',\n  '2': 'FrameElementMethodTransport',\n  '3': 'IframeRelayTransport',\n  '4': 'IframePollingTransport',\n  '5': 'FlashTransport',\n  '6': 'NixTransport',\n  '7': 'DirectTransport'\n};\n\n\n// TODO(user): Add auth token support to other methods.\n\n\n/**\n * Field names used on configuration object.\n * @const\n */\ngoog.net.xpc.CfgFields = {\n  /**\n   * Channel name identifier.\n   * Both peers have to be initialized with\n   * the same channel name.  If not present, a channel name is\n   * generated (which then has to transferred to the peer somehow).\n   */\n  CHANNEL_NAME: 'cn',\n  /**\n   * Authorization token. If set, NIX will use this authorization token\n   * to validate the setup.\n   */\n  AUTH_TOKEN: 'at',\n  /**\n   * Remote party's authorization token. If set, NIX will validate this\n   * authorization token against that sent by the other party.\n   */\n  REMOTE_AUTH_TOKEN: 'rat',\n  /**\n   * The URI of the peer page.\n   */\n  PEER_URI: 'pu',\n  /**\n   * Ifame-ID identifier.\n   * The id of the iframe element the peer-document lives in.\n   */\n  IFRAME_ID: 'ifrid',\n  /**\n   * Transport type identifier.\n   * The transport type to use. Possible values are entries from\n   * goog.net.xpc.TransportTypes or a Transport constructor fuction. If not\n   * present, the transport is determined automatically based on the useragent's\n   * capabilities.\n   */\n  TRANSPORT: 'tp',\n  /**\n   * Local relay URI identifier (IframeRelayTransport-specific).\n   * The URI (can't contain a fragment identifier) used by the peer to\n   * relay data through.\n   */\n  LOCAL_RELAY_URI: 'lru',\n  /**\n   * Peer relay URI identifier (IframeRelayTransport-specific).\n   * The URI (can't contain a fragment identifier) used to relay data\n   * to the peer.\n   */\n  PEER_RELAY_URI: 'pru',\n  /**\n   * Local poll URI identifier (IframePollingTransport-specific).\n   * The URI  (can't contain a fragment identifier)which is polled\n   * to receive data from the peer.\n   */\n  LOCAL_POLL_URI: 'lpu',\n  /**\n   * Local poll URI identifier (IframePollingTransport-specific).\n   * The URI (can't contain a fragment identifier) used to send data\n   * to the peer.\n   */\n  PEER_POLL_URI: 'ppu',\n  /**\n   * The hostname of the peer window, including protocol, domain, and port\n   * (if specified). Used for security sensitive applications that make\n   * use of NativeMessagingTransport (i.e. most applications).\n   */\n  PEER_HOSTNAME: 'ph',\n  /**\n   * Usually both frames using a connection initially send a SETUP message to\n   * each other, and each responds with a SETUP_ACK.  A frame marks itself\n   * connected when it receives that SETUP_ACK.  If this parameter is true\n   * however, the channel it is passed to will not send a SETUP, but rather will\n   * wait for one from its peer and mark itself connected when that arrives.\n   * Peer iframes created using such a channel will send SETUP however, and will\n   * wait for SETUP_ACK before marking themselves connected.  The goal is to\n   * cope with a situation where the availability of the URL for the peer frame\n   * cannot be relied on, eg when the application is offline.  Without this\n   * setting, the primary frame will attempt to send its SETUP message every\n   * 100ms, forever.  This floods the javascript console with uncatchable\n   * security warnings, and fruitlessly burns CPU.  There is one scenario this\n   * mode will not support, and that is reconnection by the outer frame, ie the\n   * creation of a new channel object to connect to a peer iframe which was\n   * already communicating with a previous channel object of the same name.  If\n   * that behavior is needed, this mode should not be used.  Reconnection by\n   * inner frames is supported in this mode however.\n   */\n  ONE_SIDED_HANDSHAKE: 'osh',\n  /**\n   * The frame role (inner or outer). Used to explicitly indicate the role for\n   * each peer whenever the role cannot be reliably determined (e.g. the two\n   * peer windows are not parent/child frames). If unspecified, the role will\n   * be dynamically determined, assuming a parent/child frame setup.\n   */\n  ROLE: 'role',\n  /**\n   * Which version of the native transport startup protocol should be used, the\n   * default being '2'.  Version 1 had various timing vulnerabilities, which\n   * had to be compensated for by introducing delays, and is deprecated.  V1\n   * and V2 are broadly compatible, although the more robust timing and lack\n   * of delays is not gained unless both sides are using V2.  The only\n   * unsupported case of cross-protocol interoperation is where a connection\n   * starts out with V2 at both ends, and one of the ends reconnects as a V1.\n   * All other initial startup and reconnection scenarios are supported.\n   */\n  NATIVE_TRANSPORT_PROTOCOL_VERSION: 'nativeProtocolVersion',\n  /**\n   * Whether the direct transport runs in synchronous mode. The default is to\n   * emulate the other transports and run asyncronously but there are some\n   * circumstances where syncronous calls are required. If this property is\n   * set to true, the transport will send the messages synchronously.\n   */\n  DIRECT_TRANSPORT_SYNC_MODE: 'directSyncMode'\n};\n\n\n/**\n * Config properties that need to be URL sanitized.\n * @type {Array<string>}\n */\ngoog.net.xpc.UriCfgFields = [\n  goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI,\n  goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI,\n  goog.net.xpc.CfgFields.PEER_POLL_URI\n];\n\n\n/**\n * @enum {number}\n */\ngoog.net.xpc.ChannelStates = {\n  NOT_CONNECTED: 1,\n  CONNECTED: 2,\n  CLOSED: 3\n};\n\n\n/**\n * The name of the transport service (used for internal signalling).\n * @type {string}\n * @suppress {underscore|visibility}\n */\ngoog.net.xpc.TRANSPORT_SERVICE_ = 'tp';\n\n\n/**\n * Transport signaling message: setup.\n * @type {string}\n */\ngoog.net.xpc.SETUP = 'SETUP';\n\n\n/**\n * Transport signaling message: setup for native transport protocol v2.\n * @type {string}\n */\ngoog.net.xpc.SETUP_NTPV2 = 'SETUP_NTPV2';\n\n\n/**\n * Transport signaling message: setup acknowledgement.\n * @type {string}\n * @suppress {underscore|visibility}\n */\ngoog.net.xpc.SETUP_ACK_ = 'SETUP_ACK';\n\n\n/**\n * Transport signaling message: setup acknowledgement.\n * @type {string}\n */\ngoog.net.xpc.SETUP_ACK_NTPV2 = 'SETUP_ACK_NTPV2';\n\n\n/**\n * Object holding active channels.\n *\n * @package {Object<string, goog.net.xpc.CrossPageChannel>}\n */\ngoog.net.xpc.channels = {};\n\n\n/**\n * Returns a random string.\n * @param {number} length How many characters the string shall contain.\n * @param {string=} opt_characters The characters used.\n * @return {string} The random string.\n */\ngoog.net.xpc.getRandomString = function(length, opt_characters) {\n  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;\n  var charsLength = chars.length;\n  var s = '';\n  while (length-- > 0) {\n    s += chars.charAt(Math.floor(Math.random() * charsLength));\n  }\n  return s;\n};\n\n\n/**\n * The default characters used for random string generation.\n * @type {string}\n * @private\n */\ngoog.net.xpc.randomStringCharacters_ =\n    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n\n/**\n * The logger.\n * @type {goog.log.Logger}\n */\ngoog.net.xpc.logger = goog.log.getLogger('goog.net.xpc');\n"],
"names":["goog","provide","require","forwardDeclare","net","xpc","TransportTypes","UNDEFINED","NATIVE_MESSAGING","FRAME_ELEMENT_METHOD","IFRAME_RELAY","IFRAME_POLLING","FLASH","NIX","DIRECT","TransportNames","CfgFields","CHANNEL_NAME","AUTH_TOKEN","REMOTE_AUTH_TOKEN","PEER_URI","IFRAME_ID","TRANSPORT","LOCAL_RELAY_URI","PEER_RELAY_URI","LOCAL_POLL_URI","PEER_POLL_URI","PEER_HOSTNAME","ONE_SIDED_HANDSHAKE","ROLE","NATIVE_TRANSPORT_PROTOCOL_VERSION","DIRECT_TRANSPORT_SYNC_MODE","UriCfgFields","ChannelStates","NOT_CONNECTED","CONNECTED","CLOSED","TRANSPORT_SERVICE_","SETUP","SETUP_NTPV2","SETUP_ACK_","SETUP_ACK_NTPV2","channels","getRandomString","goog.net.xpc.getRandomString","length","opt_characters","chars","randomStringCharacters_","charsLength","s","charAt","Math","floor","random","logger","log","getLogger"]
}
