{
"version":3,
"file":"module$node_modules$refractor$lang$livescript.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM/HC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzBA,KAAAC,UAAAF,WAAA,CAA6B,CAC3BG,QAAS,CACP,CACEC,QAAS,2BADX,CAEEC,WAAY,CAAA,CAFd,CADO,CAKP,CACED,QAAS,cADX,CAEEC,WAAY,CAAA,CAFd,CALO,CADkB,CAW3B,sBAAuB,CAGrBD,QAAS,iDAHY,CAIrBC,WAAY,CAAA,CAJS,CAKrBC,OAAQ,CAAA,CALa,CAMrBC,OAAQ,CACNC,SAAU,CACRJ,QAAS,qCADD,CAERC,WAAY,CAAA,CAFJ,CADJ,CAKNI,cAAe,CACbL,QAAS,sBADI;AAEbC,WAAY,CAAA,CAFC,CAGbE,OAAQ,CACN,4BAA6B,CAC3BH,QAAS,UADkB,CAE3BM,MAAO,UAFoB,CADvB,CAHK,CALT,CAeNC,OAAQ,SAfF,CANa,CAXI,CAmC3BA,OAAQ,CACN,CACEP,QAAS,oCADX,CAEEE,OAAQ,CAAA,CAFV,CADM,CAKN,CACEF,QAAS,gBADX,CAEEE,OAAQ,CAAA,CAFV,CALM,CASN,gBATM,CAnCmB,CA8C3BM,MAAO,CACL,CACER,QAAS,iDADX,CAEEE,OAAQ,CAAA,CAFV,CAGEC,OAAQ,CACNJ,QAAS,CACPC,QAAS,cADF,CAEPC,WAAY,CAAA,CAFL,CADH,CAHV,CADK,CAWL,CACED,QAAS,0CADX,CAEEE,OAAQ,CAAA,CAFV,CAXK,CA9CoB,CA8D3BO,QAAS,CACPT,QAAS,uQADF;AAEPC,WAAY,CAAA,CAFL,CA9DkB,CAkE3B,mBAAoB,CAClBD,QAAS,8JADS,CAElBC,WAAY,CAAA,CAFM,CAGlBK,MAAO,UAHW,CAlEO,CAuE3BI,QAAS,CACPV,QAAS,gDADF,CAEPC,WAAY,CAAA,CAFL,CAvEkB,CA2E3BU,SAAU,CAERX,QAAS,6BAFD,CAGRC,WAAY,CAAA,CAHJ,CAIRK,MAAO,UAJC,CA3EiB,CAiF3BM,OAAQ,0DAjFmB,CAkF3BC,WAAY,2BAlFe,CAmF3BC,SAAU,CAER,CACEd,QAAS,YADX;AAEEC,WAAY,CAAA,CAFd,CAFQ,CA4BR,mLA5BQ,CAnFiB,CAiH3Bc,YAAa,kBAjHc,CAmH7BlB,MAAAC,UAAAF,WAAA,CAA2B,qBAA3B,CAAAO,OAAA,cAAAA,OAAAa,KAAA,CAEgBnB,KAAAC,UAAAF,WAtHS,CAH3BH,MAAAC,QAAA,CAAiBE,UACjBA,WAAAqB,YAAA,CAAyB,YACzBrB,WAAAsB,QAAA,CAAqB,EAL0G;",
"sources":["node_modules/refractor/lang/livescript.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$livescript\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = livescript\nlivescript.displayName = 'livescript'\nlivescript.aliases = []\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      }\n    ],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable' // See rest below\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [\n      {\n        pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /<\\[[\\s\\S]*?\\]>/,\n        greedy: true\n      },\n      /\\\\[^\\s,;\\])}]+/\n    ],\n    regex: [\n      {\n        pattern: /\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,\n        greedy: true,\n        inside: {\n          comment: {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: true\n          }\n        }\n      },\n      {\n        pattern: /\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,\n        greedy: true\n      }\n    ],\n    keyword: {\n      pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n      // Spaced .\n      {\n        pattern: /( )\\.(?= )/,\n        lookbehind: true\n      }, // Full list, in order:\n      // .= .~ .. ...\n      // .&. .^. .<<. .>>. .>>>.\n      // := :: ::=\n      // &&\n      // || |>\n      // < << <<< <<<<\n      // <- <-- <-! <--!\n      // <~ <~~ <~! <~~!\n      // <| <= <?\n      // > >> >= >?\n      // - -- -> --\u003e\n      // + ++\n      // @ @@\n      // % %%\n      // * **\n      // ! != !~=\n      // !~> !~~>\n      // !-> !--\u003e\n      // ~ ~> ~~> ~=\n      // = ==\n      // ^ ^^\n      // / ?\n      /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\n    ],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  }\n  Prism.languages.livescript['interpolated-string'].inside[\n    'interpolation'\n  ].inside.rest = Prism.languages.livescript\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","livescript","Prism","languages","comment","pattern","lookbehind","greedy","inside","variable","interpolation","alias","string","regex","keyword","boolean","argument","number","identifier","operator","punctuation","rest","displayName","aliases"]
}
