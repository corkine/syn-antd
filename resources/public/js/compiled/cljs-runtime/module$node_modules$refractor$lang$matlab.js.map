{
"version":3,
"file":"module$node_modules$refractor$lang$matlab.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,CAAC,gBAAD,CAAmB,KAAnB,CADc,CAEvBC,OAAQ,CACNC,QAAS,sBADH,CAENC,OAAQ,CAAA,CAFF,CAFe,CAOvBC,OAAQ,4DAPe,CAQvBC,QAAS,6HARc,CASvBC,SAAU,oBATa,CAUvBC,SAAU,yCAVa;AAWvBC,YAAa,sBAXU,CADJ,CAHvBd,MAAAC,QAAA,CAAiBE,MACjBA,OAAAY,YAAA,CAAqB,QACrBZ,OAAAa,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/matlab.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$matlab\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = matlab\nmatlab.displayName = 'matlab'\nmatlab.aliases = []\nfunction matlab(Prism) {\n  Prism.languages.matlab = {\n    comment: [/%\\{[\\s\\S]*?\\}%/, /%.+/],\n    string: {\n      pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n      greedy: true\n    },\n    // FIXME We could handle imaginary numbers as a whole\n    number: /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n    keyword: /\\b(?:break|case|catch|continue|else|elseif|end|for|function|if|inf|NaN|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*\\()/,\n    operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n    punctuation: /\\.{3}|[.,;\\[\\](){}!]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","matlab","Prism","languages","comment","string","pattern","greedy","number","keyword","function","operator","punctuation","displayName","aliases"]
}
