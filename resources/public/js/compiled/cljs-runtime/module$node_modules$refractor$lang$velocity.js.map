{
"version":3,
"file":"module$node_modules$refractor$lang$velocity.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM7HC,QAASA,SAAQ,CAACC,KAAD,CAAQ,CAoEpBA,KAlEDC,UAAAF,SAAA,CAkECC,KAlE0BC,UAAAC,OAAA,CAAuB,QAAvB,CAAiC,EAAjC,CAC3B,KAAIH,SAAW,CACbI,SAAU,CACRC,QAAS,wGADD,CAERC,WAAY,CAAA,CAFJ,CAGRC,OAAQ,EAHA,CADG,CAMbC,OAAQ,CACNH,QAAS,iBADH,CAENI,OAAQ,CAAA,CAFF,CANK,CAUbC,OAAQ,SAVK,CAWbC,QAAS,oBAXI,CAYbC,SAAU,gEAZG;AAabC,YAAa,cAbA,CAefb,SAAAI,SAAAG,OAAA,CAA2B,CACzBC,OAAQR,QAAA,OADiB,CAEzBc,SAAU,CACRT,QAAS,2BADD,CAERC,WAAY,CAAA,CAFJ,CAFe,CAMzBI,OAAQV,QAAA,OANiB,CAOzBW,QAASX,QAAA,CAAS,SAAT,CAPgB,CAQzBa,YAAab,QAAA,YARY,CAkD1BC,MAxCDC,UAAAa,aAAA,CAA6B,UAA7B,CAAyC,SAAzC,CAAoD,CAClDC,SAAU,CACRX,QAAS,2BADD,CAERC,WAAY,CAAA,CAFJ,CAGRG,OAAQ,CAAA,CAHA,CAIRF,OAAQ,CACNM,YAAa,aADP,CAJA,CADwC,CASlD,mBAAoB,CAClB,CACER,QAAS,yBADX,CAEEC,WAAY,CAAA,CAFd,CAGEG,OAAQ,CAAA,CAHV,CAIEQ,MAAO,SAJT,CADkB,CAOlB,CACEZ,QAAS,eADX;AAEEC,WAAY,CAAA,CAFd,CAGEG,OAAQ,CAAA,CAHV,CAIEQ,MAAO,SAJT,CAPkB,CAT8B,CAuBlDC,UAAW,CACTb,QAAS,sFADA,CAETC,WAAY,CAAA,CAFH,CAGTC,OAAQ,CACNY,QAAS,CACPd,QAAS,0CADF,CAEPE,OAAQ,CACNM,YAAa,MADP,CAFD,CADH,CAONO,KAAMpB,QAPA,CAHC,CAvBuC,CAoClDI,SAAUJ,QAAA,SApCwC,CAApD,CAwCCC,MAFDC,UAAAF,SAAA,IAAAO,OAAA,CAAuC,YAAvC,CAAAA,OAAAa,KAAA,CAECnB,KADCC,UAAAF,SAnEmB,CAHzBH,MAAAC,QAAA,CAAiBE,QACjBA,SAAAqB,YAAA,CAAuB,UACvBrB,SAAAsB,QAAA,CAAmB,EAL0G;",
"sources":["node_modules/refractor/lang/velocity.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$velocity\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = velocity\nvelocity.displayName = 'velocity'\nvelocity.aliases = []\nfunction velocity(Prism) {\n  ;(function(Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {})\n    var velocity = {\n      variable: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,\n        lookbehind: true,\n        inside: {} // See below\n      },\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    }\n    velocity.variable.inside = {\n      string: velocity['string'],\n      function: {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      boolean: velocity['boolean'],\n      punctuation: velocity['punctuation']\n    }\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|]]#$/\n        }\n      },\n      'velocity-comment': [\n        {\n          pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        },\n        {\n          pattern: /(^|[^\\\\])##.*/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        }\n      ],\n      directive: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    })\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest =\n      Prism.languages.velocity\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","velocity","Prism","languages","extend","variable","pattern","lookbehind","inside","string","greedy","number","boolean","operator","punctuation","function","insertBefore","unparsed","alias","directive","keyword","rest","displayName","aliases"]
}
