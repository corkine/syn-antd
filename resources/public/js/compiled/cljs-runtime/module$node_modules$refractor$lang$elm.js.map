{
"version":3,
"file":"module$node_modules$refractor$lang$elm.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAAC,UAAAF,IAAA,CAAsB,CACpBG,QAAS,mBADW,CAEpBC,KAAM,CACJC,QAAS,uDADL,CAEJC,OAAQ,CAAA,CAFJ,CAFc,CAMpBC,OAAQ,CACN,CAEEF,QAAS,gBAFX,CAGEC,OAAQ,CAAA,CAHV,CADM,CAMN,CACED,QAAS,wDADX,CAEEC,OAAQ,CAAA,CAFV,CANM,CANY,CAiBpBE,iBAAkB,CAIhBH,QAAS,gGAJO;AAKhBI,OAAQ,CACNC,QAAS,4BADH,CALQ,CAjBE,CA0BpBA,QAAS,iFA1BW,CA4BpBC,QAAS,yPA5BW,CA8BpBC,OAAQ,kDA9BY,CAsCpBC,SAAU,yDAtCU;AAwCpBC,UAAW,6BAxCS,CAyCpBC,SAAU,6BAzCU,CA0CpBC,YAAa,eA1CO,CADJ,CAHpBnB,MAAAC,QAAA,CAAiBE,GACjBA,IAAAiB,YAAA,CAAkB,KAClBjB,IAAAkB,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/elm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$elm\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = elm\nelm.displayName = 'elm'\nelm.aliases = []\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|{-[\\s\\S]*?-}/,\n    char: {\n      pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+))'/,\n      greedy: true\n    },\n    string: [\n      {\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      },\n      {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:[abfnrtv\\\\\"]|\\d+|x[0-9a-fA-F]+))*\"/,\n        greedy: true\n      }\n    ],\n    import_statement: {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /^\\s*import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+([A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      inside: {\n        keyword: /\\b(?:import|as|exposing)\\b/\n      }\n    },\n    keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","elm","Prism","languages","comment","char","pattern","greedy","string","import_statement","inside","keyword","builtin","number","operator","hvariable","constant","punctuation","displayName","aliases"]
}
