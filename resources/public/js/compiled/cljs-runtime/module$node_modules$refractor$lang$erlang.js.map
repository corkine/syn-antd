{
"version":3,
"file":"module$node_modules$refractor$lang$erlang.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,KADc,CAEvBC,OAAQ,CACNC,QAAS,uBADH,CAENC,OAAQ,CAAA,CAFF,CAFe,CAMvB,kBAAmB,CACjBD,QAAS,6BADQ,CAEjBE,MAAO,UAFU,CANI,CAUvB,cAAe,CACbF,QAAS,uBADI,CAEbE,MAAO,MAFM,CAVQ,CAcvBC,QAAS,oBAdc,CAevBC,QAAS,yDAfc,CAgBvBC,OAAQ,CACN,QADM,CAEN,gBAFM,CAGN,wCAHM,CAhBe;AAqBvBC,SAAU,qBArBa,CAsBvBC,SAAU,CAERP,QAAS,+BAFD,CAGRQ,WAAY,CAAA,CAHJ,CAtBa,CA2BvBC,SAAU,CACR,8GADQ,CAER,CAEET,QAAS,gBAFX,CAGEQ,WAAY,CAAA,CAHd,CAFQ,CAOR,CAEER,QAAS,gBAFX,CAGEQ,WAAY,CAAA,CAHd,CAPQ,CA3Ba,CAwCvBE,KAAM,eAxCiB,CAyCvBC,YAAa,uBAzCU,CADJ,CAHvBnB,MAAAC,QAAA,CAAiBE,MACjBA,OAAAiB,YAAA,CAAqB,QACrBjB,OAAAkB,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/erlang.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$erlang\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","erlang","Prism","languages","comment","string","pattern","greedy","alias","boolean","keyword","number","function","variable","lookbehind","operator","atom","punctuation","displayName","aliases"]
}
