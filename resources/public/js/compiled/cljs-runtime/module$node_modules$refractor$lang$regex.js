shadow$provide.module$node_modules$refractor$lang$regex=function(global,process,require,module,exports,shadow$shims){function regex(Prism$jscomp$0){(function(Prism){var specialEscape={pattern:/\\[\\(){}[\]^$+*?|.]/,alias:"escape"},escape=/\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/,charClass=/\\[wsd]|\.|\\p{[^{}]+}/i,rangeChar="(?:[^\\\\-]|"+escape.source+")",groupName={pattern:/(<|')[^<>']+(?=[>']$)/,lookbehind:!0,alias:"variable"},backreference=[/\\(?![123][0-7]{2})[1-9]/,
{pattern:/\\k<[^<>']+>/,inside:{"group-name":groupName}}];Prism.languages.regex={charset:{pattern:/((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,lookbehind:!0,inside:{"charset-negation":{pattern:/(^\[)\^/,lookbehind:!0},"charset-punctuation":/^\[|\]$/,range:{pattern:RegExp(rangeChar+"-"+rangeChar),inside:{escape:escape,"range-punctuation":/-/}},"special-escape":specialEscape,charclass:charClass,backreference:backreference,escape:escape}},"special-escape":specialEscape,charclass:charClass,backreference:backreference,
anchor:/[$^]|\\[ABbGZz]/,escape:escape,group:[{pattern:/\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,inside:{"group-name":groupName}},/\)/],quantifier:/[+*?]|\{(?:\d+,?\d*)\}/,alternation:/\|/};"actionscript coffescript flow javascript typescript vala".split(" ").forEach(function(lang){if(lang=Prism.languages[lang])lang.regex.inside={"regex-flags":/[a-z]+$/,"regex-delimiter":/^\/|\/$/,"language-regex":{pattern:/[\s\S]+/,inside:Prism.languages.regex}}})})(Prism$jscomp$0)}
module.exports=regex;regex.displayName="regex";regex.aliases=[]}
//# sourceMappingURL=module$node_modules$refractor$lang$regex.js.map
