{
"version":3,
"file":"module$node_modules$refractor$lang$pug.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/refractor/lang/pug.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$pug\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function(Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: {\n                rest: Prism.languages.javascript\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: {\n                    rest: Prism.languages.javascript\n                  }\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/\n      .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","pug","Prism","languages","comment","pattern","lookbehind","inside","rest","javascript","filter","alias","markup","doctype","each","keyword","punctuation","branch","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","displayName","aliases"]
}
