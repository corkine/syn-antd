{
"version":3,
"file":"module$node_modules$refractor$lang$coffeescript.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMjIC,QAASA,aAAY,CAACC,KAAD,CAAQ,CACT,IAEZC,QAAU,WAFE,CAGdC,cAAgB,CACdC,QAAS,YADK,CAEdC,MAAO,UAFO,CA4EjBJ,MAxEDK,UAAAN,aAAA,CAwECC,KAxE8BK,UAAAC,OAAA,CAAuB,YAAvB,CAAqC,CAClEL,QAASA,OADyD,CAElEM,OAAQ,CAEN,CACEJ,QAAS,wBADX,CAEEK,OAAQ,CAAA,CAFV,CAFM,CAMN,CAEEL,QAAS,wBAFX,CAGEK,OAAQ,CAAA,CAHV,CAIEC,OAAQ,CACNP,cAAeA,aADT,CAJV,CANM,CAF0D,CAiBlEQ,QAAS,kSAjByD;AAkBlE,eAAgB,CACdP,QAAS,YADK,CAEdC,MAAO,UAFO,CAlBkD,CAArC,CAwE9BJ,MAjDDK,UAAAM,aAAA,CAA6B,cAA7B,CAA6C,SAA7C,CAAwD,CACtD,oBAAqB,CACnBR,QAAS,gBADU,CAEnBC,MAAO,SAFY,CADiC,CAMtD,cAAe,CACbD,QAAS,oBADI,CAEbC,MAAO,OAFM,CAGbK,OAAQ,CACNR,QAASA,OADH,CAENC,cAAeA,aAFT,CAHK,CANuC,CAAxD,CAiDCF,MAlCDK,UAAAM,aAAA,CAA6B,cAA7B,CAA6C,QAA7C,CAAuD,CACrD,oBAAqB,CACnBR,QAAS,wBADU,CAEnBM,OAAQ,CACNG,UAAW,CACTT,QAAS,OADA,CAETC,MAAO,aAFE,CADL,CAKNS,KA0BLb,KA1BWK,UAAAS,WALA,CAFW,CADgC,CAYrD,mBAAoB,CAClB,CACEX,QAAS,gBADX;AAEEK,OAAQ,CAAA,CAFV,CAGEJ,MAAO,QAHT,CADkB,CAMlB,CACED,QAAS,gBADX,CAEEK,OAAQ,CAAA,CAFV,CAGEJ,MAAO,QAHT,CAIEK,OAAQ,CACNP,cAAeA,aADT,CAJV,CANkB,CAZiC,CAAvD,CAkCCF,MANDK,UAAAM,aAAA,CAA6B,cAA7B,CAA6C,SAA7C,CAAwD,CAEtDI,SAAU,wBAF4C,CAAxD,CAIA,QAECf,KAFMK,UAAAN,aAAA,CAA6B,iBAA7B,CAENC,MADDK,UAAAW,OAAA,CACChB,KADwBK,UAAAN,aA/EA,CAH7BH,MAAAC,QAAA,CAAiBE,YACjBA,aAAAkB,YAAA,CAA2B,cAC3BlB,aAAAmB,QAAA,CAAuB,CAAC,QAAD,CAL0G;",
"sources":["node_modules/refractor/lang/coffeescript.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$coffeescript\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = coffeescript\ncoffeescript.displayName = 'coffeescript'\ncoffeescript.aliases = ['coffee']\nfunction coffeescript(Prism) {\n  ;(function(Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/,\n      interpolation = {\n        pattern: /#\\{[^}]+\\}/,\n        alias: 'variable'\n      }\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n        // Strings are multiline\n        {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          greedy: true\n        },\n        {\n          // Strings are multiline\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ],\n      keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      // Block strings\n      'multiline-string': [\n        {\n          pattern: /'''[\\s\\S]*?'''/,\n          greedy: true,\n          alias: 'string'\n        },\n        {\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ]\n    })\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    })\n    delete Prism.languages.coffeescript['template-string']\n    Prism.languages.coffee = Prism.languages.coffeescript\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","coffeescript","Prism","comment","interpolation","pattern","alias","languages","extend","string","greedy","inside","keyword","insertBefore","delimiter","rest","javascript","property","coffee","displayName","aliases"]
}
