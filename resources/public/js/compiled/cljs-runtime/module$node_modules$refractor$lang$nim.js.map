{
"version":3,
"file":"module$node_modules$refractor$lang$nim.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAAC,UAAAF,IAAA,CAAsB,CACpBG,QAAS,KADW,CAIpBC,OAAQ,CACNC,QAAS,2IADH,CAENC,OAAQ,CAAA,CAFF,CAJY,CASpBC,OAAQ,gGATY,CAUpBC,QAAS,6VAVW;AAWpBC,SAAU,CACRJ,QAAS,oFADD,CAERK,OAAQ,CACNC,SAAU,KADJ,CAFA,CAXU,CAkBpBC,OAAQ,CACNP,QAAS,aADH,CAENK,OAAQ,CACNG,YAAa,GADP,CAFF,CAlBY,CAwBpBF,SAAU,CAIRN,QAAS,iJAJD,CAKRS,WAAY,CAAA,CALJ,CAxBU,CA+BpBD,YAAa,iCA/BO,CADJ,CAHpBhB,MAAAC,QAAA,CAAiBE,GACjBA,IAAAe,YAAA,CAAkB,KAClBf,IAAAgB,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/nim.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$nim\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = nim\nnim.displayName = 'nim'\nnim.aliases = []\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: /#.*/,\n    // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n    // Character literals are handled specifically to prevent issues with numeric type suffixes\n    string: {\n      pattern: /(?:(?:\\b(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")|'(?:\\\\(?:\\d+|x[\\da-fA-F]{2}|.)|[^'])')/,\n      greedy: true\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    function: {\n      pattern: /(?:(?!\\d)(?:\\w|\\\\x[8-9a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators inside backticks\n    ignore: {\n      pattern: /`[^`\\r\\n]+`/,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|of|or|in|is|isnot|mod|not|notin|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","nim","Prism","languages","comment","string","pattern","greedy","number","keyword","function","inside","operator","ignore","punctuation","lookbehind","displayName","aliases"]
}
