{
"version":3,
"file":"module$node_modules$refractor$lang$tt2.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,cAAD,CAAQ,CAClBA,cAAAC,SAAA,CAAeC,yBAAf,CACE,UAAQ,CAACF,KAAD,CAAQ,CAChBA,KAAAG,UAAAJ,IAAA,CAAsBC,KAAAG,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CACpDC,QAAS,qBAD2C,CAEpDC,QAAS,yNAF2C;AAGpDC,YAAa,YAHuC,CAAhC,CAKtBP,MAAAG,UAAAK,aAAA,CAA6B,KAA7B,CAAoC,QAApC,CAA8C,CAC5CC,SAAU,gDADkC,CAE5CC,SAAU,CACRC,QAAS,2CADD,CAFkC,CAA9C,CAMAX,MAAAG,UAAAK,aAAA,CAA6B,KAA7B,CAAoC,SAApC,CAA+C,CAC7CI,UAAW,CACTD,QAAS,qBADA,CAETE,MAAO,aAFE,CADkC,CAA/C,CAMAb,MAAAG,UAAAK,aAAA,CAA6B,KAA7B,CAAoC,QAApC,CAA8C,CAC5C,uBAAwB,CACtBG,QAAS,+BADa,CAEtBG,OAAQ,CAAA,CAFc,CAGtBD,MAAO,QAHe,CADoB,CAM5C,uBAAwB,CACtBF,QAAS,+BADa;AAEtBG,OAAQ,CAAA,CAFc,CAGtBD,MAAO,QAHe,CAItBE,OAAQ,CACNL,SAAU,CACRC,QAAS,2CADD,CADJ,CAJc,CANoB,CAA9C,CAiBA,QAAOX,KAAAG,UAAAJ,IAAAiB,OACPhB,MAAAiB,MAAAC,IAAA,CAAgB,iBAAhB,CAAmC,QAAQ,CAACC,GAAD,CAAM,CAE/CnB,KAAAG,UAAA,CAAgB,mBAAhB,CAAAiB,kBAAA,CACED,GADF,CAEE,KAFF,CADiBE,iBACjB,CAF+C,CAAjD,CAQArB,MAAAiB,MAAAC,IAAA,CAAgB,gBAAhB,CAAkC,QAAQ,CAACC,GAAD,CAAM,CAC9CnB,KAAAG,UAAA,CAAgB,mBAAhB,CAAAmB,qBAAA,CAA0DH,GAA1D,CAA+D,KAA/D,CAD8C,CAAhD,CA5CgB,CAAhB,CAAD,CA+CEnB,cA/CF,CAFiB,CAJpB,IAAIE,0BAA4BP,OAAA,CAAQ,sDAAR,CAChCC,OAAAC,QAAA;AAAiBE,GACjBA,IAAAwB,YAAA,CAAkB,KAClBxB,IAAAyB,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/tt2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$tt2\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = tt2\ntt2.displayName = 'tt2'\ntt2.aliases = []\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function(Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    })\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n      variable: {\n        pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%]$/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }) // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string\n    Prism.hooks.add('before-tokenize', function(env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'tt2',\n        tt2Pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2')\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","tt2","Prism","register","refractorMarkupTemplating","languages","extend","comment","keyword","punctuation","insertBefore","operator","variable","pattern","delimiter","alias","greedy","inside","string","hooks","add","env","buildPlaceholders","tt2Pattern","tokenizePlaceholders","displayName","aliases"]
}
