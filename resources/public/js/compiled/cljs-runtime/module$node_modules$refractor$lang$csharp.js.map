{
"version":3,
"file":"module$node_modules$refractor$lang$csharp.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyBC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CACvDC,QAAS,4oBAD8C;AAEvDC,OAAQ,CACN,CACEC,QAAS,wCADX,CAEEC,OAAQ,CAAA,CAFV,CADM,CAKN,CACED,QAAS,kCADX,CAEEC,OAAQ,CAAA,CAFV,CALM,CAF+C,CAYvD,aAAc,CACZ,CAEED,QAAS,kCAFX,CAGEE,OAAQ,CACNC,YAAa,IADP,CAHV,CADY,CAQZ,CAEEH,QAAS,0BAFX,CAGEI,WAAY,CAAA,CAHd,CAIEF,OAAQ,CACNC,YAAa,IADP,CAJV,CARY,CAgBZ,CAEEH,QAAS,yEAFX,CAGEI,WAAY,CAAA,CAHd,CAIEF,OAAQ,CACNC,YAAa,IADP,CAJV,CAhBY,CAwBZ,CAEEH,QAAS,uEAFX,CAGEI,WAAY,CAAA,CAHd;AAIEF,OAAQ,CACNC,YAAa,IADP,CAJV,CAxBY,CAZyC,CA6CvDE,OAAQ,2CA7C+C,CA8CvDC,SAAU,gDA9C6C,CA+CvDH,YAAa,wBA/C0C,CAAhC,CAiDzBR,MAAAC,UAAAW,aAAA,CAA6B,QAA7B,CAAuC,YAAvC,CAAqD,CACnD,iBAAkB,CAChBP,QAAS,6BADO,CAEhBE,OAAQ,CACNM,SAAU,MADJ,CAEN,aAAc,CACZR,QAAS,wBADG,CAEZE,OAAQ,CACNC,YAAa,IADP,CAFI,CAFR,CAQNL,QAASH,KAAAC,UAAAF,OAAAI,QARH,CASNK,YAAa,WATP,CAFQ,CADiC,CAenDM,aAAc,CACZT,QAAS,YADG,CAEZI,WAAY,CAAA,CAFA,CAGZM,MAAO,UAHK;AAIZR,OAAQ,CAENS,UAAW,CACTX,QAAS,0FADA,CAETI,WAAY,CAAA,CAFH,CAGTM,MAAO,SAHE,CAFL,CAJI,CAfqC,CAArD,CA6BAf,MAAAC,UAAAgB,OAAA,CAAyBjB,KAAAC,UAAAiB,GAAzB,CAA8ClB,KAAAC,UAAAF,OA/EzB,CAHvBH,MAAAC,QAAA,CAAiBE,MACjBA,OAAAoB,YAAA,CAAqB,QACrBpB,OAAAqB,QAAA,CAAiB,CAAC,QAAD,CAAW,IAAX,CAL0G;",
"sources":["node_modules/refractor/lang/csharp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$csharp\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  Prism.languages.csharp = Prism.languages.extend('clike', {\n    keyword: /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n    string: [\n      {\n        pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n        greedy: true\n      }\n    ],\n    'class-name': [\n      {\n        // (Foo bar, Bar baz)\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // [Foo]\n        pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo : Bar\n        pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo\n        pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    ],\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n    operator: />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n    punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n  })\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'generic-method': {\n      pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n      inside: {\n        function: /^\\w+/,\n        'class-name': {\n          pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        keyword: Prism.languages.csharp.keyword,\n        punctuation: /[<>(),.:]/\n      }\n    },\n    preprocessor: {\n      pattern: /(^\\s*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight preprocessor directives as keywords\n        directive: {\n          pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  })\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","csharp","Prism","languages","extend","keyword","string","pattern","greedy","inside","punctuation","lookbehind","number","operator","insertBefore","function","preprocessor","alias","directive","dotnet","cs","displayName","aliases"]
}
