{
"version":3,
"file":"goog.net.xpc.frameelementmethodtransport.js",
"lineCount":106,
"mappings":"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",
"sources":["goog/net/xpc/frameelementmethodtransport.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Contains the frame element method transport for cross-domain\n * communication. It exploits the fact that FF lets a page in an\n * iframe call a method on the iframe-element it is contained in, even if the\n * containing page is from a different domain.\n *\n */\n\n\ngoog.provide('goog.net.xpc.FrameElementMethodTransport');\n\ngoog.require('goog.log');\ngoog.require('goog.net.xpc');\ngoog.require('goog.net.xpc.CrossPageChannelRole');\ngoog.require('goog.net.xpc.Transport');\ngoog.require('goog.net.xpc.TransportTypes');\n\n\n\n/**\n * Frame-element method transport.\n *\n * Firefox allows a document within an iframe to call methods on the\n * iframe-element added by the containing document.\n * NOTE(user): Tested in all FF versions starting from 1.0\n *\n * @param {goog.net.xpc.CrossPageChannel} channel The channel this transport\n *     belongs to.\n * @param {goog.dom.DomHelper=} opt_domHelper The dom helper to use for finding\n *     the correct window.\n * @constructor\n * @extends {goog.net.xpc.Transport}\n * @final\n */\ngoog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {\n  goog.net.xpc.FrameElementMethodTransport.base(\n      this, 'constructor', opt_domHelper);\n\n  /**\n   * The channel this transport belongs to.\n   * @type {goog.net.xpc.CrossPageChannel}\n   * @private\n   */\n  this.channel_ = channel;\n\n  // To transfer messages, this transport basically uses normal function calls,\n  // which are synchronous. To avoid endless recursion, the delivery has to\n  // be artificially made asynchronous.\n\n  /**\n   * Array for queued messages.\n   * @type {Array<{serviceName: string, payload: string}>}\n   * @private\n   */\n  this.queue_ = [];\n\n  /**\n   * Callback function which wraps deliverQueued_.\n   * @type {Function}\n   * @private\n   */\n  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);\n};\ngoog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);\n\n\n/**\n * The transport type.\n * @type {number}\n * @protected\n * @override\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.transportType =\n    goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;\n\n\n/** @private {!Function|undefined} */\ngoog.net.xpc.FrameElementMethodTransport.prototype.attemptSetupCb_;\n\n\n/** @private */\ngoog.net.xpc.FrameElementMethodTransport.prototype.outgoing_;\n\n\n/** @private */\ngoog.net.xpc.FrameElementMethodTransport.prototype.iframeElm_;\n\n\n/**\n * Flag used to enforce asynchronous messaging semantics.\n * @type {boolean}\n * @private\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;\n\n\n/**\n * Holds the function to send messages to the peer\n * (once it becomes available).\n * @type {?Function}\n * @private\n */\ngoog.net.xpc.FrameElementMethodTransport.outgoing_ = null;\n\n\n/**\n * Connect this transport.\n * @override\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {\n  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {\n    // get shortcut to iframe-element\n    this.iframeElm_ = this.channel_.getIframeElement();\n\n    // add the gateway function to the iframe-element\n    // (to be called by the peer)\n    this.iframeElm_['XPC_toOuter'] = goog.bind(this.incoming_, this);\n\n    // at this point we just have to wait for a notification from the peer...\n\n  } else {\n    this.attemptSetup_();\n  }\n};\n\n\n/**\n * Only used from within an iframe. Attempts to attach the method\n * to be used for sending messages by the containing document. Has to\n * wait until the containing document has finished. Therefore calls\n * itself in a timeout if not successful.\n * @private\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {\n  var retry = true;\n\n  try {\n    if (!this.iframeElm_) {\n      // throws security exception when called too early\n      this.iframeElm_ = this.getWindow().frameElement;\n    }\n    // check if iframe-element and the gateway-function to the\n    // outer-frame are present\n    // TODO(user) Make sure the following code doesn't throw any exceptions\n    if (this.iframeElm_ && this.iframeElm_['XPC_toOuter']) {\n      // get a reference to the gateway function\n      this.outgoing_ = this.iframeElm_['XPC_toOuter'];\n      // attach the gateway function the other document will use\n      this.iframeElm_['XPC_toOuter']['XPC_toInner'] =\n          goog.bind(this.incoming_, this);\n      // stop retrying\n      retry = false;\n      // notify outer frame\n      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);\n      // notify channel that the transport is ready\n      this.channel_.notifyConnected();\n    }\n  } catch (e) {\n    goog.log.error(\n        goog.net.xpc.logger, 'exception caught while attempting setup: ' + e);\n  }\n  // retry necessary?\n  if (retry) {\n    if (!this.attemptSetupCb_) {\n      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);\n    }\n    this.getWindow().setTimeout(this.attemptSetupCb_, 100);\n  }\n};\n\n\n/**\n * Handles transport service messages.\n * @param {string} payload The message content.\n * @override\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler =\n    function(payload) {\n  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER &&\n      !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {\n    // get a reference to the gateway function\n    this.outgoing_ = this.iframeElm_['XPC_toOuter']['XPC_toInner'];\n    // notify the channel we're ready\n    this.channel_.notifyConnected();\n  } else {\n    throw new Error('Got unexpected transport message.');\n  }\n};\n\n\n/**\n * Process incoming message.\n * @param {string} serviceName The name of the service the message is to be\n * delivered to.\n * @param {string} payload The message to process.\n * @private\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(\n    serviceName, payload) {\n  if (!this.recursive_ && this.queue_.length == 0) {\n    this.channel_.xpcDeliver(serviceName, payload);\n  } else {\n    this.queue_.push({serviceName: serviceName, payload: payload});\n    if (this.queue_.length == 1) {\n      this.getWindow().setTimeout(this.deliverQueuedCb_, 1);\n    }\n  }\n};\n\n\n/**\n * Delivers queued messages.\n * @private\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {\n  while (this.queue_.length) {\n    var msg = this.queue_.shift();\n    this.channel_.xpcDeliver(msg.serviceName, msg.payload);\n  }\n};\n\n\n/**\n * Send a message\n * @param {string} service The name off the service the message is to be\n * delivered to.\n * @param {string} payload The message content.\n * @override\n */\ngoog.net.xpc.FrameElementMethodTransport.prototype.send = function(\n    service, payload) {\n  this.recursive_ = true;\n  this.outgoing_(service, payload);\n  this.recursive_ = false;\n};\n\n\n/** @override */\ngoog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal =\n    function() {\n  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(\n      this);\n  this.outgoing_ = null;\n  this.iframeElm_ = null;\n};\n"],
"names":["goog","provide","require","net","xpc","FrameElementMethodTransport","goog.net.xpc.FrameElementMethodTransport","channel","opt_domHelper","base","channel_","queue_","deliverQueuedCb_","bind","deliverQueued_","inherits","Transport","prototype","transportType","TransportTypes","FRAME_ELEMENT_METHOD","attemptSetupCb_","outgoing_","iframeElm_","recursive_","connect","goog.net.xpc.FrameElementMethodTransport.prototype.connect","getRole","CrossPageChannelRole","OUTER","getIframeElement","incoming_","attemptSetup_","goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_","retry","getWindow","frameElement","send","TRANSPORT_SERVICE_","SETUP_ACK_","notifyConnected","e","log","error","logger","setTimeout","transportServiceHandler","goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler","payload","isConnected","Error","goog.net.xpc.FrameElementMethodTransport.prototype.incoming_","serviceName","length","xpcDeliver","push","goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_","msg","shift","goog.net.xpc.FrameElementMethodTransport.prototype.send","service","disposeInternal","goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal","superClass_","call"]
}
