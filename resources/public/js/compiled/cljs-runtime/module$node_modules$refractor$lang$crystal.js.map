{
"version":3,
"file":"module$node_modules$refractor$lang$crystal.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM5HC,QAASA,QAAO,CAACC,KAAD,CAAQ,CACtBA,KAAAC,SAAA,CAAeC,aAAf,CA+CGF,MA7CDG,UAAAJ,QAAA,CA6CCC,KA7CyBG,UAAAC,OAAA,CAAuB,MAAvB,CAA+B,CACvDC,QAAS,CACP,gWADO;AAEP,CACEC,QAAS,+BADX,CAEEC,WAAY,CAAA,CAFd,CAFO,CAD8C,CAQvDC,OAAQ,qJAR+C,CAA/B,CA6CzBR,MAnCDG,UAAAM,aAAA,CAA6B,SAA7B,CAAwC,QAAxC,CAAkD,CAChDC,UAAW,CACTJ,QAAS,UADA,CAETK,MAAO,WAFE,CAGTC,OAAQ,CACNC,UAAW,CACTP,QAAS,UADA,CAETK,MAAO,KAFE,CADL,CAKNG,KA0BLd,KA1BWG,UAAAJ,QALA,CAHC,CADqC,CAYhDgB,UAAW,CACT,CACET,QAAS,aADX,CAEEM,OAAQ,CACNC,UAAW,CACTP,QAAS,aADA,CAETK,MAAO,KAFE,CADL,CAKNG,KAePd,KAfaG,UAAAJ,QALA,CAFV,CADS;AAWT,CACEO,QAAS,WADX,CAEEM,OAAQ,CACNC,UAAW,CACTP,QAAS,WADA,CAETK,MAAO,KAFE,CADL,CAKNG,KAKPd,KALaG,UAAAJ,QALA,CAFV,CAXS,CAZqC,CAAlD,CAboB,CAJxB,IAAIG,cAAgBP,OAAA,CAAQ,yCAAR,CACpBC,OAAAC,QAAA,CAAiBE,OACjBA,QAAAiB,YAAA,CAAsB,SACtBjB,QAAAkB,QAAA,CAAkB,EAL0G;",
"sources":["node_modules/refractor/lang/crystal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$crystal\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = crystal\ncrystal.displayName = 'crystal'\ncrystal.aliases = []\nfunction crystal(Prism) {\n  Prism.register(refractorRuby)\n  ;(function(Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [\n        /\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,\n        {\n          pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/\n    })\n    Prism.languages.insertBefore('crystal', 'string', {\n      attribute: {\n        pattern: /@\\[.+?\\]/,\n        alias: 'attr-name',\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.crystal\n        }\n      },\n      expansion: [\n        {\n          pattern: /\\{\\{.+?\\}\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^\\{\\{|\\}\\}$/,\n              alias: 'tag'\n            },\n            rest: Prism.languages.crystal\n          }\n        },\n        {\n          pattern: /\\{%.+?%\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^\\{%|%\\}$/,\n              alias: 'tag'\n            },\n            rest: Prism.languages.crystal\n          }\n        }\n      ]\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","crystal","Prism","register","refractorRuby","languages","extend","keyword","pattern","lookbehind","number","insertBefore","attribute","alias","inside","delimiter","rest","expansion","displayName","aliases"]
}
