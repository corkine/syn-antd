{
"version":3,
"file":"module$node_modules$refractor$lang$xquery.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/refractor/lang/xquery.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$xquery\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = xquery\nxquery.displayName = 'xquery'\nxquery.aliases = []\nfunction xquery(Prism) {\n  ;(function(Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[\\w-:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [\n        /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n        {\n          pattern: /(\\s)-(?=\\s)/,\n          lookbehind: true\n        }\n      ],\n      punctuation: /[[\\](){},;:/]/\n    })\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i\n    Prism.languages.xquery['tag'].inside[\n      'attr-value'\n    ].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i\n    Prism.languages.xquery['tag'].inside['attr-value'].inside[\n      'punctuation'\n    ] = /^=\"|\"$/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n      inside: {\n        rest: Prism.languages.xquery\n      },\n      alias: 'language-xquery'\n    } // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{' && // Ignore `{{`\n            (!tokens[i + 1] ||\n              tokens[i + 1].type !== 'punctuation' ||\n              tokens[i + 1].content !== '{') &&\n            (!tokens[i - 1] ||\n              tokens[i - 1].type !== 'plain-text' ||\n              tokens[i - 1].content !== '{')\n          ) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText\n            } else {\n              tokens[i] = new Prism.Token(\n                'plain-text',\n                plainText,\n                null,\n                plainText\n              )\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'xquery') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","xquery","Prism","languages","extend","pattern","greedy","alias","string","extension","variable","axis","lookbehind","keyword","function","builtin","number","operator","punctuation","tag","inside","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","test","Token","hooks","add","env","language","displayName","aliases"]
}
