{
"version":3,
"file":"module$node_modules$refractor$lang$http.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CA6EhBA,KA3EDC,UAAAF,KAAA,CAAuB,CACrB,eAAgB,CACdG,QAAS,6FADK,CAEdC,OAAQ,CAENC,SAAU,wDAFJ,CAIN,YAAa,MAJP,CAFM,CADK,CAUrB,kBAAmB,CACjBF,QAAS,sBADQ,CAEjBC,OAAQ,CAENC,SAAU,CACRF,QAAS,wBADD,CAERG,WAAY,CAAA,CAFJ,CAFJ,CAFS,CAVE,CAqBrB,cAAe,CACbH,QAAS,gBADI;AAEbI,MAAO,SAFM,CArBM,CA0BvB,KAAIC,MAiDHP,KAjDWC,UACRO,MAAAA,CAAgB,CAClB,yBAA0BD,KAAAE,WADR,CAElB,mBAAoBF,KAAAG,KAApB,EAAkCH,KAAAE,WAFhB,CAGlB,kBAAmBF,KAAAI,IAHD,CAIlB,WAAYJ,KAAAI,IAJM,CAKlB,YAAaJ,KAAAK,KALK,CAMlB,WAAYL,KAAAM,IANM,CAQpB,KAAIC,YAAc,CAChB,mBAAoB,CAAA,CADJ,CAEhB,kBAAmB,CAAA,CAFH,CAAlB,CAiBSC,WAAT,KAASA,WAAT,GAAwBP,MAAxB,CACE,GAAIA,KAAA,CAAcO,WAAd,CAAJ,CAAgC,CAC9B,IAAAC,QAAUA,OAAVA,EAAqB,EACP,IAAAF,WAAA,CAAYC,WAAZ,CAAA,CAAA,CACV,IAAA,gBAAA,WAVN,KAAIE,OAASF,eAAAG,QAAA,CAAoB,WAApB,CAAiC,EAAjC,CAEb,gBAAA;AAAO,KAAP,CAAeH,eAAf,CAA6B,GAA7B,EADoB,uBACpB,CAD8CE,MAC9C,CADuD,cACvD,EAAmD,GAOnC,CAAA,IAEVF,gBAAAA,CAAAA,WACJC,QAAA,CAAQD,WAAR,CAAA,CAAuB,CACrBb,QAASiB,MAAA,CACP,oBADO,CAJGjB,eAIH,CAGL,wCAHK,CAIP,GAJO,CADY,CAOrBG,WAAY,CAAA,CAPS,CAQrBF,OAAQ,CACNiB,KAAMZ,KAAA,CAAcO,WAAd,CADA,CARa,CALO,CAmB9BC,OAAJ,EAGChB,KAFCC,UAAAoB,aAAA,CAA6B,MAA7B,CAAqC,aAArC,CAAoDL,OAApD,CA3Ee,CAHrBpB,MAAAC,QAAA,CAAiBE,IACjBA,KAAAuB,YAAA,CAAmB,MACnBvB,KAAAwB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/http.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$http\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function(Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","http","Prism","languages","pattern","inside","property","lookbehind","alias","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","contentType","options","suffix","replace","RegExp","rest","insertBefore","displayName","aliases"]
}
