{
"version":3,
"file":"module$node_modules$refractor$lang$regex.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM1HC,QAASA,MAAK,CAACC,cAAD,CAAQ,CAClB,SAAQ,CAACA,KAAD,CAAQ,CAChB,IAAIC,cAAgB,CAClBC,QAAS,sBADS,CAElBC,MAAO,QAFW,CAApB,CAIIC,OAAS,4FAJb,CAKIC,UAAY,yBALhB,CAMIC,UAAY,cAAZA,CAA6BF,MAAAG,OAA7BD,CAA6C,GANjD,CAQIE,UAAY,CACdN,QAAS,uBADK,CAEdO,WAAY,CAAA,CAFE,CAGdN,MAAO,UAHO,CARhB,CAaIO,cAAgB,CAClB,0BADkB;AAElB,CACER,QAAS,cADX,CAEES,OAAQ,CACN,aAAcH,SADR,CAFV,CAFkB,CASpBR,MAAAY,UAAAb,MAAA,CAAwB,CACtBc,QAAS,CACPX,QAAS,iDADF,CAEPO,WAAY,CAAA,CAFL,CAGPE,OAAQ,CACN,mBAAoB,CAClBT,QAAS,SADS,CAElBO,WAAY,CAAA,CAFM,CADd,CAKN,sBAAuB,SALjB,CAMNK,MAAO,CACLZ,QA1BIa,MAAAD,CAAOR,SAAPQ,CAAmB,GAAnBA,CAAyBR,SAAzBQ,CAyBC,CAELH,OAAQ,CACNP,OAAQA,MADF,CAEN,oBAAqB,GAFf,CAFH,CAND,CAaN,iBAAkBH,aAbZ,CAcNe,UAAWX,SAdL,CAeNK,cAAeA,aAfT,CAgBNN,OAAQA,MAhBF,CAHD,CADa,CAuBtB,iBAAkBH,aAvBI,CAwBtBe,UAAWX,SAxBW,CAyBtBK,cAAeA,aAzBO;AA0BtBO,OAAQ,iBA1Bc,CA2BtBb,OAAQA,MA3Bc,CA4BtBc,MAAO,CACL,CAIEhB,QAAS,6EAJX,CAKES,OAAQ,CACN,aAAcH,SADR,CALV,CADK,CAUL,IAVK,CA5Be,CAwCtBW,WAAY,wBAxCU,CAyCtBC,YAAa,IAzCS,CA2CvB,2DAAA,MAAA,CAAA,GAAA,CAAAC,QAAA,CAOS,QAAQ,CAACC,IAAD,CAAO,CAEvB,GADIC,IACJ,CADcvB,KAAAY,UAAA,CAAgBU,IAAhB,CACd,CACEC,IAAA,MAAAZ,OAAA,CAA0B,CACxB,cAAe,SADS,CAExB,kBAAmB,SAFK,CAGxB,iBAAkB,CAChBT,QAAS,SADO,CAEhBS,OAAQX,KAAAY,UAAAb,MAFQ,CAHM,CAHL,CAPxB,CAlEe,CAAhB,CAAD,CAsFEC,cAtFF,CADmB;AAHtBJ,MAAAC,QAAA,CAAiBE,KACjBA,MAAAyB,YAAA,CAAoB,OACpBzB,MAAA0B,QAAA,CAAgB,EAL0G;",
"sources":["node_modules/refractor/lang/regex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$regex\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function(Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    var backreference = [\n      /\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n      {\n        pattern: /\\\\k<[^<>']+>/,\n        inside: {\n          'group-name': groupName\n        }\n      }\n    ]\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          inside: {\n            'group-name': groupName\n          }\n        },\n        /\\)/\n      ],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    }\n    ;[\n      'actionscript',\n      'coffescript',\n      'flow',\n      'javascript',\n      'typescript',\n      'vala'\n    ].forEach(function(lang) {\n      var grammar = Prism.languages[lang]\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","regex","Prism","specialEscape","pattern","alias","escape","charClass","rangeChar","source","groupName","lookbehind","backreference","inside","languages","charset","range","RegExp","charclass","anchor","group","quantifier","alternation","forEach","lang","grammar","displayName","aliases"]
}
