{
"version":3,
"file":"module$node_modules$refractor$lang$abnf.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAuDhBA,KAnDDC,UAAAF,KAAA,CAAuB,CACrBG,QAAS,KADY,CAErBC,OAAQ,CACNC,QAAS,uBADH,CAENC,OAAQ,CAAA,CAFF,CAGNC,OAAQ,CACNC,YAAa,QADP,CAHF,CAFa,CASrBC,MAAO,CACLJ,QAAS,gDADJ,CAELK,MAAO,QAFF,CATc,CAarBC,SAAU,CACRN,QAAS,kEADD,CAERK,MAAO,QAFC,CAbW,CAiBrBE,WAAY,CACVP,QAAS,4BADC,CAEVQ,WAAY,CAAA,CAFF,CAGVH,MAAO,UAHG,CAjBS;AAsBrBI,WAAY,CACVT,QAAS,+CADC,CAEVQ,WAAY,CAAA,CAFF,CAGVH,MAAO,SAHG,CAIVH,OAAQ,CACNC,YAAa,KADP,CAJE,CAtBS,CA8BrB,YAAa,CACXH,QAAS,kMADE,CAKXQ,WAAY,CAAA,CALD,CAMXH,MAAO,CAAC,MAAD,CAAS,UAAT,CANI,CAOXH,OAAQ,CACNC,YAAa,KADP,CAPG,CA9BQ,CAyCrBO,KAAM,CACJV,QAAS,qCADL,CAEJQ,WAAY,CAAA,CAFR,CAGJN,OAAQ,CACNC,YAAa,KADP,CAHJ,CAzCe;AAgDrBQ,SAAU,SAhDW,CAiDrBR,YAAa,UAjDQ,CAJN,CAHrBX,MAAAC,QAAA,CAAiBE,IACjBA,KAAAiB,YAAA,CAAmB,MACnBjB,KAAAkB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/abnf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$abnf\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = abnf\nabnf.displayName = 'abnf'\nabnf.aliases = []\nfunction abnf(Prism) {\n  ;(function(Prism) {\n    var coreRules =\n      '(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)'\n    Prism.languages.abnf = {\n      comment: /;.*/,\n      string: {\n        pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n        greedy: true,\n        inside: {\n          punctuation: /^%[is]/\n        }\n      },\n      range: {\n        pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n        alias: 'number'\n      },\n      terminal: {\n        pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n        alias: 'number'\n      },\n      repetition: {\n        pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      definition: {\n        pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^>\\r\\n]*>)(?=\\s*=)/m,\n        lookbehind: true,\n        alias: 'keyword',\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      'core-rule': {\n        pattern: RegExp(\n          '(?:(^|[^<\\\\w-])' + coreRules + '|<' + coreRules + '>)(?![\\\\w-])',\n          'i'\n        ),\n        lookbehind: true,\n        alias: ['rule', 'constant'],\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      rule: {\n        pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^>\\r\\n]*>/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /<|>/\n        }\n      },\n      operator: /=\\/?|\\//,\n      punctuation: /[()\\[\\]]/\n    }\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","abnf","Prism","languages","comment","string","pattern","greedy","inside","punctuation","range","alias","terminal","repetition","lookbehind","definition","rule","operator","displayName","aliases"]
}
