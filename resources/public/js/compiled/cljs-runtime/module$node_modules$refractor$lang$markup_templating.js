shadow$provide.module$node_modules$refractor$lang$markup_templating=function(global,process,require,module,exports,shadow$shims){function markupTemplating(Prism$jscomp$0){(function(Prism){function getPlaceholder(language,index){return"___"+language.toUpperCase()+index+"___"}Object.defineProperties(Prism.languages["markup-templating"]={},{buildPlaceholders:{value:function(env,language,placeholderPattern,replaceFilter){if(env.language===language){var tokenStack=env.tokenStack=[];env.code=env.code.replace(placeholderPattern,
function(match){if("function"===typeof replaceFilter&&!replaceFilter(match))return match;for(var i=tokenStack.length,placeholder;-1!==env.code.indexOf(placeholder=getPlaceholder(language,i));)++i;tokenStack[i]=match;return placeholder});env.grammar=Prism.languages.markup}}},tokenizePlaceholders:{value:function(env,language){function walkTokens(tokens){for(var i=0;i<tokens.length&&!(j>=keys.length);i++){var token=tokens[i];if("string"===typeof token||token.content&&"string"===typeof token.content){var k=
keys[j],t=env.tokenStack[k],s="string"===typeof token?token:token.content,placeholder=getPlaceholder(language,k),index=s.indexOf(placeholder);-1<index&&(++j,k=s.substring(0,index),t=new Prism.Token(language,Prism.tokenize(t,env.grammar),"language-"+language,t),s=s.substring(index+placeholder.length),placeholder=[],k&&placeholder.push.apply(placeholder,walkTokens([k])),placeholder.push(t),s&&placeholder.push.apply(placeholder,walkTokens([s])),"string"===typeof token?tokens.splice.apply(tokens,[i,1].concat(placeholder)):
token.content=placeholder)}else token.content&&walkTokens(token.content)}return tokens}if(env.language===language&&env.tokenStack){env.grammar=Prism.languages[language];var j=0,keys=Object.keys(env.tokenStack);walkTokens(env.tokens)}}}})})(Prism$jscomp$0)}module.exports=markupTemplating;markupTemplating.displayName="markupTemplating";markupTemplating.aliases=[]}
//# sourceMappingURL=module$node_modules$refractor$lang$markup_templating.js.map
