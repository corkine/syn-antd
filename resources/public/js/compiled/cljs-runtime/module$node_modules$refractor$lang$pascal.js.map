{
"version":3,
"file":"module$node_modules$refractor$lang$pascal.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CAKrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,CAAC,kBAAD,CAAqB,cAArB,CAAqC,QAArC,CADc,CAEvBC,OAAQ,CACNC,QAAS,kDADH,CAENC,OAAQ,CAAA,CAFF,CAFe,CAMvBC,QAAS,CACP,CAEEF,QAAS,gTAFX;AAGEG,WAAY,CAAA,CAHd,CADO,CAMP,CAEEH,QAAS,8CAFX,CAGEG,WAAY,CAAA,CAHd,CANO,CAWP,CAEEH,QAAS,kKAFX,CAGEG,WAAY,CAAA,CAHd,CAXO,CAgBP,CAEEH,QAAS,khBAFX;AAGEG,WAAY,CAAA,CAHd,CAhBO,CANc,CA4BvBC,OAAQ,CAEN,yBAFM,CAGN,gCAHM,CA5Be,CAiCvBC,SAAU,CACR,+CADQ,CAER,CACEL,QAAS,yEADX,CAEEG,WAAY,CAAA,CAFd,CAFQ,CAjCa,CAwCvBG,YAAa,wBAxCU,CA0CzBV,MAAAC,UAAAU,aAAA,CAA+BX,KAAAC,UAAAF,OA/CV,CAHvBH,MAAAC,QAAA,CAAiBE,MACjBA,OAAAa,YAAA,CAAqB,QACrBb,OAAAc,QAAA,CAAiB,CAAC,cAAD,CAL0G;",
"sources":["node_modules/refractor/lang/pascal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$pascal\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = pascal\npascal.displayName = 'pascal'\npascal.aliases = ['objectpascal']\nfunction pascal(Prism) {\n  // Based on Free Pascal\n  /* TODO\nSupport inline asm ?\n*/\n  Prism.languages.pascal = {\n    comment: [/\\(\\*[\\s\\S]+?\\*\\)/, /\\{[\\s\\S]+?\\}/, /\\/\\/.*/],\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    keyword: [\n      {\n        // Turbo Pascal\n        pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Free Pascal\n        pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Object Pascal\n        pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n        lookbehind: true\n      },\n      {\n        // Modifiers\n        pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n        lookbehind: true\n      }\n    ],\n    number: [\n      // Hexadecimal, octal and binary\n      /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n      /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i\n    ],\n    operator: [\n      /\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/i,\n      {\n        pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  }\n  Prism.languages.objectpascal = Prism.languages.pascal\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","pascal","Prism","languages","comment","string","pattern","greedy","keyword","lookbehind","number","operator","punctuation","objectpascal","displayName","aliases"]
}
