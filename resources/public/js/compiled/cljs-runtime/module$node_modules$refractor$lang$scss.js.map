{
"version":3,
"file":"module$node_modules$refractor$lang$scss.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAAC,UAAAF,KAAA,CAAuBC,KAAAC,UAAAC,OAAA,CAAuB,KAAvB,CAA8B,CACnDC,QAAS,CACPC,QAAS,sCADF,CAEPC,WAAY,CAAA,CAFL,CAD0C,CAKnDC,OAAQ,CACNF,QAAS,yCADH,CAENG,OAAQ,CACNC,KAAM,SADA,CAFF,CAL2C,CAYnDC,IAAK,yBAZ8C,CAoBnDC,SAAU,CAERN,QAAS,gFAFD,CAGRG,OAAQ,CACNI,OAAQ,CACNP,QAAS,GADH,CAENQ,MAAO,WAFD,CADF;AAKNC,YAAa,SALP,CAMNC,SAAU,wBANJ,CAHA,CApByC,CAgCnDC,SAAU,CACRX,QAAS,2CADD,CAERG,OAAQ,CACNO,SAAU,wBADJ,CAFA,CAhCyC,CAA9B,CAuCvBd,MAAAC,UAAAe,aAAA,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAC7CC,QAAS,CACP,qGADO,CAEP,CACEb,QAAS,2BADX,CAEEC,WAAY,CAAA,CAFd,CAFO,CADoC,CAA/C,CASAL,MAAAC,UAAAe,aAAA,CAA6B,MAA7B,CAAqC,WAArC,CAAkD,CAEhDF,SAAU,wBAFsC,CAAlD,CAIAd,MAAAC,UAAAe,aAAA,CAA6B,MAA7B,CAAqC,UAArC;AAAiD,CAC/CH,YAAa,CACXT,QAAS,SADE,CAEXQ,MAAO,UAFI,CADkC,CAK/CM,UAAW,CACTd,QAAS,4BADA,CAETQ,MAAO,SAFE,CALoC,CAS/CO,QAAS,oBATsC,CAU/CC,KAAM,CACJhB,QAAS,UADL,CAEJQ,MAAO,SAFH,CAVyC,CAc/CS,SAAU,CACRjB,QAAS,iDADD,CAERC,WAAY,CAAA,CAFJ,CAdqC,CAAjD,CAmBAL,MAAAC,UAAAF,KAAA,OAAAQ,OAAAe,KAAA,CAA6CtB,KAAAC,UAAAF,KAxE1B,CAHrBH,MAAAC,QAAA,CAAiBE,IACjBA,KAAAwB,YAAA,CAAmB,MACnBxB,KAAAyB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/scss.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$scss\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = scss\nscss.displayName = 'scss'\nscss.aliases = []\nfunction scss(Prism) {\n  Prism.languages.scss = Prism.languages.extend('css', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    atrule: {\n      pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n      inside: {\n        rule: /@[\\w-]+/ // See rest below\n      }\n    },\n    // url, compassified\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    selector: {\n      // Initial look-ahead is used to prevent matching of blank selectors\n      pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n      inside: {\n        parent: {\n          pattern: /&/,\n          alias: 'important'\n        },\n        placeholder: /%[-\\w]+/,\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    },\n    property: {\n      pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n      inside: {\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    }\n  })\n  Prism.languages.insertBefore('scss', 'atrule', {\n    keyword: [\n      /@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,\n      {\n        pattern: /( +)(?:from|through)(?= )/,\n        lookbehind: true\n      }\n    ]\n  })\n  Prism.languages.insertBefore('scss', 'important', {\n    // var and interpolated vars\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  })\n  Prism.languages.insertBefore('scss', 'function', {\n    placeholder: {\n      pattern: /%[-\\w]+/,\n      alias: 'selector'\n    },\n    statement: {\n      pattern: /\\B!(?:default|optional)\\b/i,\n      alias: 'keyword'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    operator: {\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","scss","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","rule","url","selector","parent","alias","placeholder","variable","property","insertBefore","keyword","statement","boolean","null","operator","rest","displayName","aliases"]
}
