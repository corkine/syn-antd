{
"version":3,
"file":"module$node_modules$refractor$lang$sass.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAiEhBA,KA/DDC,UAAAF,KAAA,CA+DCC,KA/DsBC,UAAAC,OAAA,CAAuB,KAAvB,CAA8B,CAEnDC,QAAS,CACPC,QAAS,gDADF,CAEPC,WAAY,CAAA,CAFL,CAF0C,CAA9B,CA+DtBL,MAxDDC,UAAAK,aAAA,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAE7C,cAAe,CAEbF,QAAS,qBAFI,CAGbG,OAAQ,CACNC,OAAQ,mBADF,CAHK,CAF8B,CAA/C,CAUA,QA8CCR,KA9CMC,UAAAF,KAAAS,OACP,KAAIC,SAAW,wBAAf,CACIC,SAAW,CACb,0CADa;AAEb,CACEN,QAAS,cADX,CAEEC,WAAY,CAAA,CAFd,CAFa,CA4CdL,MArCDC,UAAAK,aAAA,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAE/C,gBAAiB,CACfF,QAAS,cADM,CAEfG,OAAQ,CACNI,YAAa,GADP,CAENF,SAAUA,QAFJ,CAGNC,SAAUA,QAHJ,CAFO,CAF8B,CAW/C,gBAAiB,CACfN,QAAS,qCADM,CAEfG,OAAQ,CACNK,SAAU,CACR,iBADQ,CAER,CACER,QAAS,YADX,CAEEC,WAAY,CAAA,CAFd,CAFQ,CADJ,CAQNM,YAAa,GARP,CASNF,SAAUA,QATJ,CAUNC,SAAUA,QAVJ,CAWNG,UAaLb,KAbgBC,UAAAF,KAAAc,UAXL,CAFO,CAX8B,CAAjD,CA4BA,QASCb,KATMC,UAAAF,KAAAa,SACP,QAQCZ,KARMC,UAAAF,KAAAc,UAQNb,MANDC,UAAAK,aAAA,CAA6B,MAA7B;AAAqC,aAArC,CAAoD,CAClDQ,SAAU,CACRV,QAAS,wEADD,CAERC,WAAY,CAAA,CAFJ,CADwC,CAApD,CA3DiB,CAHrBT,MAAAC,QAAA,CAAiBE,IACjBA,KAAAgB,YAAA,CAAmB,MACnBhB,KAAAiB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/sass.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$sass\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","sass","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector","displayName","aliases"]
}
