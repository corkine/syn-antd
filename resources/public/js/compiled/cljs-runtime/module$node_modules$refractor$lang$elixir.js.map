{
"version":3,
"file":"module$node_modules$refractor$lang$elixir.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,MADc,CAGvBC,MAAO,CACLC,QAAS,4LADJ,CAELC,OAAQ,CAAA,CAFH,CAHgB,CAOvBC,OAAQ,CACN,CAEEF,QAAS,uMAFX;AAGEC,OAAQ,CAAA,CAHV,CAIEE,OAAQ,EAJV,CADM,CASN,CACEH,QAAS,qBADX,CAEEC,OAAQ,CAAA,CAFV,CAGEE,OAAQ,EAHV,CATM,CAgBN,CAEEH,QAAS,+CAFX,CAGEC,OAAQ,CAAA,CAHV,CAIEE,OAAQ,EAJV,CAhBM,CAPe,CAgCvBC,KAAM,CAEJJ,QAAS,cAFL,CAGJK,WAAY,CAAA,CAHR,CAIJC,MAAO,QAJH,CAhCiB,CAuCvB,YAAa,WAvCU,CAwCvBC,QAAS,CAEPP,QAAS,wCAFF,CAGPK,WAAY,CAAA,CAHL,CAIPC,MAAO,UAJA,CAxCc,CA8CvBE,SAAU,CAERR,QAAS,cAFD,CAGRK,WAAY,CAAA,CAHJ,CAIRC,MAAO,UAJC,CA9Ca,CAoDvBG,UAAW,CACTT,QAAS,MADA,CAETM,MAAO,UAFE,CApDY,CAwDvBI,OAAQ,iEAxDe;AAyDvBC,QAAS,yKAzDc,CA0DvBC,QAAS,wBA1Dc,CA2DvBC,SAAU,CACR,0FADQ,CAER,CAEEb,QAAS,cAFX,CAGEK,WAAY,CAAA,CAHd,CAFQ,CAOR,CAEEL,QAAS,cAFX,CAGEK,WAAY,CAAA,CAHd,CAPQ,CA3Da,CAwEvBS,YAAa,qBAxEU,CA0EzBlB,MAAAC,UAAAF,OAAAO,OAAAa,QAAA,CAAsC,QAAQ,CAACC,CAAD,CAAI,CAChDA,CAAAb,OAAA,CAAW,CACTc,cAAe,CACbjB,QAAS,YADI;AAEbG,OAAQ,CACNe,UAAW,CACTlB,QAAS,UADA,CAETM,MAAO,aAFE,CADL,CAKNa,KAAMvB,KAAAC,UAAAF,OALA,CAFK,CADN,CADqC,CAAlD,CA3EqB,CAHvBH,MAAAC,QAAA,CAAiBE,MACjBA,OAAAyB,YAAA,CAAqB,QACrBzB,OAAA0B,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/elixir.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$elixir\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    comment: /#.*/m,\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\w+:(?!:)/,\n    capture: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n    boolean: /\\b(?:true|false|nil)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function(o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","elixir","Prism","languages","comment","regex","pattern","greedy","string","inside","atom","lookbehind","alias","capture","argument","attribute","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest","displayName","aliases"]
}
