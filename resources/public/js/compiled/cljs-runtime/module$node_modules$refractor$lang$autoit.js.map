{
"version":3,
"file":"module$node_modules$refractor$lang$autoit.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,CACP,KADO,CAEP,CAEEC,QAAS,+DAFX,CAGEC,WAAY,CAAA,CAHd,CAFO,CADc,CASvBC,IAAK,CACHF,QAAS,+CADN,CAEHC,WAAY,CAAA,CAFT,CATkB,CAavBE,OAAQ,CACNH,QAAS,iCADH,CAENI,OAAQ,CAAA,CAFF,CAGNC,OAAQ,CACNC,SAAU,cADJ,CAHF,CAbe,CAoBvBC,UAAW,CACTP,QAAS,aADA,CAETC,WAAY,CAAA,CAFH,CAGTO,MAAO,SAHE,CApBY;AAyBvBC,SAAU,aAzBa,CA2BvBH,SAAU,SA3Ba,CA4BvBI,QAAS,wOA5Bc,CA6BvBC,OAAQ,iDA7Be,CA8BvBC,QAAS,qBA9Bc,CA+BvBC,SAAU,8CA/Ba,CAgCvBC,YAAa,aAhCU,CADJ,CAHvBrB,MAAAC,QAAA,CAAiBE,MACjBA,OAAAmB,YAAA,CAAqB,QACrBnB;MAAAoB,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/autoit.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$autoit\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = autoit\nautoit.displayName = 'autoit'\nautoit.aliases = []\nfunction autoit(Prism) {\n  Prism.languages.autoit = {\n    comment: [\n      /;.*/,\n      {\n        // The multi-line comments delimiters can actually be commented out with \";\"\n        pattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,\n        lookbehind: true\n      }\n    ],\n    url: {\n      pattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        variable: /([%$@])\\w+\\1/\n      }\n    },\n    directive: {\n      pattern: /(^\\s*)#\\w+/m,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    function: /\\b\\w+(?=\\()/,\n    // Variables and macros\n    variable: /[$@]\\w+/,\n    keyword: /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    boolean: /\\b(?:True|False)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","autoit","Prism","languages","comment","pattern","lookbehind","url","string","greedy","inside","variable","directive","alias","function","keyword","number","boolean","operator","punctuation","displayName","aliases"]
}
