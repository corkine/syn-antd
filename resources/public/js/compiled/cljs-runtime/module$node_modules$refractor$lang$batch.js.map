{
"version":3,
"file":"module$node_modules$refractor$lang$batch.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM1HC,QAASA,MAAK,CAACC,KAAD,CAAQ,CAElB,IAAIC,SAAW,oBAAf,CACIC,UAAY,CACdC,QAAS,8CADK,CAEdC,MAAO,WAFO,CAGdC,OAAQ,CACNC,YAAa,GADP,CAHM,CADhB,CAQIC,OAAS,SARb,CASIC,OAAS,eAoFZR,MAnFDS,UAAAV,MAAA,CAAwB,CACtBW,QAAS,CACP,QADO,CAEP,CACEP,QAAS,4DADX,CAEEQ,WAAY,CAAA,CAFd,CAFO,CADa,CAQtBC,MAAO,CACLT,QAAS,OADJ,CAELC,MAAO,UAFF,CARe,CAYtBS,QAAS,CACP,CAEEV,QAAS,oFAFX;AAGEQ,WAAY,CAAA,CAHd,CAIEN,OAAQ,CACNS,QAAS,uBADH,CAENP,OAAQA,MAFF,CAGNL,UAAWA,SAHL,CAIND,SAAUA,QAJJ,CAKNO,OAAQA,MALF,CAMNF,YAAa,QANP,CAJV,CADO,CAcP,CAEEH,QAAS,uMAFX,CAGEQ,WAAY,CAAA,CAHd,CAIEN,OAAQ,CACNS,QAAS,2DADH,CAENP,OAAQA,MAFF,CAGNL,UAAWA,SAHL,CAIND,SAAUA,QAJJ,CAKNO,OAAQA,MALF;AAMNO,SAAU,wCANJ,CAJV,CAdO,CA2BP,CAEEZ,QAAS,6BAFX,CAGEQ,WAAY,CAAA,CAHd,CAIEN,OAAQ,CACNS,QAAS,UADH,CAJV,CA3BO,CAmCP,CAEEX,QAAS,iGAFX,CAGEQ,WAAY,CAAA,CAHd,CAIEN,OAAQ,CACNS,QAAS,SADH,CAENP,OAAQA,MAFF,CAGNL,UAAWA,SAHL,CAIND,SAAU,CAACA,QAAD,CAAW,iCAAX,CAJJ,CAKNO,OAAQA,MALF,CAMNO,SAAU,iCANJ,CAONT,YAAa,QAPP,CAJV,CAnCO,CAiDP,CAEEH,QAAS,8DAFX;AAGEQ,WAAY,CAAA,CAHd,CAIEN,OAAQ,CACNS,QAAS,SADH,CAENP,OAAQA,MAFF,CAGNL,UAAWA,SAHL,CAINU,MAAO,CACLT,QAAS,aADJ,CAELQ,WAAY,CAAA,CAFP,CAGLP,MAAO,UAHF,CAJD,CASNH,SAAUA,QATJ,CAUNO,OAAQA,MAVF,CAWNO,SAAU,IAXJ,CAJV,CAjDO,CAZa,CAgFtBA,SAAU,MAhFY,CAiFtBT,YAAa,OAjFS,CAZN,CAHtBV,MAAAC,QAAA,CAAiBE,KACjBA,MAAAiB,YAAA,CAAoB,OACpBjB,MAAAkB,QAAA,CAAgB,EAL0G;",
"sources":["node_modules/refractor/lang/batch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$batch\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function(Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"[^\"]*\"/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^for\\b|\\b(?:in|do)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/i,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","batch","Prism","variable","parameter","pattern","alias","inside","punctuation","string","number","languages","comment","lookbehind","label","command","keyword","operator","displayName","aliases"]
}
