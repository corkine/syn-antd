{
"version":3,
"file":"module$node_modules$refractor$lang$asciidoc.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/refractor/lang/asciidoc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$asciidoc\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = asciidoc\nasciidoc.displayName = 'asciidoc'\nasciidoc.aliases = ['adoc']\nfunction asciidoc(Prism) {\n  ;(function(Prism) {\n    var attributes = {\n      pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\]\\\\]|\\\\.)*\\]|[^\\]\\\\]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    }\n    var asciidoc = (Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern: /(?!\\|)(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*])?(?:[<^>](?:\\.[<^>])?|\\.[<^>])?[a-z]*)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true // See rest below\n          }\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern: /^(--|\\*{4,}|_{4,}|={4,})(?:\\r?\\n|\\r)(?:[\\s\\S]*(?:\\r?\\n|\\r))??\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} +.+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:TIP|NOTE|IMPORTANT|WARNING|CAUTION):/m,\n        alias: 'keyword'\n      },\n      callout: [\n        {\n          pattern: /(^[ \\t]*)<?\\d*>/m,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        {\n          pattern: /<\\d+>/,\n          alias: 'symbol'\n        }\n      ],\n      macro: {\n        pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:(?:\\S+)??\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\nThe initial look-behind prevents the highlighting of escaped quoted text.\nQuoted text can be multi-line but cannot span an empty line.\nAll quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\nFirst, we handle the constrained quotes.\nThose must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\nThey are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\nThen we handle the unconstrained quotes.\nThose do not have the restrictions of the constrained quotes.\nThey are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n*/\n        pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?: ['`]|.)+?(?:(?:\\r?\\n|\\r)(?: ['`]|.)+?)*['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"]|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|TM|R)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }) // Allow some nesting. There is no recursion though, so cloning should not be needed.\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ')\n      var o = {}\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]]\n      }\n      return o\n    }\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    )\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro')\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout')\n    asciidoc['table'].inside.rest = copyFromAsciiDoc(\n      'comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation'\n    )\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc(\n      'table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation'\n    )\n    asciidoc['title'].inside.rest = copyFromAsciiDoc(\n      'macro inline replacement entity'\n    ) // Plugin to make entity title show the real entity, idea by Roman Komarov\n    Prism.hooks.add('wrap', function(env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n      }\n    })\n    Prism.languages.adoc = Prism.languages.asciidoc\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","asciidoc","Prism","copyFromAsciiDoc","keys","split","o","i","l","length","attributes","pattern","lookbehind","inside","quoted","punctuation","interpreted","string","variable","operator","languages","alias","table","specifiers","comment","title","hr","admonition","callout","macro","function","inline","url","italic","bold","replacement","entity","rest","hooks","add","env","type","content","value","replace","adoc","displayName","aliases"]
}
