{
"version":3,
"file":"module$node_modules$refractor$lang$prolog.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CAEvBG,QAAS,CAAC,KAAD,CAAQ,kBAAR,CAFc,CAIvBC,OAAQ,CACNC,QAAS,qDADH,CAENC,OAAQ,CAAA,CAFF,CAJe,CAQvBC,QAAS,4BARc,CASvBC,SAAU,aATa,CAWvBC,SAAU,4BAXa,CAYvBC,OAAQ,aAZe,CAcvBC,SAAU,gDAda,CAevBC,YAAa,aAfU,CADJ,CAHvBf,MAAAC,QAAA,CAAiBE,MACjBA;MAAAa,YAAA,CAAqB,QACrBb,OAAAc,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/prolog.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$prolog\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    variable: /\\b[A-Z_]\\w*/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+\\.?\\d*/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","prolog","Prism","languages","comment","string","pattern","greedy","builtin","variable","function","number","operator","punctuation","displayName","aliases"]
}
