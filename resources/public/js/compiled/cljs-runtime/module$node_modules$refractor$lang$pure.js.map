{
"version":3,
"file":"module$node_modules$refractor$lang$pure.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,cAAD,CAAQ,CACnBA,cAAAC,SAAA,CAAeC,UAAf,CACE,UAAQ,CAACF,KAAD,CAAQ,CAChBA,KAAAG,UAAAJ,KAAA,CAAuB,CACrBK,QAAS,CACP,CACEC,QAAS,2BADX,CAEEC,WAAY,CAAA,CAFd,CADO,CAKP,CACED,QAAS,kBADX,CAEEC,WAAY,CAAA,CAFd,CALO,CASP,MATO,CADY,CAYrB,cAAe,CACbD,QAAS,cADI,CAEbE,OAAQ,CAAA,CAFK,CAGbC,OAAQ,CACNC,KAAM,CACJJ,QAAS,oBADL,CAEJC,WAAY,CAAA,CAFR,CAGJI,MAAO,SAHH,CADA,CAMNC,UAAW,CACTN,QAAS,WADA,CAETK,MAAO,aAFE,CANL,CAHK,CAZM;AA2BrBE,OAAQ,CACNP,QAAS,uBADH,CAENE,OAAQ,CAAA,CAFF,CA3Ba,CA+BrBM,OAAQ,CAENR,QAAS,kGAFH,CAGNC,WAAY,CAAA,CAHN,CA/Ba,CAoCrBQ,QAAS,ySApCY,CAqCrBC,SAAU,y0DArCW;AAsCrBC,QAAS,CACPX,QAAS,iBADF,CAEPK,MAAO,SAFA,CAtCY,CA2CrBO,SAAU,+GA3CW,CA6CrBC,YAAa,eA7CQ,CAuDvB,KAAIC,iBAAmB,qCAAAC,OARDC,EACpB,GADoBA,CAEpB,CACEZ,KAAM,KADR,CAEEC,MAAO,KAFT,CAFoBW,CAMpB,SANoBA,CAStBC,QAAA,CAAwB,QAAQ,CAACb,IAAD,CAAO,CACrC,IAAIC,MAAQD,IACQ,SAApB,GAAI,MAAOA,KAAX,GACEC,KACA,CADQD,IAAAC,MACR,CAAAD,IAAA,CAAOA,IAAAA,KAFT,CAIA,IAAIT,KAAAG,UAAA,CAAgBO,KAAhB,CAAJ,CAA4B,CAC1B,IAAIa,EAAI,EACRA,EAAA,CAAE,cAAF,CAAmBb,KAAnB,CAAA,CAA4B,CAC1BL,QAASmB,MAAA,CACPL,gBAAAM,QAAA,CACE,QADF;AAEEhB,IAAAgB,QAAA,CAAa,uBAAb,CAAsC,MAAtC,CAFF,CADO,CAKP,GALO,CADiB,CAQ1BjB,OAAQR,KAAA0B,KAAAC,MAAA,CAAiB3B,KAAAG,UAAAJ,KAAA,CAAqB,aAArB,CAAAS,OAAjB,CARkB,CAU5Be,EAAA,CAAE,cAAF,CAAmBb,KAAnB,CAAAF,OAAAoB,KAAA,CAAwC5B,KAAA0B,KAAAC,MAAA,CACtC3B,KAAAG,UAAA,CAAgBO,KAAhB,CADsC,CAGxCV,MAAAG,UAAA0B,aAAA,CAA6B,MAA7B,CAAqC,aAArC,CAAoDN,CAApD,CAf0B,CANS,CAAvC,CAwBIvB,MAAAG,UAAA2B,EAAJ,GACE9B,KAAAG,UAAAJ,KAAA,CAAqB,aAArB,CAAAS,OAAAoB,KADF,CACoD5B,KAAA0B,KAAAC,MAAA,CAChD3B,KAAAG,UAAA2B,EADgD,CADpD,CAjFgB,CAAhB,CAAD,CAsFE9B,cAtFF,CAFkB,CAJrB,IAAIE,WAAaP,OAAA,CAAQ,sCAAR,CACjBC,OAAAC,QAAA,CAAiBE,IACjBA,KAAAgC,YAAA,CAAmB,MACnBhC,KAAAiC,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/pure.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$pure\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = pure\npure.displayName = 'pure'\npure.aliases = []\nfunction pure(Prism) {\n  Prism.register(refractorC)\n  ;(function(Prism) {\n    Prism.languages.pure = {\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        },\n        /#!.+/\n      ],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword: /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function: /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      operator: /(?=\\b_|[^_])[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^_`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    }\n    var inlineLanguages = [\n      'c',\n      {\n        lang: 'c++',\n        alias: 'cpp'\n      },\n      'fortran'\n    ]\n    var inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source\n    inlineLanguages.forEach(function(lang) {\n      var alias = lang\n      if (typeof lang !== 'string') {\n        alias = lang.alias\n        lang = lang.lang\n      }\n      if (Prism.languages[alias]) {\n        var o = {}\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(\n            inlineLanguageRe.replace(\n              '{lang}',\n              lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')\n            ),\n            'i'\n          ),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        }\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(\n          Prism.languages[alias]\n        )\n        Prism.languages.insertBefore('pure', 'inline-lang', o)\n      }\n    }) // C is the default inline language\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(\n        Prism.languages.c\n      )\n    }\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","pure","Prism","register","refractorC","languages","comment","pattern","lookbehind","greedy","inside","lang","alias","delimiter","string","number","keyword","function","special","operator","punctuation","inlineLanguageRe","source","inlineLanguages","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c","displayName","aliases"]
}
