{
"version":3,
"file":"module$node_modules$refractor$lang$css.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAEhB,IAAIC,OAAS,+CAuDZD,MAtDDE,UAAAH,IAAA,CAAsB,CACpBI,QAAS,kBADW,CAEpBC,OAAQ,CACNC,QAAS,gCADH,CAENC,OAAQ,CACNC,KAAM,SADA,CAFF,CAFY,CAQpBC,IAAK,CACHH,QAASI,MAAA,CAAO,WAAP,CAAqBR,MAAAS,OAArB,CAAqC,iBAArC,CAAwD,GAAxD,CADN,CAEHJ,OAAQ,CACNK,SAAU,OADJ,CAENC,YAAa,SAFP,CAFL,CARe,CAepBC,SAAUJ,MAAA,CACR,uBADQ,CACkBR,MAAAS,OADlB,CACkC,mBADlC,CAfU;AAkBpBT,OAAQ,CACNI,QAASJ,MADH,CAENa,OAAQ,CAAA,CAFF,CAlBY,CAsBpBC,SAAU,8CAtBU,CAuBpBC,UAAW,eAvBS,CAwBpBL,SAAU,mBAxBU,CAyBpBC,YAAa,WAzBO,CAsDrBZ,MA3BDE,UAAAH,IAAA,OAAAO,OAAAW,KAAA,CA2BCjB,KA3B2CE,UAAAH,IAE5C,IADImB,MACJ,CAyBClB,KA1BYE,UAAAgB,OACb,CACEA,MAAAC,IAAAC,WAAA,CAAsB,OAAtB,CAA+B,KAA/B,CACA,CAuBDpB,KAvBCE,UAAAmB,aAAA,CACE,QADF,CAEE,YAFF,CAGE,CACE,aAAc,CACZhB,QAAS,4CADG,CAEZC,OAAQ,CACN,YAAa,CACXD,QAAS,YADE,CAEXC,OAAQY,MAAAC,IAAAb,OAFG,CADP,CAKNM,YAAa,uBALP;AAMN,aAAc,CACZP,QAAS,KADG,CAEZC,OASXN,KATmBE,UAAAH,IAFI,CANR,CAFI,CAaZuB,MAAO,cAbK,CADhB,CAHF,CAoBEJ,MAAAC,IApBF,CAlCc,CAHpBvB,MAAAC,QAAA,CAAiBE,GACjBA,IAAAwB,YAAA,CAAkB,KAClBxB,IAAAyB,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/css.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$css\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = css\ncss.displayName = 'css'\ncss.aliases = []\nfunction css(Prism) {\n  ;(function(Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n        inside: {\n          rule: /@[\\w-]+/ // See rest below\n        }\n      },\n      url: {\n        pattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),\n        inside: {\n          function: /^url/i,\n          punctuation: /^\\(|\\)$/\n        }\n      },\n      selector: RegExp(\n        '[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'\n      ),\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n      important: /!important\\b/i,\n      function: /[-a-z0-9]+(?=\\()/i,\n      punctuation: /[(){};:,]/\n    }\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css\n    var markup = Prism.languages.markup\n    if (markup) {\n      markup.tag.addInlined('style', 'css')\n      Prism.languages.insertBefore(\n        'inside',\n        'attr-value',\n        {\n          'style-attr': {\n            pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n            inside: {\n              'attr-name': {\n                pattern: /^\\s*style/i,\n                inside: markup.tag.inside\n              },\n              punctuation: /^\\s*=\\s*['\"]|['\"]\\s*$/,\n              'attr-value': {\n                pattern: /.+/i,\n                inside: Prism.languages.css\n              }\n            },\n            alias: 'language-css'\n          }\n        },\n        markup.tag\n      )\n    }\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","css","Prism","string","languages","comment","atrule","pattern","inside","rule","url","RegExp","source","function","punctuation","selector","greedy","property","important","rest","markup","tag","addInlined","insertBefore","alias","displayName","aliases"]
}
