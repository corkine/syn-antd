{
"version":3,
"file":"module$node_modules$refractor$lang$aspnet.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyBC,KAAAC,UAAAC,OAAA,CAAuB,QAAvB,CAAiC,CACxD,qBAAsB,CACpBC,QAAS,aADW,CAEpBC,OAAQ,CACN,qBAAsB,2HADhB,CAENC,KAAML,KAAAC,UAAAK,OAAAC,IAAAH,OAFA,CAFY,CADkC,CAQxD,gBAAiB,CACfD,QAAS,SADM,CAEfC,OAAQ,CACN,gBAAiB,wBADX;AAENC,KAAML,KAAAC,UAAAO,OAFA,CAFO,CARuC,CAAjC,CAgBzBR,MAAAC,UAAAF,OAAAQ,IAAAJ,QAAA,CAAqC,mGACrCH,MAAAC,UAAAQ,aAAA,CACE,QADF,CAEE,aAFF,CAGE,CACE,gBAAiBT,KAAAC,UAAAF,OAAA,CAAuB,eAAvB,CADnB,CAHF,CAMEC,KAAAC,UAAAF,OAAAQ,IAAAH,OAAA,CAAkC,YAAlC,CANF,CAQAJ,MAAAC,UAAAQ,aAAA,CAA6B,QAA7B,CAAuC,SAAvC,CAAkD,CAChD,cAAe,kBADiC,CAAlD,CAGAT,MAAAC,UAAAQ,aAAA,CACE,QADF,CAEET,KAAAC,UAAAS,WAAA,CAA6B,QAA7B,CAAwC,KAF1C,CAGE,CACE,aAAc,CACZP,QAAS,uEADG;AAEZQ,WAAY,CAAA,CAFA,CAGZP,OAAQJ,KAAAC,UAAAO,OAARJ,EAAkC,EAHtB,CADhB,CAHF,CA7BqB,CAHvBR,MAAAC,QAAA,CAAiBE,MACjBA,OAAAa,YAAA,CAAqB,QACrBb,OAAAc,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/aspnet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$aspnet\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = aspnet\naspnet.displayName = 'aspnet'\naspnet.aliases = []\nfunction aspnet(Prism) {\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive tag': {\n      pattern: /<%\\s*@.*%>/i,\n      inside: {\n        'page-directive tag': /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    'directive tag': {\n      pattern: /<%.*%>/i,\n      inside: {\n        'directive tag': /<%\\s*?[$=%#:]{0,2}|%>/i,\n        rest: Prism.languages.csharp\n      }\n    }\n  }) // Regexp copied from prism-markup, with a negative look-ahead added\n  Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i // match directives of attribute value foo=\"<% Bar %>\"\n  Prism.languages.insertBefore(\n    'inside',\n    'punctuation',\n    {\n      'directive tag': Prism.languages.aspnet['directive tag']\n    },\n    Prism.languages.aspnet.tag.inside['attr-value']\n  )\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp comment': /<%--[\\s\\S]*?--%>/\n  }) // script runat=\"server\" contains csharp, not javascript\n  Prism.languages.insertBefore(\n    'aspnet',\n    Prism.languages.javascript ? 'script' : 'tag',\n    {\n      'asp script': {\n        pattern: /(<script(?=.*runat=['\"]?server['\"]?)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n        lookbehind: true,\n        inside: Prism.languages.csharp || {}\n      }\n    }\n  )\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","aspnet","Prism","languages","extend","pattern","inside","rest","markup","tag","csharp","insertBefore","javascript","lookbehind","displayName","aliases"]
}
