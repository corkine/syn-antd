{
"version":3,
"file":"module$node_modules$enquire_DOT_js$src$MediaQueryDispatch.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAa3IC,QAASA,mBAAmB,EAAG,CAC3B,GAAG,CAACC,MAAAC,WAAJ,CACI,KAAUC,MAAJ,CAAU,4DAAV,CAAN,CAGJ,IAAAC,QAAA,CAAe,EACf,KAAAC,mBAAA,CAA0B,CAACJ,MAAAC,WAAA,CAAkB,UAAlB,CAAAI,QANA,CAZ/B,IAAIC,WAAaX,OAAA,CAAQ,mDAAR,CACbY,OAAAA,CAAOZ,OAAA,CAAQ,6CAAR,CACX,KAAIa,KAAOD,MAAAC,KAAX,CACIC;AAAaF,MAAAE,WADjB,CAEIC,QAAUH,MAAAG,QAiBdX,mBAAAY,UAAA,CAA+B,CAE3BC,YAAcb,kBAFa,CAe3Bc,SAAWA,QAAQ,CAACC,CAAD,CAAIC,OAAJ,CAAaC,aAAb,CAA4B,CAAA,IACvCb,QAAkB,IAAAA,QAClBc,cAAAA,CAAkBD,aAAlBC,EAAmC,IAAAb,mBAEnCD,QAAA,CAAQW,CAAR,CAAJ,GACIX,OAAA,CAAQW,CAAR,CADJ,CACiB,IAAIR,UAAJ,CAAeQ,CAAf,CAAkBG,aAAlB,CADjB,CAKGR,WAAA,CAAWM,OAAX,CAAH,GACIA,OADJ,CACc,CAAEG,MAAQH,OAAV,CADd,CAGIL,QAAA,CAAQK,OAAR,CAAJ,GACIA,OADJ,CACc,CAACA,OAAD,CADd,CAGAP,KAAA,CAAKO,OAAL,CAAc,QAAQ,CAACI,OAAD,CAAU,CACxBV,UAAA,CAAWU,OAAX,CAAJ,GACIA,OADJ,CACc,CAAED,MAAQC,OAAV,CADd,CAGAhB,QAAA,CAAQW,CAAR,CAAAM,WAAA,CAAsBD,OAAtB,CAJ4B,CAAhC,CAOA,OAAO,KAtBoC,CAfpB,CA8C3BE,WAAaA,QAAQ,CAACP,CAAD;AAAIK,OAAJ,CAAa,CAC9B,IAAIG,MAAQ,IAAAnB,QAAA,CAAaW,CAAb,CAETQ,MAAH,GACOH,OAAH,CACIG,KAAAC,cAAA,CAAoBJ,OAApB,CADJ,EAIIG,KAAAE,MAAA,EACA,CAAA,OAAO,IAAArB,QAAA,CAAaW,CAAb,CALX,CADJ,CAUA,OAAO,KAbuB,CA9CP,CA+D/BlB,OAAAC,QAAA,CAAiBE,kBArF0H;",
"sources":["node_modules/enquire_DOT_js/src/MediaQueryDispatch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$enquire_DOT_js$src$MediaQueryDispatch\"] = function(global,process,require,module,exports,shadow$shims) {\nvar MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","MediaQueryDispatch","window","matchMedia","Error","queries","browserIsIncapable","matches","MediaQuery","Util","each","isFunction","isArray","prototype","constructor","register","q","options","shouldDegrade","isUnconditional","match","handler","addHandler","unregister","query","removeHandler","clear"]
}
