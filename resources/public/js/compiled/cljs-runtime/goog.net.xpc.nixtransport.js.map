{
"version":3,
"file":"goog.net.xpc.nixtransport.js",
"lineCount":162,
"mappings":"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",
"sources":["goog/net/xpc/nixtransport.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Contains the NIX (Native IE XDC) method transport for\n * cross-domain communication. It exploits the fact that Internet Explorer\n * allows a window that is the parent of an iframe to set said iframe window's\n * opener property to an object. This object can be a function that in turn\n * can be used to send a message despite same-origin constraints. Note that\n * this function, if a pure JavaScript object, opens up the possibilitiy of\n * gaining a hold of the context of the other window and in turn, attacking\n * it. This implementation therefore wraps the JavaScript objects used inside\n * a VBScript class. Since VBScript objects are passed in JavaScript as a COM\n * wrapper (like DOM objects), they are thus opaque to JavaScript\n * (except for the interface they expose). This therefore provides a safe\n * method of transport.\n *\n *\n * Initially based on FrameElementTransport which shares some similarities\n * to this method.\n */\n\ngoog.provide('goog.net.xpc.NixTransport');\n\ngoog.require('goog.log');\ngoog.require('goog.net.xpc');\ngoog.require('goog.net.xpc.CfgFields');\ngoog.require('goog.net.xpc.CrossPageChannelRole');\ngoog.require('goog.net.xpc.Transport');\ngoog.require('goog.net.xpc.TransportTypes');\ngoog.require('goog.reflect');\n\n\n\n/**\n * NIX method transport.\n *\n * NOTE(user): NIX method tested in all IE versions starting from 6.0.\n *\n * @param {goog.net.xpc.CrossPageChannel} channel The channel this transport\n *     belongs to.\n * @param {goog.dom.DomHelper=} opt_domHelper The dom helper to use for finding\n *     the correct window.\n * @constructor\n * @extends {goog.net.xpc.Transport}\n * @final\n */\ngoog.net.xpc.NixTransport = function(channel, opt_domHelper) {\n  goog.net.xpc.NixTransport.base(this, 'constructor', opt_domHelper);\n\n  /**\n   * The channel this transport belongs to.\n   * @type {goog.net.xpc.CrossPageChannel}\n   * @private\n   */\n  this.channel_ = channel;\n\n  /**\n   * The authorization token, if any, used by this transport.\n   * @type {?string}\n   * @private\n   */\n  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || '';\n\n  /**\n   * The authorization token, if any, that must be sent by the other party\n   * for setup to occur.\n   * @type {?string}\n   * @private\n   */\n  this.remoteAuthToken_ =\n      channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || '';\n\n  // Conduct the setup work for NIX in general, if need be.\n  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());\n\n  // Setup aliases so that VBScript can call these methods\n  // on the transport class, even if they are renamed during\n  // compression.\n  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;\n  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;\n};\ngoog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);\n\n\n// Consts for NIX. VBScript doesn't allow items to start with _ for some\n// reason, so we need to make these names quite unique, as they will go into\n// the global namespace.\n\n\n/**\n * Global name of the Wrapper VBScript class.\n * Note that this class will be stored in the *global*\n * namespace (i.e. window in browsers).\n * @type {string}\n */\ngoog.net.xpc.NixTransport.NIX_WRAPPER = 'GCXPC____NIXVBS_wrapper';\n\n\n/**\n * Global name of the GetWrapper VBScript function. This\n * constant is used by JavaScript to call this function.\n * Note that this function will be stored in the *global*\n * namespace (i.e. window in browsers).\n * @type {string}\n */\ngoog.net.xpc.NixTransport.NIX_GET_WRAPPER = 'GCXPC____NIXVBS_get_wrapper';\n\n\n/**\n * The name of the handle message method used by the wrapper class\n * when calling the transport.\n * @type {string}\n */\ngoog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = 'GCXPC____NIXJS_handle_message';\n\n\n/**\n * The name of the create channel method used by the wrapper class\n * when calling the transport.\n * @type {string}\n */\ngoog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = 'GCXPC____NIXJS_create_channel';\n\n\n/**\n * A \"unique\" identifier that is stored in the wrapper\n * class so that the wrapper can be distinguished from\n * other objects easily.\n * @type {string}\n */\ngoog.net.xpc.NixTransport.NIX_ID_FIELD = 'GCXPC____NIXVBS_container';\n\n\n/**\n * Determines if the installed version of IE supports accessing window.opener\n * after it has been set to a non-Window/null value. NIX relies on this being\n * possible.\n * @return {boolean} Whether window.opener behavior is compatible with NIX.\n */\ngoog.net.xpc.NixTransport.isNixSupported = function() {\n  var isSupported = false;\n  try {\n    var oldOpener = window.opener;\n    // The compiler complains (as it should!) if we set window.opener to\n    // something other than a window or null.\n    window.opener = /** @type {Window} */ ({});\n    isSupported = goog.reflect.canAccessProperty(window, 'opener');\n    window.opener = oldOpener;\n  } catch (e) {\n  }\n  return isSupported;\n};\n\n\n/**\n * Conducts the global setup work for the NIX transport method.\n * This function creates and then injects into the page the\n * VBScript code necessary to create the NIX wrapper class.\n * Note that this method can be called multiple times, as\n * it internally checks whether the work is necessary before\n * proceeding.\n * @param {Window} listenWindow The window containing the affected page.\n * @private\n */\ngoog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {\n  if (listenWindow['nix_setup_complete']) {\n    return;\n  }\n\n  // Inject the VBScript code needed.\n  var vbscript =\n      // We create a class to act as a wrapper for\n      // a JavaScript call, to prevent a break in of\n      // the context.\n      'Class ' + goog.net.xpc.NixTransport.NIX_WRAPPER + '\\n ' +\n\n      // An internal member for keeping track of the\n      // transport for which this wrapper exists.\n      'Private m_Transport\\n' +\n\n      // An internal member for keeping track of the\n      // auth token associated with the context that\n      // created this wrapper. Used for validation\n      // purposes.\n      'Private m_Auth\\n' +\n\n      // Method for internally setting the value\n      // of the m_Transport property. We have the\n      // isEmpty check to prevent the transport\n      // from being overridden with an illicit\n      // object by a malicious party.\n      'Public Sub SetTransport(transport)\\n' +\n      'If isEmpty(m_Transport) Then\\n' +\n      'Set m_Transport = transport\\n' +\n      'End If\\n' +\n      'End Sub\\n' +\n\n      // Method for internally setting the value\n      // of the m_Auth property. We have the\n      // isEmpty check to prevent the transport\n      // from being overridden with an illicit\n      // object by a malicious party.\n      'Public Sub SetAuth(auth)\\n' +\n      'If isEmpty(m_Auth) Then\\n' +\n      'm_Auth = auth\\n' +\n      'End If\\n' +\n      'End Sub\\n' +\n\n      // Returns the auth token to the gadget, so it can\n      // confirm a match before initiating the connection\n      'Public Function GetAuthToken()\\n ' +\n      'GetAuthToken = m_Auth\\n' +\n      'End Function\\n' +\n\n      // A wrapper method which causes a\n      // message to be sent to the other context.\n      'Public Sub SendMessage(service, payload)\\n ' +\n      'Call m_Transport.' + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE +\n      '(service, payload)\\n' +\n      'End Sub\\n' +\n\n      // Method for setting up the inner->outer\n      // channel.\n      'Public Sub CreateChannel(channel)\\n ' +\n      'Call m_Transport.' + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL +\n      '(channel)\\n' +\n      'End Sub\\n' +\n\n      // An empty field with a unique identifier to\n      // prevent the code from confusing this wrapper\n      // with a run-of-the-mill value found in window.opener.\n      'Public Sub ' + goog.net.xpc.NixTransport.NIX_ID_FIELD + '()\\n ' +\n      'End Sub\\n' +\n      'End Class\\n ' +\n\n      // Function to get a reference to the wrapper.\n      'Function ' + goog.net.xpc.NixTransport.NIX_GET_WRAPPER +\n      '(transport, auth)\\n' +\n      'Dim wrap\\n' +\n      'Set wrap = New ' + goog.net.xpc.NixTransport.NIX_WRAPPER + '\\n' +\n      'wrap.SetTransport transport\\n' +\n      'wrap.SetAuth auth\\n' +\n      'Set ' + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + ' = wrap\\n' +\n      'End Function';\n\n  try {\n    listenWindow.execScript(vbscript, 'vbscript');\n    listenWindow['nix_setup_complete'] = true;\n  } catch (e) {\n    goog.log.error(\n        goog.net.xpc.logger,\n        'exception caught while attempting global setup: ' + e);\n  }\n};\n\n\n/**\n * The transport type.\n * @type {number}\n * @protected\n * @override\n */\ngoog.net.xpc.NixTransport.prototype.transportType =\n    goog.net.xpc.TransportTypes.NIX;\n\n\n/**\n * Keeps track of whether the local setup has completed (i.e.\n * the initial work towards setting the channel up has been\n * completed for this end).\n * @type {boolean}\n * @private\n */\ngoog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;\n\n\n/**\n * The NIX channel used to talk to the other page. This\n * object is in fact a reference to a VBScript class\n * (see above) and as such, is in fact a COM wrapper.\n * When using this object, make sure to not access methods\n * without calling them, otherwise a COM error will be thrown.\n * @type {?Object}\n * @private\n */\ngoog.net.xpc.NixTransport.prototype.nixChannel_ = null;\n\n\n/**\n * Connect this transport.\n * @override\n */\ngoog.net.xpc.NixTransport.prototype.connect = function() {\n  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {\n    this.attemptOuterSetup_();\n  } else {\n    this.attemptInnerSetup_();\n  }\n};\n\n\n/**\n * Attempts to setup the channel from the perspective\n * of the outer (read: container) page. This method\n * will attempt to create a NIX wrapper for this transport\n * and place it into the \"opener\" property of the inner\n * page's window object. If it fails, it will continue\n * to loop until it does so.\n *\n * @private\n */\ngoog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {\n  if (this.localSetupCompleted_) {\n    return;\n  }\n\n  // Get shortcut to iframe-element that contains the inner\n  // page.\n  var innerFrame = this.channel_.getIframeElement();\n\n  try {\n    // Attempt to place the NIX wrapper object into the inner\n    // frame's opener property.\n    var theWindow = this.getWindow();\n    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];\n    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);\n    this.localSetupCompleted_ = true;\n  } catch (e) {\n    goog.log.error(\n        goog.net.xpc.logger, 'exception caught while attempting setup: ' + e);\n  }\n\n  // If the retry is necessary, reattempt this setup.\n  if (!this.localSetupCompleted_) {\n    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);\n  }\n};\n\n\n/**\n * Attempts to setup the channel from the perspective\n * of the inner (read: iframe) page. This method\n * will attempt to *read* the opener object from the\n * page's opener property. If it succeeds, this object\n * is saved into nixChannel_ and the channel is confirmed\n * with the container by calling CreateChannel with an instance\n * of a wrapper for *this* page. Note that if this method\n * fails, it will continue to loop until it succeeds.\n *\n * @private\n */\ngoog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {\n  if (this.localSetupCompleted_) {\n    return;\n  }\n\n  try {\n    var opener = this.getWindow().opener;\n\n    // Ensure that the object contained inside the opener\n    // property is in fact a NIX wrapper.\n    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {\n      this.nixChannel_ = opener;\n\n      // Ensure that the NIX channel given to use is valid.\n      var remoteAuthToken = this.nixChannel_['GetAuthToken']();\n\n      if (remoteAuthToken != this.remoteAuthToken_) {\n        goog.log.error(\n            goog.net.xpc.logger, 'Invalid auth token from other party');\n        return;\n      }\n\n      // Complete the construction of the channel by sending our own\n      // wrapper to the container via the channel they gave us.\n      var theWindow = this.getWindow();\n      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];\n      this.nixChannel_['CreateChannel'](getWrapper(this, this.authToken_));\n\n      this.localSetupCompleted_ = true;\n\n      // Notify channel that the transport is ready.\n      this.channel_.notifyConnected();\n    }\n  } catch (e) {\n    goog.log.error(\n        goog.net.xpc.logger, 'exception caught while attempting setup: ' + e);\n    return;\n  }\n\n  // If the retry is necessary, reattempt this setup.\n  if (!this.localSetupCompleted_) {\n    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);\n  }\n};\n\n\n/**\n * Internal method called by the inner page, via the\n * NIX wrapper, to complete the setup of the channel.\n *\n * @param {Object} channel The NIX wrapper of the\n *  inner page.\n * @private\n */\ngoog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {\n  // Verify that the channel is in fact a NIX wrapper.\n  if (typeof channel != 'unknown' ||\n      !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {\n    goog.log.error(\n        goog.net.xpc.logger, 'Invalid NIX channel given to createChannel_');\n  }\n\n  this.nixChannel_ = channel;\n\n  // Ensure that the NIX channel given to use is valid.\n  var remoteAuthToken = this.nixChannel_['GetAuthToken']();\n\n  if (remoteAuthToken != this.remoteAuthToken_) {\n    goog.log.error(goog.net.xpc.logger, 'Invalid auth token from other party');\n    return;\n  }\n\n  // Indicate to the CrossPageChannel that the channel is setup\n  // and ready to use.\n  this.channel_.notifyConnected();\n};\n\n\n/**\n * Internal method called by the other page, via the NIX wrapper,\n * to deliver a message.\n * @param {string} serviceName The name of the service the message is to be\n *   delivered to.\n * @param {string} payload The message to process.\n * @private\n */\ngoog.net.xpc.NixTransport.prototype.handleMessage_ = function(\n    serviceName, payload) {\n  /** @this {goog.net.xpc.NixTransport} */\n  var deliveryHandler = function() {\n    this.channel_.xpcDeliver(serviceName, payload);\n  };\n  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);\n};\n\n\n/**\n * Sends a message.\n * @param {string} service The name of the service the message is to be\n *   delivered to.\n * @param {string} payload The message content.\n * @override\n */\ngoog.net.xpc.NixTransport.prototype.send = function(service, payload) {\n  // Verify that the NIX channel we have is valid.\n  if (typeof (this.nixChannel_) !== 'unknown') {\n    goog.log.error(goog.net.xpc.logger, 'NIX channel not connected');\n  }\n\n  // Send the message via the NIX wrapper object.\n  this.nixChannel_['SendMessage'](service, payload);\n};\n\n\n/** @override */\ngoog.net.xpc.NixTransport.prototype.disposeInternal = function() {\n  goog.net.xpc.NixTransport.base(this, 'disposeInternal');\n  this.nixChannel_ = null;\n};\n"],
"names":["goog","provide","require","net","xpc","NixTransport","goog.net.xpc.NixTransport","channel","opt_domHelper","base","channel_","authToken_","CfgFields","AUTH_TOKEN","remoteAuthToken_","REMOTE_AUTH_TOKEN","conductGlobalSetup_","getWindow","NIX_HANDLE_MESSAGE","handleMessage_","NIX_CREATE_CHANNEL","createChannel_","inherits","Transport","NIX_WRAPPER","NIX_GET_WRAPPER","NIX_ID_FIELD","isNixSupported","goog.net.xpc.NixTransport.isNixSupported","isSupported","oldOpener","window","opener","reflect","canAccessProperty","e","goog.net.xpc.NixTransport.conductGlobalSetup_","listenWindow","vbscript","execScript","log","error","logger","prototype","transportType","TransportTypes","NIX","localSetupCompleted_","nixChannel_","connect","goog.net.xpc.NixTransport.prototype.connect","getRole","CrossPageChannelRole","OUTER","attemptOuterSetup_","attemptInnerSetup_","goog.net.xpc.NixTransport.prototype.attemptOuterSetup_","innerFrame","getIframeElement","theWindow","getWrapper","contentWindow","setTimeout","bind","goog.net.xpc.NixTransport.prototype.attemptInnerSetup_","remoteAuthToken","notifyConnected","goog.net.xpc.NixTransport.prototype.createChannel_","goog.net.xpc.NixTransport.prototype.handleMessage_","serviceName","payload","deliveryHandler","xpcDeliver","send","goog.net.xpc.NixTransport.prototype.send","service","disposeInternal","goog.net.xpc.NixTransport.prototype.disposeInternal"]
}
