{
"version":3,
"file":"module$node_modules$refractor$lang$perl.js",
"lineCount":7,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAAC,UAAAF,KAAA,CAAuB,CACrBG,QAAS,CACP,CAEEC,QAAS,2BAFX,CAGEC,WAAY,CAAA,CAHd,CADO,CAMP,CACED,QAAS,eADX,CAEEC,WAAY,CAAA,CAFd,CANO,CADY,CAarBC,OAAQ,CAEN,CACEF,QAAS,qEADX,CAEEG,OAAQ,CAAA,CAFV,CAFM,CAMN,CACEH,QAAS,6DADX,CAEEG,OAAQ,CAAA,CAFV,CANM,CAUN,CACEH,QAAS,8CADX,CAEEG,OAAQ,CAAA,CAFV,CAVM;AAcN,CACEH,QAAS,8CADX,CAEEG,OAAQ,CAAA,CAFV,CAdM,CAkBN,CACEH,QAAS,+CADX,CAEEG,OAAQ,CAAA,CAFV,CAlBM,CAsBN,CACEH,QAAS,4CADX,CAEEG,OAAQ,CAAA,CAFV,CAtBM,CA0BN,CACEH,QAAS,kCADX,CAEEG,OAAQ,CAAA,CAFV,CA1BM,CA+BN,CACEH,QAAS,uBADX,CAEEG,OAAQ,CAAA,CAFV,CA/BM,CAba,CAiDrBC,MAAO,CAEL,CACEJ,QAAS,+EADX,CAEEG,OAAQ,CAAA,CAFV,CAFK,CAML,CACEH,QAAS,uEADX,CAEEG,OAAQ,CAAA,CAFV,CANK,CAUL,CACEH,QAAS,wDADX;AAEEG,OAAQ,CAAA,CAFV,CAVK,CAcL,CACEH,QAAS,wDADX,CAEEG,OAAQ,CAAA,CAFV,CAdK,CAkBL,CACEH,QAAS,yDADX,CAEEG,OAAQ,CAAA,CAFV,CAlBK,CAsBL,CACEH,QAAS,sDADX,CAEEG,OAAQ,CAAA,CAFV,CAtBK,CA4BL,CACEH,QAAS,sHADX,CAEEC,WAAY,CAAA,CAFd,CAGEE,OAAQ,CAAA,CAHV,CA5BK,CAiCL,CACEH,QAAS,8GADX;AAEEC,WAAY,CAAA,CAFd,CAGEE,OAAQ,CAAA,CAHV,CAjCK,CAsCL,CACEH,QAAS,gGADX,CAEEC,WAAY,CAAA,CAFd,CAGEE,OAAQ,CAAA,CAHV,CAtCK,CA2CL,CACEH,QAAS,gGADX,CAEEC,WAAY,CAAA,CAFd,CAGEE,OAAQ,CAAA,CAHV,CA3CK,CAgDL,CACEH,QAAS,kGADX,CAEEC,WAAY,CAAA,CAFd,CAGEE,OAAQ,CAAA,CAHV,CAhDK,CAqDL,CACEH,QAAS,4FADX;AAEEC,WAAY,CAAA,CAFd,CAGEE,OAAQ,CAAA,CAHV,CArDK,CA6DL,CACEH,QAAS,yHADX,CAEEG,OAAQ,CAAA,CAFV,CA7DK,CAjDc,CAoHrBE,SAAU,CAER,qBAFQ,CAGR,iBAHQ,CAIR,iBAJQ,CAKR,6CALQ,CAMR,YANQ,CAQR,mDARQ,CApHW,CA8HrBC,WAAY,CAEVN,QAAS,qBAFC,CAGVO,MAAO,QAHG,CA9HS,CAmIrBC,QAAS,CAEPR,QAAS,iCAFF,CAGPO,MAAO,QAHA,CAnIY,CAwIrBE,SAAU,CACRT,QAAS,iBADD;AAERU,OAAQ,CACNC,QAAS,KADH,CAFA,CAxIW,CA8IrBA,QAAS,4MA9IY,CA+IrBC,OAAQ,yGA/Ia,CAgJrBC,SAAU,+MAhJW;AAiJrBC,YAAa,cAjJQ,CADJ,CAHrBrB,MAAAC,QAAA,CAAiBE,IACjBA,KAAAmB,YAAA,CAAmB,MACnBnB,KAAAoB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/perl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$perl\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = perl\nperl.displayName = 'perl'\nperl.aliases = []\nfunction perl(Prism) {\n  Prism.languages.perl = {\n    comment: [\n      {\n        // POD\n        pattern: /(^\\s*)=\\w+[\\s\\S]*?=cut.*/m,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\$])#.*/,\n        lookbehind: true\n      }\n    ],\n    // TODO Could be nice to handle Heredoc too.\n    string: [\n      // q/.../\n      {\n        pattern: /\\b(?:q|qq|qx|qw)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true\n      }, // q a...a\n      {\n        pattern: /\\b(?:q|qq|qx|qw)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true\n      }, // q(...)\n      {\n        pattern: /\\b(?:q|qq|qx|qw)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true\n      }, // q{...}\n      {\n        pattern: /\\b(?:q|qq|qx|qw)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}/,\n        greedy: true\n      }, // q[...]\n      {\n        pattern: /\\b(?:q|qq|qx|qw)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true\n      }, // q<...>\n      {\n        pattern: /\\b(?:q|qq|qx|qw)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true\n      }, // \"...\", `...`\n      {\n        pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true\n      }, // '...'\n      // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n      {\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n        greedy: true\n      }\n    ],\n    regex: [\n      // m/.../\n      {\n        pattern: /\\b(?:m|qr)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n        greedy: true\n      }, // m a...a\n      {\n        pattern: /\\b(?:m|qr)\\s+([a-zA-Z0-9])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[msixpodualngc]*/,\n        greedy: true\n      }, // m(...)\n      {\n        pattern: /\\b(?:m|qr)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngc]*/,\n        greedy: true\n      }, // m{...}\n      {\n        pattern: /\\b(?:m|qr)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngc]*/,\n        greedy: true\n      }, // m[...]\n      {\n        pattern: /\\b(?:m|qr)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngc]*/,\n        greedy: true\n      }, // m<...>\n      {\n        pattern: /\\b(?:m|qr)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngc]*/,\n        greedy: true\n      }, // The lookbehinds prevent -s from breaking\n      // FIXME We don't handle change of separator like s(...)[...]\n      // s/.../.../\n      {\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n        lookbehind: true,\n        greedy: true\n      }, // s a...a...a\n      {\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s+([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2[msixpodualngcer]*/,\n        lookbehind: true,\n        greedy: true\n      }, // s(...)(...)\n      {\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)\\s*\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[msixpodualngcer]*/,\n        lookbehind: true,\n        greedy: true\n      }, // s{...}{...}\n      {\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}\\s*\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}[msixpodualngcer]*/,\n        lookbehind: true,\n        greedy: true\n      }, // s[...][...]\n      {\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]\\s*\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\][msixpodualngcer]*/,\n        lookbehind: true,\n        greedy: true\n      }, // s<...><...>\n      {\n        pattern: /(^|[^-]\\b)(?:s|tr|y)\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>\\s*<(?:[^<>\\\\]|\\\\[\\s\\S])*>[msixpodualngcer]*/,\n        lookbehind: true,\n        greedy: true\n      }, // /.../\n      // The look-ahead tries to prevent two divisions on\n      // the same line from being highlighted as regex.\n      // This does not support multi-line regex.\n      {\n        pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\\b))/,\n        greedy: true\n      }\n    ],\n    // FIXME Not sure about the handling of ::, ', and #\n    variable: [\n      // ${^POSTMATCH}\n      /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n      /[&*$@%]\\^[A-Z_]/, // ${...}\n      /[&*$@%]#?(?=\\{)/, // $foo\n      /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+)+(?:::)*/i, // $1\n      /[&*$@%]\\d+/, // $_, @_, %!\n      // The negative lookahead prevents from breaking the %= operator\n      /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n    ],\n    filehandle: {\n      // <>, <FOO>, _\n      pattern: /<(?![<=])\\S*>|\\b_\\b/,\n      alias: 'symbol'\n    },\n    vstring: {\n      // v1.2, 1.2.3\n      pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n      alias: 'string'\n    },\n    function: {\n      pattern: /sub [a-z0-9_]+/i,\n      inside: {\n        keyword: /sub/\n      }\n    },\n    keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n    number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n    operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\\b/,\n    punctuation: /[{}[\\];(),:]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","perl","Prism","languages","comment","pattern","lookbehind","string","greedy","regex","variable","filehandle","alias","vstring","function","inside","keyword","number","operator","punctuation","displayName","aliases"]
}
