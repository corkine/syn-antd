{
"version":3,
"file":"module$node_modules$refractor$lang$markdown.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/refractor/lang/markdown.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$markdown\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function(Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n     * @returns {RegExp}\n     */\n    function createInline(pattern, starAlternative) {\n      pattern = pattern.replace(/<inner>/g, inner)\n      if (starAlternative) {\n        pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*')\n      }\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(\n      /__/g,\n      tableCell\n    )\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/\n      .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // `code`\n          // ``code``\n          pattern: /``.+?``|`[^`\\r\\n]+`/,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#+.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source,\n          true\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source,\n          true\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/\n            .source,\n          false\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function(token) {\n      ;['url', 'bold', 'italic', 'strike'].forEach(function(inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            var alias =\n              'language-' +\n              codeLang.content\n                .trim()\n                .split(/\\s+/)[0]\n                .toLowerCase() // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function(env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function() {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(code, grammar, codeLang)\n      }\n    })\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","markdown","Prism","createInline","pattern","starAlternative","replace","inner","RegExp","source","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","lookbehind","punctuation","code","greedy","title","hr","list","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","trim","split","toLowerCase","push","language","classes","match","exec","cls","grammar","value","highlight","plugins","autoloader","id","valueOf","Date","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","displayName","aliases"]
}
