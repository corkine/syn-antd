{
"version":3,
"file":"module$node_modules$refractor$lang$groovy.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyBC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CACvDC,QAAS,4WAD8C;AAEvDC,OAAQ,CACN,CACEC,QAAS,qDADX,CAEEC,OAAQ,CAAA,CAFV,CADM,CAKN,CACED,QAAS,oCADX,CAEEC,OAAQ,CAAA,CAFV,CALM,CAF+C,CAYvDC,OAAQ,8FAZ+C,CAavDC,SAAU,CACRH,QAAS,sJADD,CAERI,WAAY,CAAA,CAFJ,CAb6C,CAiBvDC,YAAa,mBAjB0C,CAAhC,CAmBzBV,MAAAC,UAAAU,aAAA,CAA6B,QAA7B,CAAuC,QAAvC;AAAiD,CAC/CC,QAAS,CACPP,QAAS,MADF,CAEPQ,MAAO,SAFA,CADsC,CAAjD,CAMAb,MAAAC,UAAAU,aAAA,CAA6B,QAA7B,CAAuC,aAAvC,CAAsD,CACpD,cAAe,uDADqC,CAAtD,CAGAX,MAAAC,UAAAU,aAAA,CAA6B,QAA7B,CAAuC,UAAvC,CAAmD,CACjDG,WAAY,CACVD,MAAO,aADG,CAEVR,QAAS,cAFC,CAGVI,WAAY,CAAA,CAHF,CADqC,CAAnD,CAOAT,MAAAe,MAAAC,IAAA,CAAgB,MAAhB,CAAwB,QAAQ,CAACC,GAAD,CAAM,CACpC,GAAqB,QAArB,GAAIA,GAAAC,SAAJ,EAA8C,QAA9C,GAAiCD,GAAAE,KAAjC,CAAwD,CACtD,IAAIC,UAAYH,GAAAI,QAAAC,MAAA,CAAkB,CAAlB,CAChB,IAAiB,GAAjB,EAAIF,SAAJ,CAAsB,CACpB,IAAIf,QAAU,iCACI,IAAlB,GAAIe,SAAJ,GACEf,OADF;AACY,iCADZ,CAGAY,IAAAI,QAAAC,MAAA,CAAoBL,GAAAI,QAAAC,MAAAC,QAAA,CACT,OADS,CACA,MADA,CAAAA,QAAA,CAET,QAFS,CAEC,MAFD,CAGpBN,IAAAI,QAAA,CAAcrB,KAAAwB,UAAA,CAAgBP,GAAAI,QAAAC,MAAhB,CAAmC,CAC/CG,WAAY,CACVpB,QAASA,OADC,CAEVI,WAAY,CAAA,CAFF,CAGViB,OAAQ1B,KAAAC,UAAAF,OAHE,CADmC,CAAnC,CAOdkB,IAAAU,QAAAC,KAAA,CAA+B,GAAd,GAAAR,SAAA,CAAoB,OAApB,CAA8B,SAA/C,CAfoB,CAFgC,CADpB,CAAtC,CApCqB,CAHvBxB,MAAAC,QAAA,CAAiBE,MACjBA,OAAA8B,YAAA,CAAqB,QACrB9B,OAAA+B,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/groovy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$groovy\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = groovy\ngroovy.displayName = 'groovy'\ngroovy.aliases = []\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    string: [\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n        greedy: true\n      },\n      {\n        pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }\n    ],\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  })\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  })\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n  })\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    }\n  }) // Handle string interpolation\n  Prism.hooks.add('wrap', function(env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0]\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        } // To prevent double HTML-encoding we have to decode env.content first\n        env.content.value = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        })\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\n      }\n    }\n  })\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","groovy","Prism","languages","extend","keyword","string","pattern","greedy","number","operator","lookbehind","punctuation","insertBefore","shebang","alias","annotation","hooks","add","env","language","type","delimiter","content","value","replace","highlight","expression","inside","classes","push","displayName","aliases"]
}
