{
"version":3,
"file":"module$node_modules$refractor$lang$parigp.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,yBADc,CAEvBC,OAAQ,CACNC,QAAS,uBADH,CAENC,OAAQ,CAAA,CAFF,CAFe,CASvBC,QAAU,QAAQ,EAAG,CACnB,IAAIC,SAAW,qKAAA,MAAA,CAAA,GAAA,CAyBfA,SAAA,CAAWA,QAAAC,IAAA,CACJ,QAAQ,CAACF,OAAD,CAAU,CACrB,MAAOA,QAAAG,MAAA,CAAc,EAAd,CAAAC,KAAA,CAAuB,IAAvB,CADc,CADd,CAAAA,KAAA,CAIH,GAJG,CAKX;MAAOC,OAAA,CAAO,QAAP,CAAkBJ,QAAlB,CAA6B,MAA7B,CA/BY,CAAZ,EATc,CA0CvBK,SAAU,mBA1Ca,CA2CvBC,OAAQ,CAENT,QAAS,yGAFH,CAGNU,WAAY,CAAA,CAHN,CA3Ce,CAgDvBC,SAAU,qLAhDa,CAiDvBC,YAAa,iBAjDU,CADJ,CAHvBpB,MAAAC,QAAA,CAAiBE,MACjBA,OAAAkB,YAAA,CAAqB,QACrBlB,OAAAmB,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/parigp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$parigp\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = parigp\nparigp.displayName = 'parigp'\nparigp.aliases = []\nfunction parigp(Prism) {\n  Prism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    },\n    // PARI/GP does not care about white spaces at all\n    // so let's process the keywords to build an appropriate regexp\n    // (e.g. \"b *r *e *a *k\", etc.)\n    keyword: (function() {\n      var keywords = [\n        'breakpoint',\n        'break',\n        'dbg_down',\n        'dbg_err',\n        'dbg_up',\n        'dbg_x',\n        'forcomposite',\n        'fordiv',\n        'forell',\n        'forpart',\n        'forprime',\n        'forstep',\n        'forsubgroup',\n        'forvec',\n        'for',\n        'iferr',\n        'if',\n        'local',\n        'my',\n        'next',\n        'return',\n        'until',\n        'while'\n      ]\n      keywords = keywords\n        .map(function(keyword) {\n          return keyword.split('').join(' *')\n        })\n        .join('|')\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b')\n    })(),\n    function: /\\w[\\w ]*?(?= *\\()/,\n    number: {\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\n      pattern: /((?:\\. *\\. *)?)(?:\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,\n      lookbehind: true\n    },\n    operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","parigp","Prism","languages","comment","string","pattern","greedy","keyword","keywords","map","split","join","RegExp","function","number","lookbehind","operator","punctuation","displayName","aliases"]
}
