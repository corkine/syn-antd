{
"version":3,
"file":"module$node_modules$refractor$lang$markup_templating.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/refractor/lang/markup-templating.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$markup_templating\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","i","length","placeholder","indexOf","grammar","markup","tokenizePlaceholders","walkTokens","tokens","j","keys","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","displayName","aliases"]
}
