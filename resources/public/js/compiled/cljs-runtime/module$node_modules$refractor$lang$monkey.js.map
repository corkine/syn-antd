{
"version":3,
"file":"module$node_modules$refractor$lang$monkey.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,OAAQ,aADe,CAEvBC,QAAS,CACP,CACEC,QAAS,yBADX,CAEEC,OAAQ,CAAA,CAFV,CADO,CAKP,CACED,QAAS,KADX,CAEEC,OAAQ,CAAA,CAFV,CALO,CAFc,CAYvBC,aAAc,CACZF,QAAS,eADG,CAEZG,WAAY,CAAA,CAFA,CAGZC,MAAO,SAHK,CAZS,CAiBvBC,SAAU,WAjBa,CAkBvB,YAAa,CACXL,QAAS,YADE,CAEXG,WAAY,CAAA,CAFD,CAGXC,MAAO,UAHI,CAlBU,CAuBvBE,OAAQ,CACNN,QAAS,oEADH;AAENG,WAAY,CAAA,CAFN,CAvBe,CA2BvBI,QAAS,sXA3Bc,CA4BvBC,SAAU,+EA5Ba,CA6BvBC,YAAa,cA7BU,CADJ;AAHvBjB,MAAAC,QAAA,CAAiBE,MACjBA,OAAAe,YAAA,CAAqB,QACrBf,OAAAgB,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/monkey.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$monkey\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = monkey\nmonkey.displayName = 'monkey'\nmonkey.aliases = []\nfunction monkey(Prism) {\n  Prism.languages.monkey = {\n    string: /\"[^\"\\r\\n]*\"/,\n    comment: [\n      {\n        pattern: /^#Rem\\s+[\\s\\S]*?^#End/im,\n        greedy: true\n      },\n      {\n        pattern: /'.+/,\n        greedy: true\n      }\n    ],\n    preprocessor: {\n      pattern: /(^[ \\t]*)#.+/m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    function: /\\w+(?=\\()/,\n    'type-char': {\n      pattern: /(\\w)[?%#$]/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: {\n      pattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,\n      lookbehind: true\n    },\n    keyword: /\\b(?:Void|Strict|Public|Private|Property|Bool|Int|Float|String|Array|Object|Continue|Exit|Import|Extern|New|Self|Super|Try|Catch|Eachin|True|False|Extends|Abstract|Final|Select|Case|Default|Const|Local|Global|Field|Method|Function|Class|End|If|Then|Else|ElseIf|EndIf|While|Wend|Repeat|Until|Forever|For|To|Step|Next|Return|Module|Interface|Implements|Inline|Throw|Null)\\b/i,\n    operator: /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[.,:;()\\[\\]]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","monkey","Prism","languages","string","comment","pattern","greedy","preprocessor","lookbehind","alias","function","number","keyword","operator","punctuation","displayName","aliases"]
}
