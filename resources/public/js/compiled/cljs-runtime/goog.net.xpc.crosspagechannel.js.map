{
"version":3,
"file":"goog.net.xpc.crosspagechannel.js",
"lineCount":448,
"mappings":"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",
"sources":["goog/net/xpc/crosspagechannel.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides the class CrossPageChannel, the main class in\n * goog.net.xpc.\n *\n * @see ../../demos/xpc/index.html\n */\n\ngoog.provide('goog.net.xpc.CrossPageChannel');\n\ngoog.require('goog.Uri');\ngoog.require('goog.async.Deferred');\ngoog.require('goog.async.Delay');\ngoog.require('goog.dispose');\ngoog.require('goog.dom');\ngoog.require('goog.dom.TagName');\ngoog.require('goog.events');\ngoog.require('goog.events.EventHandler');\ngoog.require('goog.events.EventType');\ngoog.require('goog.json');\ngoog.require('goog.log');\ngoog.require('goog.messaging.AbstractChannel');\ngoog.require('goog.net.xpc');\ngoog.require('goog.net.xpc.CfgFields');\ngoog.require('goog.net.xpc.ChannelStates');\ngoog.require('goog.net.xpc.CrossPageChannelRole');\ngoog.require('goog.net.xpc.DirectTransport');\ngoog.require('goog.net.xpc.FrameElementMethodTransport');\ngoog.require('goog.net.xpc.IframeRelayTransport');\ngoog.require('goog.net.xpc.NativeMessagingTransport');\ngoog.require('goog.net.xpc.NixTransport');\ngoog.require('goog.net.xpc.TransportTypes');\ngoog.require('goog.net.xpc.UriCfgFields');\ngoog.require('goog.string');\ngoog.require('goog.uri.utils');\ngoog.require('goog.userAgent');\n\n\n\n/**\n * A communication channel between two documents from different domains.\n * Provides asynchronous messaging.\n *\n * @param {Object} cfg Channel configuration object.\n * @param {goog.dom.DomHelper=} opt_domHelper The optional dom helper to\n *     use for looking up elements in the dom.\n * @constructor\n * @extends {goog.messaging.AbstractChannel}\n */\ngoog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {\n  goog.net.xpc.CrossPageChannel.base(this, 'constructor');\n\n  for (var i = 0, uriField; uriField = goog.net.xpc.UriCfgFields[i]; i++) {\n    if (uriField in cfg && !/^https?:\\/\\//.test(cfg[uriField])) {\n      throw new Error(\n          'URI ' + cfg[uriField] + ' is invalid for field ' + uriField);\n    }\n  }\n\n  /**\n   * The configuration for this channel.\n   * @type {Object}\n   * @private\n   */\n  this.cfg_ = cfg;\n\n  /**\n   * The name of the channel. Please use\n   * <code>updateChannelNameAndCatalog</code> to change this from the transports\n   * vs changing the property directly.\n   * @type {string}\n   */\n  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] ||\n      goog.net.xpc.getRandomString(10);\n\n  /**\n   * The dom helper to use for accessing the dom.\n   * @type {goog.dom.DomHelper}\n   * @private\n   */\n  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();\n\n  /**\n   * Collects deferred function calls which will be made once the connection\n   * has been fully set up.\n   * @type {!Array<function()>}\n   * @private\n   */\n  this.deferredDeliveries_ = [];\n\n  /**\n   * An event handler used to listen for load events on peer iframes.\n   * @type {!goog.events.EventHandler<!goog.net.xpc.CrossPageChannel>}\n   * @private\n   */\n  this.peerLoadHandler_ = new goog.events.EventHandler(this);\n\n  // If LOCAL_POLL_URI or PEER_POLL_URI is not available, try using\n  // robots.txt from that host.\n  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] =\n      cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] ||\n      goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) +\n          '/robots.txt';\n  // PEER_URI is sometimes undefined in tests.\n  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] =\n      cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] ||\n      goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || '') +\n          '/robots.txt';\n\n  goog.net.xpc.channels[this.name] = this;\n\n  if (!goog.events.getListener(\n          window, goog.events.EventType.UNLOAD,\n          goog.net.xpc.CrossPageChannel.disposeAll_)) {\n    // Set listener to dispose all registered channels on page unload.\n    goog.events.listenOnce(\n        window, goog.events.EventType.UNLOAD,\n        goog.net.xpc.CrossPageChannel.disposeAll_);\n  }\n\n  goog.log.info(goog.net.xpc.logger, 'CrossPageChannel created: ' + this.name);\n};\ngoog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);\n\n\n/**\n * Regexp for escaping service names.\n * @type {RegExp}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ =\n    new RegExp('^%*' + goog.net.xpc.TRANSPORT_SERVICE_ + '$');\n\n\n/**\n * Regexp for unescaping service names.\n * @type {RegExp}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ =\n    new RegExp('^%+' + goog.net.xpc.TRANSPORT_SERVICE_ + '$');\n\n\n/**\n * A delay between the transport reporting as connected and the calling of the\n * connection callback.  Sometimes used to paper over timing vulnerabilities.\n * @type {?goog.async.Delay}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;\n\n\n/**\n * A deferred which is set to non-null while a peer iframe is being created\n * but has not yet thrown its load event, and which fires when that load event\n * arrives.\n * @type {?goog.async.Deferred}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;\n\n\n/**\n * The transport.\n * @type {goog.net.xpc.Transport?}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.transport_ = null;\n\n\n/**\n * The channel state.\n * @type {number}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.state_ =\n    goog.net.xpc.ChannelStates.NOT_CONNECTED;\n\n\n/**\n * @override\n * @return {boolean} Whether the channel is connected.\n */\ngoog.net.xpc.CrossPageChannel.prototype.isConnected = function() {\n  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;\n};\n\n\n/**\n * Reference to the window-object of the peer page.\n * @type {?Object}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;\n\n\n/**\n * Reference to the iframe-element.\n * @type {?HTMLIFrameElement}\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;\n\n\n/**\n * Returns the configuration object for this channel.\n * Package private. Do not call from outside goog.net.xpc.\n *\n * @return {Object} The configuration object for this channel.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getConfig = function() {\n  return this.cfg_;\n};\n\n\n/**\n * Returns a reference to the iframe-element.\n * Package private. Do not call from outside goog.net.xpc.\n *\n * @return {?HTMLIFrameElement} A reference to the iframe-element.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {\n  return this.iframeElement_;\n};\n\n\n/**\n * Sets the window object the foreign document resides in.\n *\n * @param {Object} peerWindowObject The window object of the peer.\n */\ngoog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(\n    peerWindowObject) {\n  this.peerWindowObject_ = peerWindowObject;\n};\n\n\n/**\n * Returns the window object the foreign document resides in.\n *\n * @return {Object} The window object of the peer.\n * @package\n */\ngoog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {\n  return this.peerWindowObject_;\n};\n\n\n/**\n * Determines whether the peer window is available (e.g. not closed).\n *\n * @return {boolean} Whether the peer window is available.\n * @package\n */\ngoog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {\n  // NOTE(user): This check is not reliable in IE, where a document in an\n  // iframe does not get unloaded when removing the iframe element from the DOM.\n  // TODO(user): Find something that works in IE as well.\n  // NOTE(user): \"!this.peerWindowObject_.closed\" evaluates to 'false' in IE9\n  // sometimes even though typeof(this.peerWindowObject_.closed) is boolean and\n  // this.peerWindowObject_.closed evaluates to 'false'. Casting it to a Boolean\n  // results in sane evaluation. When this happens, it's in the inner iframe\n  // when querying its parent's 'closed' status. Note that this is a different\n  // case than mibuerge@'s note above.\n  try {\n    return !!this.peerWindowObject_ && !this.peerWindowObject_.closed;\n  } catch (e) {\n    // If the window is closing, an error may be thrown.\n    return false;\n  }\n};\n\n\n/**\n * Determine which transport type to use for this channel / useragent.\n * @return {!goog.net.xpc.TransportTypes} The best transport type.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {\n  var transportType;\n  if (goog.isFunction(document.postMessage) ||\n      goog.isFunction(window.postMessage) ||\n      // IE8 supports window.postMessage, but\n      // typeof window.postMessage returns \"object\"\n      (goog.userAgent.IE && window.postMessage)) {\n    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;\n  } else if (goog.userAgent.GECKO) {\n    transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;\n  } else if (\n      goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {\n    transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;\n  } else if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {\n    transportType = goog.net.xpc.TransportTypes.NIX;\n  } else {\n    transportType = goog.net.xpc.TransportTypes.UNDEFINED;\n  }\n  return transportType;\n};\n\n\n/**\n * Creates the transport for this channel. Chooses from the available\n * transport based on the user agent and the configuration.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {\n  // return, if the transport has already been created\n  if (this.transport_) {\n    return;\n  }\n\n  // TODO(user): Use goog.scope.\n  var CfgFields = goog.net.xpc.CfgFields;\n\n  if (!this.cfg_[CfgFields.TRANSPORT]) {\n    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();\n  }\n\n  // If TRANSPORT cfg is a function, we assume it's a constructor to a\n  // Transport implementation. Allows fine-grained dependency control over\n  // what Transport impls are brought in.\n  if (goog.isFunction(this.cfg_[CfgFields.TRANSPORT])) {\n    this.transport_ = /** @type {!goog.net.xpc.Transport} */ (\n        new this.cfg_[CfgFields.TRANSPORT](this, this.domHelper_));\n  } else {\n    switch (this.cfg_[CfgFields.TRANSPORT]) {\n      case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:\n        var protocolVersion =\n            this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;\n        this.transport_ = new goog.net.xpc.NativeMessagingTransport(\n            this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_,\n            !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);\n        break;\n      case goog.net.xpc.TransportTypes.NIX:\n        this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);\n        break;\n      case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:\n        this.transport_ =\n            new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);\n        break;\n      case goog.net.xpc.TransportTypes.IFRAME_RELAY:\n        this.transport_ =\n            new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);\n        break;\n      case goog.net.xpc.TransportTypes.DIRECT:\n        if (this.peerWindowObject_ &&\n            goog.net.xpc.DirectTransport.isSupported(\n                /** @type {!Window} */ (this.peerWindowObject_))) {\n          this.transport_ =\n              new goog.net.xpc.DirectTransport(this, this.domHelper_);\n        } else {\n          goog.log.info(\n              goog.net.xpc.logger,\n              'DirectTransport not supported for this window, peer window in' +\n                  ' different security context or not set yet.');\n        }\n        break;\n    }\n  }\n\n  if (this.transport_) {\n    goog.log.info(\n        goog.net.xpc.logger, 'Transport created: ' + this.transport_.getName());\n  } else {\n    throw new Error(\n        'CrossPageChannel: No suitable transport found! You may ' +\n        'try injecting a Transport constructor directly via the channel ' +\n        'config object.');\n  }\n};\n\n\n/**\n * Returns the transport type in use for this channel.\n * @return {number} Transport-type identifier.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {\n  return this.transport_.getType();\n};\n\n\n/**\n * Returns the tranport name in use for this channel.\n * @return {string} The transport name.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {\n  return this.transport_.getName();\n};\n\n\n/**\n * @return {!Object} Configuration-object to be used by the peer to\n *     initialize the channel.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {\n  var peerCfg = {};\n  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;\n  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] =\n      this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];\n  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] =\n      this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];\n\n  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {\n    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] =\n        this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];\n  }\n  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {\n    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] =\n        this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];\n  }\n  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {\n    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] =\n        this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];\n  }\n  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];\n  if (role) {\n    peerCfg[goog.net.xpc.CfgFields.ROLE] =\n        role == goog.net.xpc.CrossPageChannelRole.INNER ?\n        goog.net.xpc.CrossPageChannelRole.OUTER :\n        goog.net.xpc.CrossPageChannelRole.INNER;\n  }\n\n  return peerCfg;\n};\n\n\n/**\n * Creates the iframe containing the peer page in a specified parent element.\n * This method does not connect the channel, connect() still has to be called\n * separately.\n *\n * @param {!Element} parentElm The container element the iframe is appended to.\n * @param {Function=} opt_configureIframeCb If present, this function gets\n *     called with the iframe element as parameter to allow setting properties\n *     on it before it gets added to the DOM. If absent, the iframe's width and\n *     height are set to '100%'.\n * @param {boolean=} opt_addCfgParam Whether to add the peer configuration as\n *     URL parameter (default: true).\n * @return {!HTMLIFrameElement} The iframe element.\n */\ngoog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(\n    parentElm, opt_configureIframeCb, opt_addCfgParam) {\n  goog.log.info(goog.net.xpc.logger, 'createPeerIframe()');\n\n  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];\n  if (!iframeId) {\n    // Create a randomized ID for the iframe element to avoid\n    // bfcache-related issues.\n    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] =\n        'xpcpeer' + goog.net.xpc.getRandomString(4);\n  }\n\n  // TODO(user) Opera creates a history-entry when creating an iframe\n  // programmatically as follows. Find a way which avoids this.\n\n  var iframeElm =\n      goog.dom.getDomHelper(parentElm).createElement(goog.dom.TagName.IFRAME);\n  iframeElm.id = iframeElm.name = iframeId;\n  if (opt_configureIframeCb) {\n    opt_configureIframeCb(iframeElm);\n  } else {\n    iframeElm.style.width = iframeElm.style.height = '100%';\n  }\n\n  this.cleanUpIncompleteConnection_();\n  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);\n  var peerUri = this.getPeerUri(opt_addCfgParam);\n  this.peerLoadHandler_.listenOnceWithScope(\n      iframeElm, 'load', this.peerWindowDeferred_.callback, false,\n      this.peerWindowDeferred_);\n\n  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {\n    // Appending the iframe in a timeout to avoid a weird fastback issue, which\n    // is present in Safari and Gecko.\n    window.setTimeout(goog.bind(function() {\n      parentElm.appendChild(iframeElm);\n      iframeElm.src = peerUri.toString();\n      goog.log.info(\n          goog.net.xpc.logger, 'peer iframe created (' + iframeId + ')');\n    }, this), 1);\n  } else {\n    iframeElm.src = peerUri.toString();\n    parentElm.appendChild(iframeElm);\n    goog.log.info(\n        goog.net.xpc.logger, 'peer iframe created (' + iframeId + ')');\n  }\n\n  return /** @type {!HTMLIFrameElement} */ (iframeElm);\n};\n\n\n/**\n * Clean up after any incomplete attempt to establish and connect to a peer\n * iframe.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ =\n    function() {\n  if (this.peerWindowDeferred_) {\n    this.peerWindowDeferred_.cancel();\n    this.peerWindowDeferred_ = null;\n  }\n  this.deferredDeliveries_.length = 0;\n  this.peerLoadHandler_.removeAll();\n};\n\n\n/**\n * Returns the peer URI, with an optional URL parameter for configuring the peer\n * window.\n *\n * @param {boolean=} opt_addCfgParam Whether to add the peer configuration as\n *     URL parameter (default: true).\n * @return {!goog.Uri} The peer URI.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {\n  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];\n  if (goog.isString(peerUri)) {\n    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] =\n        new goog.Uri(peerUri);\n  }\n\n  // Add the channel configuration used by the peer as URL parameter.\n  if (opt_addCfgParam !== false) {\n    peerUri.setParameterValue(\n        'xpc', goog.json.serialize(this.getPeerConfiguration()));\n  }\n\n  return peerUri;\n};\n\n\n/**\n * Initiates connecting the channel. When this method is called, all the\n * information needed to connect the channel has to be available.\n *\n * @override\n * @param {Function=} opt_connectCb The function to be called when the\n * channel has been connected and is ready to be used.\n */\ngoog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {\n  this.connectCb_ = opt_connectCb || goog.nullFunction;\n\n  // If this channel was previously closed, transition back to the NOT_CONNECTED\n  // state to ensure that the connection can proceed (xpcDeliver blocks\n  // transport messages while the connection state is CLOSED).\n  if (this.state_ == goog.net.xpc.ChannelStates.CLOSED) {\n    this.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;\n  }\n\n  // If we know of a peer window whose creation has been requested but is not\n  // complete, peerWindowDeferred_ will be non-null, and we should block on it.\n  if (this.peerWindowDeferred_) {\n    this.peerWindowDeferred_.addCallback(this.continueConnection_);\n  } else {\n    this.continueConnection_();\n  }\n};\n\n\n/**\n * Continues the connection process once we're as sure as we can be that the\n * peer iframe has been created.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {\n  goog.log.info(goog.net.xpc.logger, 'continueConnection_()');\n  this.peerWindowDeferred_ = null;\n  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {\n    this.iframeElement_ = /** @type {?HTMLIFrameElement} */ (\n        this.domHelper_.getElement(\n            this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]));\n  }\n  if (this.iframeElement_) {\n    var winObj = this.iframeElement_.contentWindow;\n    // accessing the window using contentWindow doesn't work in safari\n    if (!winObj) {\n      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];\n    }\n    this.setPeerWindowObject(winObj);\n  }\n\n  // if the peer window object has not been set at this point, we assume\n  // being in an iframe and the channel is meant to be to the containing page\n  if (!this.peerWindowObject_) {\n    // throw an error if we are in the top window (== not in an iframe)\n    if (window == window.top) {\n      throw new Error(\n          'CrossPageChannel: Can\\'t connect, peer window-object not set.');\n    } else {\n      this.setPeerWindowObject(window.parent);\n    }\n  }\n\n  this.createTransport_();\n\n  this.transport_.connect();\n\n  // Now we run any deferred deliveries collected while connection was deferred.\n  while (this.deferredDeliveries_.length > 0) {\n    this.deferredDeliveries_.shift()();\n  }\n};\n\n\n/**\n * Closes the channel.\n */\ngoog.net.xpc.CrossPageChannel.prototype.close = function() {\n  this.cleanUpIncompleteConnection_();\n  this.state_ = goog.net.xpc.ChannelStates.CLOSED;\n  goog.dispose(this.transport_);\n  this.transport_ = null;\n  this.connectCb_ = null;\n  goog.dispose(this.connectionDelay_);\n  this.connectionDelay_ = null;\n  goog.log.info(goog.net.xpc.logger, 'Channel \"' + this.name + '\" closed');\n};\n\n\n/**\n * Package-private.\n * Called by the transport when the channel is connected.\n * @param {number=} opt_delay Delay this number of milliseconds before calling\n *     the connection callback. Usage is discouraged, but can be used to paper\n *     over timing vulnerabilities when there is no alternative.\n */\ngoog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {\n  if (this.isConnected() ||\n      (this.connectionDelay_ && this.connectionDelay_.isActive())) {\n    return;\n  }\n  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;\n  goog.log.info(goog.net.xpc.logger, 'Channel \"' + this.name + '\" connected');\n  goog.dispose(this.connectionDelay_);\n  if (goog.isDef(opt_delay)) {\n    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);\n    this.connectionDelay_.start();\n  } else {\n    this.connectionDelay_ = null;\n    this.connectCb_();\n  }\n};\n\n\n/**\n * Called by the transport in case of an unrecoverable failure.\n * Package private. Do not call from outside goog.net.xpc.\n */\ngoog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {\n  goog.log.info(goog.net.xpc.logger, 'Transport Error');\n  this.close();\n};\n\n\n/** @override */\ngoog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {\n  if (!this.isConnected()) {\n    goog.log.error(goog.net.xpc.logger, 'Can\\'t send. Channel not connected.');\n    return;\n  }\n  // Check if the peer is still around.\n  if (!this.isPeerAvailable()) {\n    goog.log.error(goog.net.xpc.logger, 'Peer has disappeared.');\n    this.close();\n    return;\n  }\n  if (goog.isObject(payload)) {\n    payload = goog.json.serialize(payload);\n  }\n\n  // Partially URL-encode the service name because some characters (: and |) are\n  // used as delimiters for some transports, and we want to allow those\n  // characters in service names.\n  this.transport_.send(this.escapeServiceName_(serviceName), payload);\n};\n\n\n/**\n * Delivers messages to the appropriate service-handler. Named xpcDeliver to\n * avoid name conflict with `deliver` function in superclass\n * goog.messaging.AbstractChannel.\n *\n * @param {string} serviceName The name of the port.\n * @param {string} payload The payload.\n * @param {string=} opt_origin An optional origin for the message, where the\n *     underlying transport makes that available.  If this is specified, and\n *     the PEER_HOSTNAME parameter was provided, they must match or the message\n *     will be rejected.\n * @package\n */\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(\n    serviceName, payload, opt_origin) {\n\n  // This check covers the very rare (but producable) case where the inner frame\n  // becomes ready and sends its setup message while the outer frame is\n  // deferring its connect method waiting for the inner frame to be ready. The\n  // resulting deferral ensures the message will not be processed until the\n  // channel is fully configured.\n  if (this.peerWindowDeferred_) {\n    this.deferredDeliveries_.push(\n        goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));\n    return;\n  }\n\n  // Check whether the origin of the message is as expected.\n  if (!this.isMessageOriginAcceptable(opt_origin)) {\n    goog.log.warning(\n        goog.net.xpc.logger, 'Message received from unapproved origin \"' +\n            opt_origin + '\" - rejected.');\n    return;\n  }\n\n  // If there is another channel still open, the native transport's global\n  // postMessage listener will still be active.  This will mean that messages\n  // being sent to the now-closed channel will still be received and delivered,\n  // such as transport service traffic from its previous correspondent in the\n  // other frame.  Ensure these messages don't cause exceptions.\n  // Example: http://b/12419303\n  if (this.isDisposed() || this.state_ == goog.net.xpc.ChannelStates.CLOSED) {\n    goog.log.warning(\n        goog.net.xpc.logger, 'CrossPageChannel::xpcDeliver(): Channel closed.');\n  } else if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {\n    this.transport_.transportServiceHandler(payload);\n  } else {\n    // only deliver messages if connected\n    if (this.isConnected()) {\n      this.deliver(this.unescapeServiceName_(serviceName), payload);\n    } else {\n      goog.log.info(\n          goog.net.xpc.logger,\n          'CrossPageChannel::xpcDeliver(): Not connected.');\n    }\n  }\n};\n\n\n/**\n * Escape the user-provided service name for sending across the channel. This\n * URL-encodes certain special characters so they don't conflict with delimiters\n * used by some of the transports, and adds a special prefix if the name\n * conflicts with the reserved transport service name.\n *\n * This is the opposite of {@link #unescapeServiceName_}.\n *\n * @param {string} name The name of the service to escape.\n * @return {string} The escaped service name.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {\n  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {\n    name = '%' + name;\n  }\n  return name.replace(/[%:|]/g, encodeURIComponent);\n};\n\n\n/**\n * Unescape the escaped service name that was sent across the channel. This is\n * the opposite of {@link #escapeServiceName_}.\n *\n * @param {string} name The name of the service to unescape.\n * @return {string} The unescaped service name.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {\n  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);\n  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {\n    return name.substring(1);\n  } else {\n    return name;\n  }\n};\n\n\n/**\n * Returns the role of this channel (either inner or outer).\n * @return {number} The role of this channel.\n */\ngoog.net.xpc.CrossPageChannel.prototype.getRole = function() {\n  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];\n  if (goog.isNumber(role)) {\n    return role;\n  } else {\n    return window.parent == this.peerWindowObject_ ?\n        goog.net.xpc.CrossPageChannelRole.INNER :\n        goog.net.xpc.CrossPageChannelRole.OUTER;\n  }\n};\n\n\n/**\n * Sets the channel name. Note, this doesn't establish a unique channel to\n * communicate on.\n * @param {string} name The new channel name.\n */\ngoog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(\n    name) {\n  goog.log.fine(goog.net.xpc.logger, 'changing channel name to ' + name);\n  delete goog.net.xpc.channels[this.name];\n  this.name = name;\n  goog.net.xpc.channels[name] = this;\n};\n\n\n/**\n * Returns whether an incoming message with the given origin is acceptable.\n * If an incoming request comes with a specified (non-empty) origin, and the\n * PEER_HOSTNAME config parameter has also been provided, the two must match,\n * or the message is unacceptable.\n * @param {string=} opt_origin The origin associated with the incoming message.\n * @return {boolean} Whether the message is acceptable.\n * @package\n */\ngoog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable = function(\n    opt_origin) {\n  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(opt_origin)) ||\n      goog.string.isEmptyOrWhitespace(goog.string.makeSafe(peerHostname)) ||\n      opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];\n};\n\n\n/** @override */\ngoog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {\n  this.close();\n\n  this.peerWindowObject_ = null;\n  this.iframeElement_ = null;\n  delete goog.net.xpc.channels[this.name];\n  goog.dispose(this.peerLoadHandler_);\n  delete this.peerLoadHandler_;\n  goog.net.xpc.CrossPageChannel.base(this, 'disposeInternal');\n};\n\n\n/**\n * Disposes all channels.\n * @private\n */\ngoog.net.xpc.CrossPageChannel.disposeAll_ = function() {\n  for (var name in goog.net.xpc.channels) {\n    goog.dispose(goog.net.xpc.channels[name]);\n  }\n};\n"],
"names":["goog","provide","require","net","xpc","CrossPageChannel","goog.net.xpc.CrossPageChannel","cfg","opt_domHelper","base","i","uriField","UriCfgFields","test","Error","cfg_","name","CfgFields","CHANNEL_NAME","getRandomString","domHelper_","dom","getDomHelper","deferredDeliveries_","peerLoadHandler_","events","EventHandler","LOCAL_POLL_URI","uri","utils","getHost","getWindow","location","href","PEER_POLL_URI","PEER_URI","channels","getListener","window","EventType","UNLOAD","disposeAll_","listenOnce","log","info","logger","inherits","messaging","AbstractChannel","TRANSPORT_SERVICE_ESCAPE_RE_","RegExp","TRANSPORT_SERVICE_","TRANSPORT_SERVICE_UNESCAPE_RE_","prototype","connectionDelay_","peerWindowDeferred_","transport_","state_","ChannelStates","NOT_CONNECTED","isConnected","goog.net.xpc.CrossPageChannel.prototype.isConnected","CONNECTED","peerWindowObject_","iframeElement_","getConfig","goog.net.xpc.CrossPageChannel.prototype.getConfig","getIframeElement","goog.net.xpc.CrossPageChannel.prototype.getIframeElement","setPeerWindowObject","goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject","peerWindowObject","getPeerWindowObject","goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject","isPeerAvailable","goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable","closed","e","determineTransportType_","goog.net.xpc.CrossPageChannel.prototype.determineTransportType_","transportType","isFunction","document","postMessage","userAgent","IE","TransportTypes","NATIVE_MESSAGING","GECKO","FRAME_ELEMENT_METHOD","PEER_RELAY_URI","IFRAME_RELAY","NixTransport","isNixSupported","NIX","UNDEFINED","createTransport_","goog.net.xpc.CrossPageChannel.prototype.createTransport_","TRANSPORT","protocolVersion","NATIVE_TRANSPORT_PROTOCOL_VERSION","NativeMessagingTransport","PEER_HOSTNAME","ONE_SIDED_HANDSHAKE","FrameElementMethodTransport","IframeRelayTransport","DIRECT","DirectTransport","isSupported","getName","getTransportType","goog.net.xpc.CrossPageChannel.prototype.getTransportType","getType","getTransportName","goog.net.xpc.CrossPageChannel.prototype.getTransportName","getPeerConfiguration","goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration","peerCfg","LOCAL_RELAY_URI","role","ROLE","CrossPageChannelRole","INNER","OUTER","createPeerIframe","goog.net.xpc.CrossPageChannel.prototype.createPeerIframe","parentElm","opt_configureIframeCb","opt_addCfgParam","iframeId","IFRAME_ID","iframeElm","createElement","TagName","IFRAME","id","style","width","height","cleanUpIncompleteConnection_","async","Deferred","undefined","peerUri","getPeerUri","listenOnceWithScope","callback","WEBKIT","setTimeout","bind","appendChild","src","toString","goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_","cancel","length","removeAll","goog.net.xpc.CrossPageChannel.prototype.getPeerUri","isString","Uri","setParameterValue","json","serialize","connect","goog.net.xpc.CrossPageChannel.prototype.connect","opt_connectCb","connectCb_","nullFunction","CLOSED","addCallback","continueConnection_","goog.net.xpc.CrossPageChannel.prototype.continueConnection_","getElement","winObj","contentWindow","frames","top","parent","shift","close","goog.net.xpc.CrossPageChannel.prototype.close","dispose","notifyConnected","goog.net.xpc.CrossPageChannel.prototype.notifyConnected","opt_delay","isActive","isDef","Delay","start","notifyTransportError","goog.net.xpc.CrossPageChannel.prototype.notifyTransportError","send","goog.net.xpc.CrossPageChannel.prototype.send","serviceName","payload","error","isObject","escapeServiceName_","xpcDeliver","goog.net.xpc.CrossPageChannel.prototype.xpcDeliver","opt_origin","push","isMessageOriginAcceptable","warning","isDisposed","transportServiceHandler","deliver","unescapeServiceName_","goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_","replace","encodeURIComponent","goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_","decodeURIComponent","substring","getRole","goog.net.xpc.CrossPageChannel.prototype.getRole","isNumber","updateChannelNameAndCatalog","goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog","fine","goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable","peerHostname","string","isEmptyOrWhitespace","makeSafe","disposeInternal","goog.net.xpc.CrossPageChannel.prototype.disposeInternal","goog.net.xpc.CrossPageChannel.disposeAll_"]
}
