{
"version":3,
"file":"goog.messaging.abstractchannel.js",
"lineCount":95,
"mappings":"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",
"sources":["goog/messaging/abstractchannel.js"],
"sourcesContent":["// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview An abstract superclass for message channels that handles the\n * repetitive details of registering and dispatching to services. This is more\n * useful for full-fledged channels than for decorators, since decorators\n * generally delegate service registering anyway.\n *\n */\n\n\ngoog.provide('goog.messaging.AbstractChannel');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.json');\ngoog.require('goog.log');\ngoog.require('goog.messaging.MessageChannel');  // interface\n\n\n\n/**\n * Creates an abstract message channel.\n *\n * @constructor\n * @extends {goog.Disposable}\n * @implements {goog.messaging.MessageChannel}\n */\ngoog.messaging.AbstractChannel = function() {\n  goog.messaging.AbstractChannel.base(this, 'constructor');\n\n  /**\n   * The services registered for this channel.\n   * @type {Object<string, {callback: function((string|!Object)),\n                             objectPayload: boolean}>}\n   * @private\n   */\n  this.services_ = {};\n};\ngoog.inherits(goog.messaging.AbstractChannel, goog.Disposable);\n\n\n/**\n * The default service to be run when no other services match.\n *\n * @type {?function(string, (string|!Object))}\n * @private\n */\ngoog.messaging.AbstractChannel.prototype.defaultService_;\n\n\n/**\n * Logger for this class.\n * @type {goog.log.Logger}\n * @protected\n */\ngoog.messaging.AbstractChannel.prototype.logger =\n    goog.log.getLogger('goog.messaging.AbstractChannel');\n\n\n/**\n * Immediately calls opt_connectCb if given, and is otherwise a no-op. If\n * subclasses have configuration that needs to happen before the channel is\n * connected, they should override this and {@link #isConnected}.\n * @override\n */\ngoog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {\n  if (opt_connectCb) {\n    opt_connectCb();\n  }\n};\n\n\n/**\n * Always returns true. If subclasses have configuration that needs to happen\n * before the channel is connected, they should override this and\n * {@link #connect}.\n * @override\n */\ngoog.messaging.AbstractChannel.prototype.isConnected = function() {\n  return true;\n};\n\n\n/** @override */\ngoog.messaging.AbstractChannel.prototype.registerService = function(\n    serviceName, callback, opt_objectPayload) {\n  this.services_[serviceName] = {\n    callback: callback,\n    objectPayload: !!opt_objectPayload\n  };\n};\n\n\n/** @override */\ngoog.messaging.AbstractChannel.prototype.registerDefaultService = function(\n    callback) {\n  this.defaultService_ = callback;\n};\n\n\n/** @override */\ngoog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;\n\n\n/**\n * Delivers a message to the appropriate service. This is meant to be called by\n * subclasses when they receive messages.\n *\n * This method takes into account both explicitly-registered and default\n * services, as well as making sure that JSON payloads are decoded when\n * necessary. If the subclass is capable of passing objects as payloads, those\n * objects can be passed in to this method directly. Otherwise, the (potentially\n * JSON-encoded) strings should be passed in.\n *\n * @param {string} serviceName The name of the service receiving the message.\n * @param {string|!Object} payload The contents of the message.\n * @protected\n */\ngoog.messaging.AbstractChannel.prototype.deliver = function(\n    serviceName, payload) {\n  var service = this.getService(serviceName, payload);\n  if (!service) {\n    return;\n  }\n\n  var decodedPayload =\n      this.decodePayload(serviceName, payload, service.objectPayload);\n  if (goog.isDefAndNotNull(decodedPayload)) {\n    service.callback(decodedPayload);\n  }\n};\n\n\n/**\n * Find the service object for a given service name. If there's no service\n * explicitly registered, but there is a default service, a service object is\n * constructed for it.\n *\n * @param {string} serviceName The name of the service receiving the message.\n * @param {string|!Object} payload The contents of the message.\n * @return {?{callback: function((string|!Object)), objectPayload: boolean}} The\n *     service object for the given service, or null if none was found.\n * @protected\n */\ngoog.messaging.AbstractChannel.prototype.getService = function(\n    serviceName, payload) {\n  var service = this.services_[serviceName];\n  if (service) {\n    return service;\n  } else if (this.defaultService_) {\n    var callback = goog.partial(this.defaultService_, serviceName);\n    var objectPayload = goog.isObject(payload);\n    return {callback: callback, objectPayload: objectPayload};\n  }\n\n  goog.log.warning(this.logger, 'Unknown service name \"' + serviceName + '\"');\n  return null;\n};\n\n\n/**\n * Converts the message payload into the format expected by the registered\n * service (either JSON or string).\n *\n * @param {string} serviceName The name of the service receiving the message.\n * @param {string|!Object} payload The contents of the message.\n * @param {boolean} objectPayload Whether the service expects an object or a\n *     plain string.\n * @return {string|Object} The payload in the format expected by the service, or\n *     null if something went wrong.\n * @protected\n */\ngoog.messaging.AbstractChannel.prototype.decodePayload = function(\n    serviceName, payload, objectPayload) {\n  if (objectPayload && goog.isString(payload)) {\n    try {\n      return /** @type {!Object} */ (JSON.parse(payload));\n    } catch (err) {\n      goog.log.warning(\n          this.logger, 'Expected JSON payload for ' + serviceName + ', was \"' +\n              payload + '\"');\n      return null;\n    }\n  } else if (!objectPayload && !goog.isString(payload)) {\n    return goog.json.serialize(payload);\n  }\n  return payload;\n};\n\n\n/** @override */\ngoog.messaging.AbstractChannel.prototype.disposeInternal = function() {\n  goog.messaging.AbstractChannel.base(this, 'disposeInternal');\n  delete this.services_;\n  delete this.defaultService_;\n};\n"],
"names":["goog","provide","require","messaging","AbstractChannel","goog.messaging.AbstractChannel","base","services_","inherits","Disposable","prototype","defaultService_","logger","log","getLogger","connect","goog.messaging.AbstractChannel.prototype.connect","opt_connectCb","isConnected","goog.messaging.AbstractChannel.prototype.isConnected","registerService","goog.messaging.AbstractChannel.prototype.registerService","serviceName","callback","opt_objectPayload","objectPayload","registerDefaultService","goog.messaging.AbstractChannel.prototype.registerDefaultService","send","abstractMethod","deliver","goog.messaging.AbstractChannel.prototype.deliver","payload","service","getService","decodedPayload","decodePayload","isDefAndNotNull","goog.messaging.AbstractChannel.prototype.getService","partial","isObject","warning","goog.messaging.AbstractChannel.prototype.decodePayload","isString","JSON","parse","err","json","serialize","disposeInternal","goog.messaging.AbstractChannel.prototype.disposeInternal"]
}
