{
"version":3,
"file":"module$node_modules$refractor$lang$cpp.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAAC,SAAA,CAAeC,UAAf,CACAF,MAAAG,UAAAJ,IAAA,CAAsBC,KAAAG,UAAAC,OAAA,CAAuB,GAAvB,CAA4B,CAChD,aAAc,CACZC,QAAS,iCADG,CAEZC,WAAY,CAAA,CAFA,CADkC,CAKhDC,QAAS,6lBALuC;AAMhDC,OAAQ,CACNH,QAAS,oIADH,CAENI,OAAQ,CAAA,CAFF,CANwC,CAUhDC,SAAU,gHAVsC,CAWhDC,QAAS,oBAXuC,CAA5B,CAatBX,MAAAG,UAAAS,aAAA,CAA6B,KAA7B,CAAoC,QAApC,CAA8C,CAC5C,aAAc,CACZP,QAAS,mCADG,CAEZQ,MAAO,QAFK,CAGZJ,OAAQ,CAAA,CAHI,CAD8B,CAA9C,CAfkB,CAJpB,IAAIP,WAAaP,OAAA,CAAQ,sCAAR,CACjBC;MAAAC,QAAA,CAAiBE,GACjBA,IAAAe,YAAA,CAAkB,KAClBf,IAAAgB,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/cpp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$cpp\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = cpp\ncpp.displayName = 'cpp'\ncpp.aliases = []\nfunction cpp(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': {\n      pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n    number: {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+\\.?[\\da-f']*|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+\\.?[\\d']*|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]*/i,\n      greedy: true\n    },\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    boolean: /\\b(?:true|false)\\b/\n  })\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  })\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","cpp","Prism","register","refractorC","languages","extend","pattern","lookbehind","keyword","number","greedy","operator","boolean","insertBefore","alias","displayName","aliases"]
}
