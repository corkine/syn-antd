{
"version":3,
"file":"module$node_modules$refractor$lang$rust.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAOnBA,KAAAC,UAAAF,KAAA,CAAuB,CACrBG,QAAS,CACP,CACEC,QAAS,2BADX,CAEEC,WAAY,CAAA,CAFd,CADO,CAKP,CACED,QAAS,kBADX,CAEEC,WAAY,CAAA,CAFd,CALO,CADY,CAWrBC,OAAQ,CACN,CACEF,QAAS,sCADX,CAEEG,OAAQ,CAAA,CAFV,CADM,CAKN,CACEH,QAAS,yBADX,CAEEG,OAAQ,CAAA,CAFV,CALM,CAXa,CAqBrBC,KAAM,CACJJ,QAAS,uEADL,CAEJK,MAAO,QAFH,CArBe,CAyBrB,sBAAuB,CACrBL,QAAS,WADY;AAErBK,MAAO,QAFc,CAzBF,CA6BrBC,QAAS,4TA7BY,CA8BrBC,UAAW,CACTP,QAAS,YADA,CAETG,OAAQ,CAAA,CAFC,CAGTE,MAAO,WAHE,CA9BU,CAmCrBG,SAAU,CACR,cADQ,CAER,kBAFQ,CAnCW,CAuCrB,cAAe,CACbR,QAAS,MADI,CAEbK,MAAO,UAFM,CAvCM,CA4CrBI,OAAQ,iKA5Ca;AA8CrB,iBAAkB,CAChBT,QAAS,sBADO,CAEhBU,OAAQ,CACNC,YAAa,OADP,CAENC,SAAU,MAFJ,CAFQ,CA9CG,CAqDrBD,YAAa,kCArDQ,CAsDrBC,SAAU,qDAtDW,CAPJ,CAHrBnB,MAAAC,QAAA,CAAiBE,IACjBA,KAAAiB,YAAA,CAAmB,MACnBjB,KAAAkB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/rust.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$rust\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = rust\nrust.displayName = 'rust'\nrust.aliases = []\nfunction rust(Prism) {\n  /* TODO\nAdd support for Markdown notation inside doc comments\nAdd support for nested block comments...\nMatch closure params even when not followed by dash or brace\nAdd better support for macro definition\n*/\n  Prism.languages.rust = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    string: [\n      {\n        pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n        greedy: true\n      },\n      {\n        pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      }\n    ],\n    char: {\n      pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n      alias: 'string'\n    },\n    'lifetime-annotation': {\n      pattern: /'[^\\s>']+/,\n      alias: 'symbol'\n    },\n    keyword: /\\b(?:abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n    attribute: {\n      pattern: /#!?\\[.+?\\]/,\n      greedy: true,\n      alias: 'attr-name'\n    },\n    function: [\n      /\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n      /\\w+!(?=\\s*\\(|\\[)/\n    ],\n    'macro-rules': {\n      pattern: /\\w+!/,\n      alias: 'function'\n    },\n    // Hex, oct, bin, dec numbers with visual separators and type suffix\n    number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n    // Closure params should not be confused with bitwise OR |\n    'closure-params': {\n      pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n      inside: {\n        punctuation: /[|:,]/,\n        operator: /[&*]/\n      }\n    },\n    punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n    operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","rust","Prism","languages","comment","pattern","lookbehind","string","greedy","char","alias","keyword","attribute","function","number","inside","punctuation","operator","displayName","aliases"]
}
