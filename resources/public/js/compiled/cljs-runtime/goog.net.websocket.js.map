{
"version":3,
"file":"goog.net.websocket.js",
"lineCount":203,
"mappings":"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",
"sources":["goog/net/websocket.js"],
"sourcesContent":["// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the WebSocket class.  A WebSocket provides a\n * bi-directional, full-duplex communications channel, over a single TCP socket.\n *\n * See http://dev.w3.org/html5/websockets/\n * for the full HTML5 WebSocket API.\n *\n * Typical usage will look like this:\n *\n *  var ws = new goog.net.WebSocket();\n *\n *  var handler = new goog.events.EventHandler();\n *  handler.listen(ws, goog.net.WebSocket.EventType.OPENED, onOpen);\n *  handler.listen(ws, goog.net.WebSocket.EventType.MESSAGE, onMessage);\n *\n *  try {\n *    ws.open('ws://127.0.0.1:4200');\n *  } catch (e) {\n *    ...\n *  }\n *\n */\n\ngoog.provide('goog.net.WebSocket');\ngoog.provide('goog.net.WebSocket.ErrorEvent');\ngoog.provide('goog.net.WebSocket.EventType');\ngoog.provide('goog.net.WebSocket.MessageEvent');\n\ngoog.require('goog.Timer');\ngoog.require('goog.asserts');\ngoog.require('goog.debug.entryPointRegistry');\ngoog.require('goog.events');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.log');\n\n\n/**\n * Class encapsulating the logic for using a WebSocket.\n *\n * @param {boolean|!goog.net.WebSocket.Options=} opt_params\n *     Parameters describing behavior of the WebSocket. The boolean 'true' is\n *     equivalent to setting Options.autoReconnect to be true.\n * @param {function(number): number=} opt_getNextReconnect\n *     @see goog.net.WebSocket.Options.getNextReconnect. This parameter is\n *     ignored if Options is passed for the first argument.\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.net.WebSocket = function(opt_params, opt_getNextReconnect) {\n  goog.net.WebSocket.base(this, 'constructor');\n  if (typeof opt_params != 'object') {\n    opt_params = /**@type {!goog.net.WebSocket.Options} */ ({\n      autoReconnect: opt_params,\n      getNextReconnect: opt_getNextReconnect,\n    });\n  }\n  /** @private {boolean} @see goog.net.WebSocket.Options.autoReconnect */\n  this.autoReconnect_ = opt_params.autoReconnect != false;\n  /**\n   * @private {function(number): number}\n   * @see goog.net.WebSocket.Options.getNextReconnect\n   */\n  this.getNextReconnect_ =\n      opt_params.getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;\n  /**\n   * @private {goog.net.WebSocket.BinaryType}\n   * @see goog.net.WebSocket.Options.binaryType\n   */\n  this.binaryType_ =\n      opt_params.binaryType || goog.net.WebSocket.BinaryType.BLOB;\n\n  /**\n   * The time, in milliseconds, that must elapse before the next attempt to\n   * reconnect.\n   * @type {number}\n   * @private\n   */\n  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);\n};\ngoog.inherits(goog.net.WebSocket, goog.events.EventTarget);\n\n\n/** @enum {string} */\ngoog.net.WebSocket.BinaryType = {\n  ARRAY_BUFFER: 'arraybuffer',\n  BLOB: 'blob',\n};\n\n\n/** @record */\ngoog.net.WebSocket.Options = function() {\n\n  /**\n   * True if the web socket should automatically reconnect or not.  This is\n   * true by default.\n   * @type {boolean|undefined}\n   */\n  this.autoReconnect;\n\n  /**\n   * A function for obtaining the time until the next reconnect attempt. Given\n   * the reconnect attempt count (which is a positive integer), the function\n   * should return a positive integer representing the milliseconds to the\n   * next reconnect attempt.  The default function used is an exponential\n   * back-off. Note that this function is never called if auto reconnect is\n   * disabled.\n   * @type {(function(number): number)|undefined}\n   */\n  this.getNextReconnect;\n\n  /**\n   * Specifies the type of incoming binary messages, either Blob or\n   * ArrayBuffer.\n   * @type {!goog.net.WebSocket.BinaryType|undefined}\n   */\n  this.binaryType;\n};\n\n/**\n * The actual web socket that will be used to send/receive messages.\n * @type {?WebSocket}\n * @private\n */\ngoog.net.WebSocket.prototype.webSocket_ = null;\n\n\n/**\n * The URL to which the web socket will connect.\n * @type {?string}\n * @private\n */\ngoog.net.WebSocket.prototype.url_ = null;\n\n\n/**\n * The subprotocol name used when establishing the web socket connection.\n * @type {string|undefined}\n * @private\n */\ngoog.net.WebSocket.prototype.protocol_ = undefined;\n\n\n/**\n * True if a call to the close callback is expected or not.\n * @type {boolean}\n * @private\n */\ngoog.net.WebSocket.prototype.closeExpected_ = false;\n\n\n/**\n * Keeps track of the number of reconnect attempts made since the last\n * successful connection.\n * @type {number}\n * @private\n */\ngoog.net.WebSocket.prototype.reconnectAttempt_ = 0;\n\n\n/** @private {?number} */\ngoog.net.WebSocket.prototype.reconnectTimer_ = null;\n\n\n/**\n * The logger for this class.\n * @type {?goog.log.Logger}\n * @private\n */\ngoog.net.WebSocket.prototype.logger_ = goog.log.getLogger('goog.net.WebSocket');\n\n\n/**\n * The events fired by the web socket.\n * @enum {string} The event types for the web socket.\n */\ngoog.net.WebSocket.EventType = {\n\n  /**\n   * Fired when an attempt to open the WebSocket fails or there is a connection\n   * failure after a successful connection has been established.\n   */\n  CLOSED: goog.events.getUniqueId('closed'),\n\n  /**\n   * Fired when the WebSocket encounters an error.\n   */\n  ERROR: goog.events.getUniqueId('error'),\n\n  /**\n   * Fired when a new message arrives from the WebSocket.\n   */\n  MESSAGE: goog.events.getUniqueId('message'),\n\n  /**\n   * Fired when the WebSocket connection has been established.\n   */\n  OPENED: goog.events.getUniqueId('opened')\n};\n\n\n/**\n * The various states of the web socket.\n * @enum {number} The states of the web socket.\n * @private\n */\ngoog.net.WebSocket.ReadyState_ = {\n  // This is the initial state during construction.\n  CONNECTING: 0,\n  // This is when the socket is actually open and ready for data.\n  OPEN: 1,\n  // This is when the socket is in the middle of a close handshake.\n  // Note that this is a valid state even if the OPEN state was never achieved.\n  CLOSING: 2,\n  // This is when the socket is actually closed.\n  CLOSED: 3\n};\n\n/**\n * The maximum amount of time between reconnect attempts for the exponential\n * back-off in milliseconds.\n * @type {number}\n * @private\n */\ngoog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1000;\n\n\n/**\n * Computes the next reconnect time given the number of reconnect attempts since\n * the last successful connection.\n *\n * @param {number} attempt The number of reconnect attempts since the last\n *     connection.\n * @return {number} The time, in milliseconds, until the next reconnect attempt.\n * @const\n * @private\n */\ngoog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {\n  var time = Math.pow(2, attempt) * 1000;\n  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);\n};\n\n\n/**\n * Installs exception protection for all entry points introduced by\n * goog.net.WebSocket instances which are not protected by\n * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},\n * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or\n * {@link goog.events.protectBrowserEventEntryPoint}.\n *\n * @param {!goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry points.\n */\ngoog.net.WebSocket.protectEntryPoints = function(errorHandler) {\n  goog.net.WebSocket.prototype.onOpen_ =\n      errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);\n  goog.net.WebSocket.prototype.onClose_ =\n      errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);\n  goog.net.WebSocket.prototype.onMessage_ =\n      errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);\n  goog.net.WebSocket.prototype.onError_ =\n      errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);\n};\n\n\n/**\n * Creates and opens the actual WebSocket.  Only call this after attaching the\n * appropriate listeners to this object.  If listeners aren't registered, then\n * the `goog.net.WebSocket.EventType.OPENED` event might be missed.\n *\n * @param {string} url The URL to which to connect.\n * @param {string=} opt_protocol The subprotocol to use.  The connection will\n *     only be established if the server reports that it has selected this\n *     subprotocol. The subprotocol name must all be a non-empty ASCII string\n *     with no control characters and no spaces in them (i.e. only characters\n *     in the range U+0021 to U+007E).\n */\ngoog.net.WebSocket.prototype.open = function(url, opt_protocol) {\n  // Sanity check.  This works only in modern browsers.\n  goog.asserts.assert(\n      goog.global['WebSocket'], 'This browser does not support WebSocket');\n\n  // Don't do anything if the web socket is already open.\n  goog.asserts.assert(!this.isOpen(), 'The WebSocket is already open');\n\n  // Clear any pending attempts to reconnect.\n  this.clearReconnectTimer_();\n\n  // Construct the web socket.\n  this.url_ = url;\n  this.protocol_ = opt_protocol;\n\n  // This check has to be made otherwise you get protocol mismatch exceptions\n  // for passing undefined, null, '', or [].\n  if (this.protocol_) {\n    goog.log.info(\n        this.logger_, 'Opening the WebSocket on ' + this.url_ +\n            ' with protocol ' + this.protocol_);\n    this.webSocket_ = new WebSocket(this.url_, this.protocol_);\n  } else {\n    goog.log.info(this.logger_, 'Opening the WebSocket on ' + this.url_);\n    this.webSocket_ = new WebSocket(this.url_);\n  }\n  this.webSocket_.binaryType = this.binaryType_;\n  // Register the event handlers.  Note that it is not possible for these\n  // callbacks to be missed because it is registered after the web socket is\n  // instantiated.  Because of the synchronous nature of JavaScript, this code\n  // will execute before the browser creates the resource and makes any calls\n  // to these callbacks.\n  this.webSocket_.onopen = goog.bind(this.onOpen_, this);\n  this.webSocket_.onclose = goog.bind(this.onClose_, this);\n  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);\n  this.webSocket_.onerror = goog.bind(this.onError_, this);\n};\n\n\n/**\n * Closes the web socket connection.\n */\ngoog.net.WebSocket.prototype.close = function() {\n\n  // Clear any pending attempts to reconnect.\n  this.clearReconnectTimer_();\n\n  // Attempt to close only if the web socket was created.\n  if (this.webSocket_) {\n    goog.log.info(this.logger_, 'Closing the WebSocket.');\n\n    // Close is expected here since it was a direct call.  Close is considered\n    // unexpected when opening the connection fails or there is some other form\n    // of connection loss after being connected.\n    this.closeExpected_ = true;\n    this.webSocket_.close();\n    this.webSocket_ = null;\n  }\n};\n\n\n/**\n * Sends the message over the web socket.\n *\n * @param {string|!ArrayBuffer|!ArrayBufferView} message The message to send.\n */\ngoog.net.WebSocket.prototype.send = function(message) {\n  // Make sure the socket is ready to go before sending a message.\n  goog.asserts.assert(this.isOpen(), 'Cannot send without an open socket');\n\n  // Send the message and let onError_ be called if it fails thereafter.\n  this.webSocket_.send(message);\n};\n\n\n/**\n * Checks to see if the web socket is open or not.\n *\n * @return {boolean} True if the web socket is open, false otherwise.\n */\ngoog.net.WebSocket.prototype.isOpen = function() {\n  return !!this.webSocket_ &&\n      this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;\n};\n\n\n/**\n * Gets the number of bytes of data that have been queued using calls to send()\n * but not yet transmitted to the network.\n *\n * @return {number} Number of bytes of data that have been queued.\n */\ngoog.net.WebSocket.prototype.getBufferedAmount = function() {\n  return this.webSocket_.bufferedAmount;\n};\n\n\n/**\n * Called when the web socket has connected.\n *\n * @private\n */\ngoog.net.WebSocket.prototype.onOpen_ = function() {\n  goog.log.info(this.logger_, 'WebSocket opened on ' + this.url_);\n  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);\n\n  // Set the next reconnect interval.\n  this.reconnectAttempt_ = 0;\n  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);\n};\n\n\n/**\n * Called when the web socket has closed.\n *\n * @param {!Event} event The close event.\n * @private\n */\ngoog.net.WebSocket.prototype.onClose_ = function(event) {\n  goog.log.info(this.logger_, 'The WebSocket on ' + this.url_ + ' closed.');\n\n  // Firing this event allows handlers to query the URL.\n  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);\n\n  // Always clear out the web socket on a close event.\n  this.webSocket_ = null;\n\n  // See if this is an expected call to onClose_.\n  if (this.closeExpected_) {\n    goog.log.info(this.logger_, 'The WebSocket closed normally.');\n    // Only clear out the URL if this is a normal close.\n    this.url_ = null;\n    this.protocol_ = undefined;\n  } else {\n    // Unexpected, so try to reconnect.\n    goog.log.error(\n        this.logger_, 'The WebSocket disconnected unexpectedly: ' + event.data);\n\n    // Only try to reconnect if it is enabled.\n    if (this.autoReconnect_) {\n      // Log the reconnect attempt.\n      var seconds = Math.floor(this.nextReconnect_ / 1000);\n      goog.log.info(\n          this.logger_, 'Seconds until next reconnect attempt: ' + seconds);\n\n      // Actually schedule the timer.\n      this.reconnectTimer_ = goog.Timer.callOnce(\n          goog.bind(this.open, this, this.url_, this.protocol_),\n          this.nextReconnect_, this);\n\n      // Set the next reconnect interval.\n      this.reconnectAttempt_++;\n      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);\n    }\n  }\n  this.closeExpected_ = false;\n};\n\n\n/**\n * Called when a new message arrives from the server.\n *\n * @param {MessageEvent<string>} event The web socket message event.\n * @private\n */\ngoog.net.WebSocket.prototype.onMessage_ = function(event) {\n  var message = event.data;\n  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));\n};\n\n\n/**\n * Called when there is any error in communication.\n *\n * @param {Event} event The error event containing the error data.\n * @private\n */\ngoog.net.WebSocket.prototype.onError_ = function(event) {\n  var data = /** @type {string} */ (event.data);\n  goog.log.error(this.logger_, 'An error occurred: ' + data);\n  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));\n};\n\n\n/**\n * Clears the reconnect timer.\n *\n * @private\n */\ngoog.net.WebSocket.prototype.clearReconnectTimer_ = function() {\n  if (goog.isDefAndNotNull(this.reconnectTimer_)) {\n    goog.Timer.clear(this.reconnectTimer_);\n  }\n  this.reconnectTimer_ = null;\n};\n\n\n/** @override */\ngoog.net.WebSocket.prototype.disposeInternal = function() {\n  goog.net.WebSocket.base(this, 'disposeInternal');\n  this.close();\n};\n\n\n/**\n * Object representing a new incoming message event.\n *\n * @param {string} message The raw message coming from the web socket.\n * @extends {goog.events.Event}\n * @constructor\n * @final\n */\ngoog.net.WebSocket.MessageEvent = function(message) {\n  goog.net.WebSocket.MessageEvent.base(\n      this, 'constructor', goog.net.WebSocket.EventType.MESSAGE);\n\n  /**\n   * The new message from the web socket.\n   * @type {string}\n   */\n  this.message = message;\n};\ngoog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);\n\n\n/**\n * Object representing an error event. This is fired whenever an error occurs\n * on the web socket.\n *\n * @param {string} data The error data.\n * @extends {goog.events.Event}\n * @constructor\n * @final\n */\ngoog.net.WebSocket.ErrorEvent = function(data) {\n  goog.net.WebSocket.ErrorEvent.base(\n      this, 'constructor', goog.net.WebSocket.EventType.ERROR);\n\n  /**\n   * The error data coming from the web socket.\n   * @type {string}\n   */\n  this.data = data;\n};\ngoog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);\n\n\n// Register the WebSocket as an entry point, so that it can be monitored for\n// exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.net.WebSocket.prototype.onOpen_ =\n          transformer(goog.net.WebSocket.prototype.onOpen_);\n      goog.net.WebSocket.prototype.onClose_ =\n          transformer(goog.net.WebSocket.prototype.onClose_);\n      goog.net.WebSocket.prototype.onMessage_ =\n          transformer(goog.net.WebSocket.prototype.onMessage_);\n      goog.net.WebSocket.prototype.onError_ =\n          transformer(goog.net.WebSocket.prototype.onError_);\n    });\n"],
"names":["goog","provide","require","net","WebSocket","goog.net.WebSocket","opt_params","opt_getNextReconnect","base","autoReconnect","getNextReconnect","autoReconnect_","getNextReconnect_","EXPONENTIAL_BACKOFF_","binaryType_","binaryType","BinaryType","BLOB","nextReconnect_","reconnectAttempt_","inherits","events","EventTarget","ARRAY_BUFFER","Options","goog.net.WebSocket.Options","prototype","webSocket_","url_","protocol_","undefined","closeExpected_","reconnectTimer_","logger_","log","getLogger","EventType","CLOSED","getUniqueId","ERROR","MESSAGE","OPENED","ReadyState_","CONNECTING","OPEN","CLOSING","EXPONENTIAL_BACKOFF_CEILING_","goog.net.WebSocket.EXPONENTIAL_BACKOFF_","attempt","time","Math","pow","min","protectEntryPoints","goog.net.WebSocket.protectEntryPoints","errorHandler","onOpen_","protectEntryPoint","onClose_","onMessage_","onError_","open","goog.net.WebSocket.prototype.open","url","opt_protocol","asserts","assert","global","isOpen","clearReconnectTimer_","info","onopen","bind","onclose","onmessage","onerror","close","goog.net.WebSocket.prototype.close","send","goog.net.WebSocket.prototype.send","message","goog.net.WebSocket.prototype.isOpen","readyState","getBufferedAmount","goog.net.WebSocket.prototype.getBufferedAmount","bufferedAmount","goog.net.WebSocket.prototype.onOpen_","dispatchEvent","goog.net.WebSocket.prototype.onClose_","event","error","data","seconds","floor","Timer","callOnce","goog.net.WebSocket.prototype.onMessage_","MessageEvent","goog.net.WebSocket.prototype.onError_","ErrorEvent","goog.net.WebSocket.prototype.clearReconnectTimer_","isDefAndNotNull","clear","disposeInternal","goog.net.WebSocket.prototype.disposeInternal","goog.net.WebSocket.MessageEvent","Event","goog.net.WebSocket.ErrorEvent","debug","entryPointRegistry","register","transformer"]
}
