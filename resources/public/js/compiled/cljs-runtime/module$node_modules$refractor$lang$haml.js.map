{
"version":3,
"file":"module$node_modules$refractor$lang$haml.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/refractor/lang/haml.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$haml\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function(Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        },\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n              lookbehind: true,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter)\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","haml","Prism","languages","pattern","lookbehind","alias","inside","rest","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filters","language","all_filters","i","l","length","RegExp","filter_pattern","replace","insertBefore","displayName","aliases"]
}
