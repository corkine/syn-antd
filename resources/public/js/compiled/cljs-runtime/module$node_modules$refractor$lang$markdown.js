shadow$provide.module$node_modules$refractor$lang$markdown=function(global,process,require,module,exports,shadow$shims){function markdown(Prism$jscomp$0){(function(Prism){function createInline(pattern,starAlternative){pattern=pattern.replace(/<inner>/g,inner);starAlternative&&(pattern=pattern+"|"+pattern.replace(/_/g,"\\*"));return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+pattern+")")}var inner=/(?:\\.|[^\\\n\r]|(?:\r?\n|\r)(?!\r?\n|\r))/.source,tableCell=/(?:\\.|``.+?``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,
tableRow=/\|?__(?:\|__)+\|?(?:(?:\r?\n|\r)|$)/.source.replace(/__/g,tableCell),tableLine=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\r?\n|\r)/.source;Prism.languages.markdown=Prism.languages.extend("markup",{});Prism.languages.insertBefore("markdown","prolog",{blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+tableRow+tableLine+"(?:"+tableRow+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+tableRow+tableLine+")(?:"+tableRow+")*$"),lookbehind:!0,
inside:{"table-data":{pattern:RegExp(tableCell),inside:Prism.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+tableRow+")"+tableLine+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+tableRow+"$"),inside:{"table-header":{pattern:RegExp(tableCell),alias:"important",inside:Prism.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/(^[ \t]*(?:\r?\n|\r))(?: {4}|\t).+(?:(?:\r?\n|\r)(?: {4}|\t).+)*/m,lookbehind:!0,alias:"keyword"},
{pattern:/``.+?``|`[^`\r\n]+`/,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\r?\n|\r))[\s\S]+?(?=(?:\r?\n|\r)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\r?\n|\r)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#+.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source,
!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source,!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:createInline(/(~~?)(?:(?!~)<inner>)+?\2/.source,!1),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},
url:{pattern:createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[(?:(?!\])<inner>)+\])/.source,!1),lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(\[)[^\]]+(?=\]$)/,lookbehind:!0},content:{pattern:/(^!?\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},string:{pattern:/"(?:\\.|[^"\\])*"(?=\)$)/}}}});["url","bold","italic","strike"].forEach(function(token){["url","bold","italic","strike"].forEach(function(inside){token!==inside&&(Prism.languages.markdown[token].inside.content.inside[inside]=
Prism.languages.markdown[inside])})});Prism.hooks.add("after-tokenize",function(env){function walkTokens(tokens){if(tokens&&"string"!==typeof tokens)for(var i=0,l=tokens.length;i<l;i++){var token=tokens[i];if("code"!==token.type)walkTokens(token.content);else{var codeLang=token.content[1];token=token.content[3];codeLang&&token&&"code-language"===codeLang.type&&"code-block"===token.type&&"string"===typeof codeLang.content&&(codeLang="language-"+codeLang.content.trim().split(/\s+/)[0].toLowerCase(),
token.alias?"string"===typeof token.alias?token.alias=[token.alias,codeLang]:token.alias.push(codeLang):token.alias=[codeLang])}}}"markdown"!==env.language&&"md"!==env.language||walkTokens(env.tokens)});Prism.hooks.add("wrap",function(env){if("code-block"===env.type){for(var codeLang="",i=0,l=env.classes.length;i<l;i++){var match=/language-(.+)/.exec(env.classes[i]);if(match){codeLang=match[1];break}}if(i=Prism.languages[codeLang])l=env.content.value.replace(/&lt;/g,"\x3c").replace(/&amp;/g,"\x26"),
env.content=Prism.highlight(l,i,codeLang);else if(codeLang&&"none"!==codeLang&&Prism.plugins.autoloader){var id="md-"+(new Date).valueOf()+"-"+Math.floor(1E16*Math.random());env.attributes.id=id;Prism.plugins.autoloader.loadLanguages(codeLang,function(){var ele=document.getElementById(id);ele&&(ele.innerHTML=Prism.highlight(ele.textContent,Prism.languages[codeLang],codeLang))})}}});Prism.languages.md=Prism.languages.markdown})(Prism$jscomp$0)}module.exports=markdown;markdown.displayName="markdown";
markdown.aliases=["md"]}
//# sourceMappingURL=module$node_modules$refractor$lang$markdown.js.map
