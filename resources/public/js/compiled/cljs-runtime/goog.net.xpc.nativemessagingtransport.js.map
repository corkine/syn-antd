{
"version":3,
"file":"goog.net.xpc.nativemessagingtransport.js",
"lineCount":295,
"mappings":"AAqBAA,IAAAC,QAAA,CAAa,uCAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,YAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,cAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,qBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,aAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,0BAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,UAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,cAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,mCAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,wBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,6BAAb,CAAA;AAyBA;;;;;;;;;;AAAAF,IAAAG,IAAAC,IAAAC,yBAAA,GAAwCC,QAAQ,CAC5CC,OAD4C,EACnCC,YADmC,EACrBC,aADqB,EACNC,qBADM,EAE5CC,mBAF4C,CAEvB;AACvBX,MAAAG,IAAAC,IAAAC,yBAAAO,KAAA,CACI,IADJ,EACU,aADV,EACyBH,aADzB,CAAA;AAQA,wDAAA,IAAAI,SAAA,GAAgBN,OAAhB;AAOA,iCAAA,IAAAO,iBAAA,GAAwBH,mBAAxB,IAA+C,CAA/C;AACAX,MAAAe,QAAAC,OAAA,CAAoB,IAAAF,iBAApB,IAA6C,CAA7C,CAAA;AACAd,MAAAe,QAAAC,OAAA,CAAoB,IAAAF,iBAApB,IAA6C,CAA7C,CAAA;AAQA,iCAAA,IAAAG,cAAA,GAAqBT,YAArB,IAAqC,GAArC;AAOA,4FAAA,IAAAU,cAAA,GAAqB,IAAIlB,IAAAmB,OAAAC,aAAJ,CAA6B,IAA7B,CAArB;AAOA,sCAAA,IAAAC,4BAAA,GAAmC,IAAIrB,IAAAsB,MAAJ,CAAe,GAAf,EAAoB,IAAAC,UAAA,EAApB,CAAnC;AAOA,kCAAA,IAAAC,mBAAA,GAA0B,CAAC,CAACd,qBAA5B;AAOA,+CAAA,IAAAe,kBAAA,GAAyB,IAAIzB,IAAA0B,MAAAC,SAA7B;AAOA,+CAAA,IAAAC,cAAA,GAAqB,IAAI5B,IAAA0B,MAAAC,SAAzB;AAOA,+CAAA,IAAAE,WAAA,GAAkB,IAAI7B,IAAA0B,MAAAC,SAAtB;AAQA,iCAAA,IAAAG,YAAA,GAAmB9B,IAAAG,IAAAC,IAAA2B,gBAAA,CAA6B,EAA7B,CAAnB;AAQA,kCAAA,IAAAC,gBAAA,GAAuB,IAAvB;AAMA,MAAI,IAAAR,mBAAJ;AACE,QAAI,IAAAX,SAAAoB,QAAA,EAAJ,IAA+BjC,IAAAG,IAAAC,IAAA8B,qBAAAC,MAA/B;AAGE,UAAAN,WAAAO,cAAA,CAA8B,IAAAX,kBAA9B,CAAA;AAHF;AAOE,UAAAI,WAAAO,cAAA,CAA8B,IAAAR,cAA9B,CAAA;AAPF;AADF,QAUO;AAGL,QAAAC,WAAAO,cAAA,CAA8B,IAAAX,kBAA9B,CAAA;AACA,QAAI,IAAAX,iBAAJ,IAA6B,CAA7B;AACE,UAAAe,WAAAO,cAAA,CAA8B,IAAAR,cAA9B,CAAA;AADF;AAJK;AAQP,MAAAC,WAAAQ,YAAA,CAA4B,IAAAC,iBAA5B,EAAmD,IAAnD,CAAA;AACA,MAAAT,WAAAU,SAAA,CAAyB,IAAzB,CAAA;AAEA,MAAArB,cAAAsB,OAAA,CACI,IAAAnB,4BADJ,EACsCrB,IAAAsB,MAAAmB,KADtC,EAEI,IAAAC,uBAFJ,CAAA;AAIA1C,MAAA2C,IAAAC,KAAA,CACI5C,IAAAG,IAAAC,IAAAyC,OADJ,EACyB,qCADzB,GAEQ,qBAFR,GAE6B,IAAA/B,iBAF7B,GAEqD,yBAFrD,GAGQ,IAAAU,mBAHR,GAGkC,YAHlC,GAG8C,IAAAX,SAAAoB,QAAA,EAH9C,CAAA;AAnHuB,CAFzB;AA0HAjC,IAAA8C,SAAA,CAAc9C,IAAAG,IAAAC,IAAAC,yBAAd,EAAqDL,IAAAG,IAAAC,IAAA2C,UAArD,CAAA;AAUA,+BAAA/C,IAAAG,IAAAC,IAAAC,yBAAA2C,qBAAA,GAA6D,GAA7D;AAQA,gCAAAhD,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAC,qBAAA,GAAuE,IAAvE;AAQA,gCAAAlD,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAE,aAAA,GAA+D,KAA/D;AAQA,gCAAAnD,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAG,cAAA,GACIpD,IAAAG,IAAAC,IAAAiD,eAAAC,iBADJ;AASA,+BAAAtD,IAAAG,IAAAC,IAAAC,yBAAAkD,mBAAA,GAA2D,GAA3D;AAWA,yCAAAvD,IAAAG,IAAAC,IAAAC,yBAAAmD,aAAA,GAAqD,EAArD;AAQA,+BAAAxD,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAQ,aAAA,GAA+D,CAA/D;AAUA;;;;;AAAAzD,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAS,oBAAA,GAAsEC,QAAQ,CAC1EC,OAD0E,CACjE;AACX,SAAO,IAAAV,qBAAP,IAAoC,IAApC,IACI,IAAAA,qBADJ,IACiCU,OADjC;AADW,CADb;AAaA;;;;AAAA5D,IAAAG,IAAAC,IAAAC,yBAAAwD,YAAA,GAAoDC,QAAQ,CAACC,YAAD,CAAe;AACzE,MAAIC,MAAMhE,IAAAiE,OAAA,CAAYF,YAAZ,CAAV;AACA,MAAIG,QAAQlE,IAAAG,IAAAC,IAAAC,yBAAAmD,aAAA,CAAmDQ,GAAnD,CAAZ;AACA,MAAI,CAAChE,IAAAmE,SAAA,CAAcD,KAAd,CAAL;AACEA,SAAA,GAAQ,CAAR;AADF;AAGA,MAAIA,KAAJ,IAAa,CAAb;AAGElE,QAAAmB,OAAAqB,OAAA,CACIuB,YAAAK,YAAA,GAA2BL,YAA3B,GAA0CA,YAAAM,SAD9C,EAEI,SAFJ,EAEerE,IAAAG,IAAAC,IAAAC,yBAAAiE,iBAFf,EAGI,KAHJ,EAGWtE,IAAAG,IAAAC,IAAAC,yBAHX,CAAA;AAHF;AAQAL,MAAAG,IAAAC,IAAAC,yBAAAmD,aAAA,CAAmDQ,GAAnD,CAAA,GAA0DE,KAA1D,GAAkE,CAAlE;AAdyE,CAA3E;AAwBA;;;;;AAAAlE,IAAAG,IAAAC,IAAAC,yBAAAiE,iBAAA,GAAyDC,QAAQ,CAACC,MAAD,CAAS;AACxE,MAAIC,OAAOD,MAAAE,gBAAA,EAAAD,KAAX;AAEA,MAAI,CAACzE,IAAA2E,SAAA,CAAcF,IAAd,CAAL;AACE,WAAO,KAAP;AADF;AAIA,MAAIG,YAAYH,IAAAI,QAAA,CAAa,GAAb,CAAhB;AACA,MAAIC,eAAeL,IAAAI,QAAA,CAAa,GAAb,CAAnB;AAGA,MAAID,SAAJ,IAAkB,EAAlB,IAAuBE,YAAvB,IAAwC,EAAxC;AACE,WAAO,KAAP;AADF;AAIA,MAAIC,cAAcN,IAAAO,UAAA,CAAe,CAAf,EAAkBJ,SAAlB,CAAlB;AACA,MAAIK,UAAUR,IAAAO,UAAA,CAAeJ,SAAf,GAA2B,CAA3B,EAA8BE,YAA9B,CAAd;AACA,MAAII,UAAUT,IAAAO,UAAA,CAAeF,YAAf,GAA8B,CAA9B,CAAd;AAEA9E,MAAA2C,IAAAwC,KAAA,CACInF,IAAAG,IAAAC,IAAAyC,OADJ,EACyB,8BADzB,GACuDkC,WADvD,GAEQ,eAFR,GAEuBE,OAFvB,GAEiC,eAFjC,GAEgDC,OAFhD,CAAA;AAWA,MAAI3E,UAAUP,IAAAG,IAAAC,IAAAgF,SAAA,CAAsBL,WAAtB,CAAd;AACA,MAAIxE,OAAJ,CAAa;AACXA,WAAA8E,WAAA,CACIJ,OADJ,EACaC,OADb,EAEiCI,6BAAA,CAACd,MAAAE,gBAAA,EAAD,CAAAY,OAFjC,CAAA;AAGA,WAAO,IAAP;AAJW;AAOb,MAAIC,uBACAvF,IAAAG,IAAAC,IAAAC,yBAAAmF,uBAAA,CAA6DN,OAA7D,CAAA,CAAsE,CAAtE,CADJ;AAIA,OAAK,IAAIO,gBAAT,GAA6BzF,KAAAG,IAAAC,IAAAgF,SAA7B,CAAoD;AAClD,QAAIM,eAAe1F,IAAAG,IAAAC,IAAAgF,SAAA,CAAsBK,gBAAtB,CAAnB;AACA,QAAIC,YAAAzD,QAAA,EAAJ,IAA8BjC,IAAAG,IAAAC,IAAA8B,qBAAAC,MAA9B,IACI,CAACuD,YAAAC,YAAA,EADL,IAEIV,OAFJ,IAEejF,IAAAG,IAAAC,IAAAwF,mBAFf,KAGKL,oBAHL,IAG6BvF,IAAAG,IAAAC,IAAAyF,MAH7B,IAIKN,oBAJL,IAI6BvF,IAAAG,IAAAC,IAAA0F,YAJ7B,KAKIJ,YAAAK,0BAAA,CACIvB,MAAAE,gBAAA,EAAAY,OADJ,CALJ,CAM0C;AAQxCI,kBAAAM,4BAAA,CAAyCjB,WAAzC,CAAA;AACAW,kBAAAL,WAAA,CAAwBJ,OAAxB,EAAiCC,OAAjC,CAAA;AACA,aAAO,IAAP;AAVwC;AARQ;AAuBpDlF,MAAA2C,IAAAC,KAAA,CAAc5C,IAAAG,IAAAC,IAAAyC,OAAd,EAAmC,yCAAnC,CAAA;AACA,SAAO,KAAP;AAlEwE,CAA1E;AA2EA;;;;AAAA7C,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAgD,wBAAA,GACIC,QAAQ,CAAChB,OAAD,CAAU;AACpB,MAAIiB,iBACAnG,IAAAG,IAAAC,IAAAC,yBAAAmF,uBAAA,CAA6DN,OAA7D,CADJ;AAEA,MAAIK,uBAAuBY,cAAA,CAAe,CAAf,CAA3B;AACA,MAAIC,iBAAiBD,cAAA,CAAe,CAAf,CAArB;AACA,SAAQZ,oBAAR;AACE,SAAKvF,IAAAG,IAAAC,IAAAiG,WAAL;AACE,UAAAC,wBAAA,CAA6B,CAA7B,CAAA;AACA,UAAI,CAAC,IAAA7E,kBAAA8E,SAAA,EAAL;AACE,YAAA9E,kBAAAc,SAAA,CAAgC,IAAhC,CAAA;AADF;AAGA;AACF,SAAKvC,IAAAG,IAAAC,IAAAoG,gBAAL;AACE,UAAI,IAAA1F,iBAAJ,IAA6B,CAA7B,CAAgC;AAC9B,YAAAwF,wBAAA,CAA6B,CAA7B,CAAA;AACA,YAAI,CAAC,IAAA7E,kBAAA8E,SAAA,EAAL;AACE,cAAA9E,kBAAAc,SAAA,CAAgC,IAAhC,CAAA;AADF;AAF8B;AAMhC;AACF,SAAKvC,IAAAG,IAAAC,IAAAyF,MAAL;AACE,UAAAS,wBAAA,CAA6B,CAA7B,CAAA;AACA,UAAAG,qBAAA,CAA0B,CAA1B,CAAA;AACA;AACF,SAAKzG,IAAAG,IAAAC,IAAA0F,YAAL;AACE,UAAI,IAAAhF,iBAAJ,IAA6B,CAA7B,CAAgC;AAC9B,YAAI4F,0BAA0B,IAAAxD,qBAA9B;AACA,YAAAoD,wBAAA,CAA6B,CAA7B,CAAA;AACA,YAAAG,qBAAA,CAA0B,CAA1B,CAAA;AACA,aAAKC,uBAAL,IAAgC,CAAhC,IAAqC,IAAA1E,gBAArC,IAA6D,IAA7D,KACI,IAAAA,gBADJ,IAC4BoE,cAD5B,CAC4C;AAE1CpG,cAAA2C,IAAAC,KAAA,CACI5C,IAAAG,IAAAC,IAAAyC,OADJ,EAEI,yCAFJ,GAEgDuD,cAFhD,CAAA;AAGA,cAAAO,kBAAA,EAAA;AAL0C;AAO5C,YAAA3E,gBAAA,GAAuBoE,cAAvB;AAZ8B;AAchC;AAlCJ;AALoB,CADtB;AAkDA,gBAAApG,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAA0D,kBAAA,GAAoEC,QAAQ,EAAG;AAG7E5G,MAAAe,QAAAC,OAAA,CACI,EAAE,IAAAF,iBAAF,IAA2B,CAA3B,IAAgC,IAAAoC,qBAAhC,IAA6D,CAA7D,CADJ,CAAA;AAGA,MAAI,IAAApC,iBAAJ,IAA6B,CAA7B,IAAkC,IAAA4C,oBAAA,CAAyB,CAAzB,CAAlC,CAA+D;AAC7D,QAAIwB,UAAUlF,IAAAG,IAAAC,IAAA0F,YAAd;AACAZ,WAAA,IAAWlF,IAAAG,IAAAC,IAAAC,yBAAAkD,mBAAX;AACA2B,WAAA,IAAW,IAAApD,YAAX;AACA,QAAA+E,KAAA,CAAU7G,IAAAG,IAAAC,IAAAwF,mBAAV,EAA2CV,OAA3C,CAAA;AAJ6D;AAW/D,MAAI,IAAAxB,oBAAA,CAAyB,CAAzB,CAAJ;AACE,QAAAmD,KAAA,CAAU7G,IAAAG,IAAAC,IAAAwF,mBAAV,EAA2C5F,IAAAG,IAAAC,IAAAyF,MAA3C,CAAA;AADF;AAjB6E,CAA/E;AA8BA;;;;AAAA7F,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAwD,qBAAA,GAAuEK,QAAQ,CAC3EC,eAD2E,CAC1D;AACnB/G,MAAAe,QAAAC,OAAA,CACI,IAAAF,iBADJ,IAC6B,CAD7B,IACkCiG,eADlC,IACqD,CADrD,EAEI,kDAFJ,CAAA;AAGA,MAAI,IAAAjG,iBAAJ,IAA6B,CAA7B,IAAkC,IAAA4C,oBAAA,CAAyB,CAAzB,CAAlC,IACIqD,eADJ,IACuB,CADvB;AAEE,QAAAF,KAAA,CAAU7G,IAAAG,IAAAC,IAAAwF,mBAAV,EAA2C5F,IAAAG,IAAAC,IAAAoG,gBAA3C,CAAA;AAFF;AAGO,QAAI,IAAA9C,oBAAA,CAAyB,CAAzB,CAAJ,IAAmCqD,eAAnC,IAAsD,CAAtD;AACL,UAAAF,KAAA,CAAU7G,IAAAG,IAAAC,IAAAwF,mBAAV,EAA2C5F,IAAAG,IAAAC,IAAAiG,WAA3C,CAAA;AADK;AAGL;AAHK;AAHP;AASA,MAAI,CAAC,IAAAzE,cAAA2E,SAAA,EAAL;AACE,QAAA3E,cAAAW,SAAA,CAA4B,IAA5B,CAAA;AADF;AAbmB,CADrB;AA0BA;;;;AAAAvC,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAqD,wBAAA,GACIU,QAAQ,CAACpD,OAAD,CAAU;AACpB,MAAIA,OAAJ,GAAc,IAAAV,qBAAd;AACE,QAAAA,qBAAA,GAA4BU,OAA5B;AADF;AAGA,MAAI,IAAAV,qBAAJ,IAAiC,CAAjC,CAAoC;AAClC,QAAI,CAAC,IAAAtB,cAAA2E,SAAA,EAAL,IAAsC,CAAC,IAAA/E,mBAAvC;AACE,UAAAI,cAAAW,SAAA,CAA4B,IAA5B,CAAA;AADF;AAGA,QAAAP,gBAAA,GAAuB,IAAvB;AAJkC;AAJhB,CADtB;AAkBA,iBAAAhC,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAgE,QAAA,GAA0DC,QAAQ,EAAG;AACnElH,MAAAG,IAAAC,IAAAC,yBAAAwD,YAAA,CAAkD,IAAAtC,UAAA,EAAlD,CAAA;AACA,MAAA4B,aAAA,GAAoB,IAApB;AACA,MAAAT,uBAAA,EAAA;AAHmE,CAArE;AAgBA,gBAAA1C,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAP,uBAAA,GACIyE,QAAQ,EAAG;AAGb,MAAIC,aACA,IAAAvG,SAAAoB,QAAA,EADAmF,IAC2BpH,IAAAG,IAAAC,IAAA8B,qBAAAmF,MAD/B;AAEA,MAAK,IAAA7F,mBAAL,IAAgC4F,UAAhC,IAA+C,IAAAvG,SAAA8E,YAAA,EAA/C,IACI,IAAA2B,WAAA,EADJ,CACuB;AACrB,QAAAjG,4BAAAkG,KAAA,EAAA;AACA;AAFqB;AAIvB,MAAAlG,4BAAAmG,MAAA,EAAA;AACA,MAAAb,kBAAA,EAAA;AAXa,CADf;AAuBA;;;;;AAAA3G,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAA4D,KAAA,GAAuDY,QAAQ,CAC3DxC,OAD2D,EAClDC,OADkD,CACzC;AACpB,MAAIwC,MAAM,IAAA7G,SAAA8G,oBAAA,EAAV;AACA,MAAI,CAACD,GAAL,CAAU;AACR1H,QAAA2C,IAAAwC,KAAA,CAAcnF,IAAAG,IAAAC,IAAAyC,OAAd,EAAmC,0BAAnC,CAAA;AACA;AAFQ;AAKV,MAAAgE,KAAA,GAAYe,QAAQ,CAAC3C,OAAD,EAAUC,OAAV,CAAmB;AAOrC,QAAI2C,YAAY,IAAhB;AACA,QAAI9C,cAAc,IAAAlE,SAAAiH,KAAlB;AACA,QAAIC,cAAcA,QAAQ,EAAG;AAC3BF,eAAApE,aAAA,GAAyB,CAAzB;AAEA,SAAI;AAKF,YAAIuE,MAAMN,GAAAtD,YAAA,GAAkBsD,GAAlB,GAAwBA,GAAArD,SAAlC;AACA,YAAI,CAAC2D,GAAA5D,YAAL,CAAsB;AACpBpE,cAAA2C,IAAAsF,QAAA,CACIjI,IAAAG,IAAAC,IAAAyC,OADJ,EACyB,0CADzB,CAAA;AAEA;AAHoB;AAMtBmF,WAAA5D,YAAA,CACIW,WADJ,GACkB,GADlB,GACwBE,OADxB,GACkC,GADlC,GACwCC,OADxC,EAEI2C,SAAA5G,cAFJ,CAAA;AAGAjB,YAAA2C,IAAAwC,KAAA,CACInF,IAAAG,IAAAC,IAAAyC,OADJ,EACyB,qBADzB,GAC8CoC,OAD9C,GACwD,cADxD,GAEQC,OAFR,GAEkB,kBAFlB,GAEoC2C,SAAA5G,cAFpC,CAAA;AAfE,OAkBF,QAAOiH,KAAP,CAAc;AAIdlI,YAAA2C,IAAAsF,QAAA,CACIjI,IAAAG,IAAAC,IAAAyC,OADJ,EACyB,yCADzB,EAEIqF,KAFJ,CAAA;AAJc;AArBW,KAA7B;AA8BA,QAAAzE,aAAA,GAAoBzD,IAAAsB,MAAA6G,SAAA,CAAoBJ,WAApB,EAAiC,CAAjC,CAApB;AAvCqC,GAAvC;AAyCA,MAAAlB,KAAA,CAAU5B,OAAV,EAAmBC,OAAnB,CAAA;AAhDoB,CADtB;AA2DA,gBAAAlF,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAX,iBAAA,GAAmE8F,QAAQ,EAAG;AAC5E,MAAIC,QAAS,IAAAvH,iBAAD,IAA0B,CAA1B,IAA+B,IAAAoC,qBAA/B,IAA4D,CAA5D,GACRlD,IAAAG,IAAAC,IAAAC,yBAAA2C,qBADQ,GAERsF,SAFJ;AAGA,MAAAzH,SAAA0H,gBAAA,CAA8BF,KAA9B,CAAA;AAJ4E,CAA9E;AASA,iBAAArI,IAAAG,IAAAC,IAAAC,yBAAA4C,UAAAuF,gBAAA,GAAkEC,QAAQ,EAAG;AAC3E,MAAI,IAAAtF,aAAJ,CAAuB;AACrB,QAAIY,eAAe,IAAAxC,UAAA,EAAnB;AACA,QAAIyC,MAAMhE,IAAAiE,OAAA,CAAYF,YAAZ,CAAV;AACA,QAAIG,QAAQlE,IAAAG,IAAAC,IAAAC,yBAAAmD,aAAA,CAAmDQ,GAAnD,CAAZ;AACAhE,QAAAG,IAAAC,IAAAC,yBAAAmD,aAAA,CAAmDQ,GAAnD,CAAA,GAA0DE,KAA1D,GAAkE,CAAlE;AACA,QAAIA,KAAJ,IAAa,CAAb;AACElE,UAAAmB,OAAAuH,SAAA,CACI3E,YAAAK,YAAA,GAA2BL,YAA3B,GAA0CA,YAAAM,SAD9C,EAEI,SAFJ,EAEerE,IAAAG,IAAAC,IAAAC,yBAAAiE,iBAFf,EAGI,KAHJ,EAGWtE,IAAAG,IAAAC,IAAAC,yBAHX,CAAA;AADF;AALqB;AAavB,MAAI,IAAAoD,aAAJ,CAAuB;AACrBzD,QAAAsB,MAAAqH,MAAA,CAAiB,IAAAlF,aAAjB,CAAA;AACA,QAAAA,aAAA,GAAoB,CAApB;AAFqB;AAKvBzD,MAAA4I,QAAA,CAAa,IAAA1H,cAAb,CAAA;AACA,SAAO,IAAAA,cAAP;AAEAlB,MAAA4I,QAAA,CAAa,IAAAvH,4BAAb,CAAA;AACA,SAAO,IAAAA,4BAAP;AAEA,MAAAI,kBAAAoH,OAAA,EAAA;AACA,SAAO,IAAApH,kBAAP;AACA,MAAAG,cAAAiH,OAAA,EAAA;AACA,SAAO,IAAAjH,cAAP;AACA,MAAAC,WAAAgH,OAAA,EAAA;AACA,SAAO,IAAAhH,WAAP;AAKA,SAAO,IAAAgF,KAAP;AAEA7G,MAAAG,IAAAC,IAAAC,yBAAAO,KAAA,CAA2C,IAA3C,EAAiD,iBAAjD,CAAA;AArC2E,CAA7E;AAmDA;;;;;AAAAZ,IAAAG,IAAAC,IAAAC,yBAAAmF,uBAAA,GAA+DsD,QAAQ,CACnE5D,OADmE,CAC1D;AACX,MAAIiB,gDAAgD,CAChDjB,OAAA6D,MAAA,CAAc/I,IAAAG,IAAAC,IAAAC,yBAAAkD,mBAAd,CADgD,CAApD;AAEA4C,gBAAA,CAAe,CAAf,CAAA,GAAoBA,cAAA,CAAe,CAAf,CAApB,IAAyC,IAAzC;AACA,SAAOA,cAAP;AAJW,CADb;;",
"sources":["goog/net/xpc/nativemessagingtransport.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Contains the class which uses native messaging\n * facilities for cross domain communication.\n *\n */\n\n\ngoog.provide('goog.net.xpc.NativeMessagingTransport');\n\ngoog.require('goog.Timer');\ngoog.require('goog.asserts');\ngoog.require('goog.async.Deferred');\ngoog.require('goog.events');\ngoog.require('goog.events.EventHandler');\ngoog.require('goog.log');\ngoog.require('goog.net.xpc');\ngoog.require('goog.net.xpc.CrossPageChannelRole');\ngoog.require('goog.net.xpc.Transport');\ngoog.require('goog.net.xpc.TransportTypes');\n\n\n\n/**\n * The native messaging transport\n *\n * Uses document.postMessage() to send messages to other documents.\n * Receiving is done by listening on 'message'-events on the document.\n *\n * @param {goog.net.xpc.CrossPageChannel} channel The channel this\n *     transport belongs to.\n * @param {string} peerHostname The hostname (protocol, domain, and port) of the\n *     peer.\n * @param {goog.dom.DomHelper=} opt_domHelper The dom helper to use for\n *     finding the correct window/document.\n * @param {boolean=} opt_oneSidedHandshake If this is true, only the outer\n *     transport sends a SETUP message and expects a SETUP_ACK.  The inner\n *     transport goes connected when it receives the SETUP.\n * @param {number=} opt_protocolVersion Which version of its setup protocol the\n *     transport should use.  The default is '2'.\n * @constructor\n * @extends {goog.net.xpc.Transport}\n * @final\n */\ngoog.net.xpc.NativeMessagingTransport = function(\n    channel, peerHostname, opt_domHelper, opt_oneSidedHandshake,\n    opt_protocolVersion) {\n  goog.net.xpc.NativeMessagingTransport.base(\n      this, 'constructor', opt_domHelper);\n\n  /**\n   * The channel this transport belongs to.\n   * @type {goog.net.xpc.CrossPageChannel}\n   * @private\n   */\n  this.channel_ = channel;\n\n  /**\n   * Which version of the transport's protocol should be used.\n   * @type {number}\n   * @private\n   */\n  this.protocolVersion_ = opt_protocolVersion || 2;\n  goog.asserts.assert(this.protocolVersion_ >= 1);\n  goog.asserts.assert(this.protocolVersion_ <= 2);\n\n  /**\n   * The hostname of the peer. This parameterizes all calls to postMessage, and\n   * should contain the precise protocol, domain, and port of the peer window.\n   * @type {string}\n   * @private\n   */\n  this.peerHostname_ = peerHostname || '*';\n\n  /**\n   * The event handler.\n   * @type {!goog.events.EventHandler<!goog.net.xpc.NativeMessagingTransport>}\n   * @private\n   */\n  this.eventHandler_ = new goog.events.EventHandler(this);\n\n  /**\n   * Timer for connection reattempts.\n   * @type {!goog.Timer}\n   * @private\n   */\n  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());\n\n  /**\n   * Whether one-sided handshakes are enabled.\n   * @type {boolean}\n   * @private\n   */\n  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;\n\n  /**\n   * Fires once we've received our SETUP_ACK message.\n   * @type {!goog.async.Deferred}\n   * @private\n   */\n  this.setupAckReceived_ = new goog.async.Deferred();\n\n  /**\n   * Fires once we've sent our SETUP_ACK message.\n   * @type {!goog.async.Deferred}\n   * @private\n   */\n  this.setupAckSent_ = new goog.async.Deferred();\n\n  /**\n   * Fires once we're marked connected.\n   * @type {!goog.async.Deferred}\n   * @private\n   */\n  this.connected_ = new goog.async.Deferred();\n\n  /**\n   * The unique ID of this side of the connection. Used to determine when a peer\n   * is reloaded.\n   * @type {string}\n   * @private\n   */\n  this.endpointId_ = goog.net.xpc.getRandomString(10);\n\n  /**\n   * The unique ID of the peer. If we get a message from a peer with an ID we\n   * don't expect, we reset the connection.\n   * @type {?string}\n   * @private\n   */\n  this.peerEndpointId_ = null;\n\n  // We don't want to mark ourselves connected until we have sent whatever\n  // message will cause our counterpart in the other frame to also declare\n  // itself connected, if there is such a message.  Otherwise we risk a user\n  // message being sent in advance of that message, and it being discarded.\n  if (this.oneSidedHandshake_) {\n    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {\n      // One sided handshake, inner frame:\n      // SETUP_ACK must be received.\n      this.connected_.awaitDeferred(this.setupAckReceived_);\n    } else {\n      // One sided handshake, outer frame:\n      // SETUP_ACK must be sent.\n      this.connected_.awaitDeferred(this.setupAckSent_);\n    }\n  } else {\n    // Two sided handshake:\n    // SETUP_ACK has to have been received, and sent.\n    this.connected_.awaitDeferred(this.setupAckReceived_);\n    if (this.protocolVersion_ == 2) {\n      this.connected_.awaitDeferred(this.setupAckSent_);\n    }\n  }\n  this.connected_.addCallback(this.notifyConnected_, this);\n  this.connected_.callback(true);\n\n  this.eventHandler_.listen(\n      this.maybeAttemptToConnectTimer_, goog.Timer.TICK,\n      this.maybeAttemptToConnect_);\n\n  goog.log.info(\n      goog.net.xpc.logger, 'NativeMessagingTransport created.  ' +\n          'protocolVersion=' + this.protocolVersion_ + ', oneSidedHandshake=' +\n          this.oneSidedHandshake_ + ', role=' + this.channel_.getRole());\n};\ngoog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);\n\n\n/**\n * Length of the delay in milliseconds between the channel being connected and\n * the connection callback being called, in cases where coverage of timing flaws\n * is required.\n * @type {number}\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;\n\n\n/**\n * Current determination of peer's protocol version, or null for unknown.\n * @type {?number}\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;\n\n\n/**\n * Flag indicating if this instance of the transport has been initialized.\n * @type {boolean}\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;\n\n\n/**\n * The transport type.\n * @type {number}\n * @override\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.transportType =\n    goog.net.xpc.TransportTypes.NATIVE_MESSAGING;\n\n\n/**\n * The delimiter used for transport service messages.\n * @type {string}\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ',';\n\n\n/**\n * Tracks the number of NativeMessagingTransport channels that have been\n * initialized but not disposed yet in a map keyed by the UID of the window\n * object.  This allows for multiple windows to be initiallized and listening\n * for messages.\n * @type {Object<number>}\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.activeCount_ = {};\n\n\n/**\n * Id of a timer user during postMessage sends.\n * @type {number}\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.sendTimerId_ = 0;\n\n\n/**\n * Checks whether the peer transport protocol version could be as indicated.\n * @param {number} version The version to check for.\n * @return {boolean} Whether the peer transport protocol version is as\n *     indicated, or null.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(\n    version) {\n  return this.peerProtocolVersion_ == null ||\n      this.peerProtocolVersion_ == version;\n};\n\n\n/**\n * Initializes this transport. Registers a listener for 'message'-events\n * on the document.\n * @param {Window} listenWindow The window to listen to events on.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {\n  var uid = goog.getUid(listenWindow);\n  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];\n  if (!goog.isNumber(value)) {\n    value = 0;\n  }\n  if (value == 0) {\n    // Listen for message-events. These are fired on window in FF3 and on\n    // document in Opera.\n    goog.events.listen(\n        listenWindow.postMessage ? listenWindow : listenWindow.document,\n        'message', goog.net.xpc.NativeMessagingTransport.messageReceived_,\n        false, goog.net.xpc.NativeMessagingTransport);\n  }\n  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;\n};\n\n\n/**\n * Processes an incoming message-event.\n * @param {goog.events.BrowserEvent} msgEvt The message event.\n * @return {boolean} True if message was successfully delivered to a channel.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {\n  var data = msgEvt.getBrowserEvent().data;\n\n  if (!goog.isString(data)) {\n    return false;\n  }\n\n  var headDelim = data.indexOf('|');\n  var serviceDelim = data.indexOf(':');\n\n  // make sure we got something reasonable\n  if (headDelim == -1 || serviceDelim == -1) {\n    return false;\n  }\n\n  var channelName = data.substring(0, headDelim);\n  var service = data.substring(headDelim + 1, serviceDelim);\n  var payload = data.substring(serviceDelim + 1);\n\n  goog.log.fine(\n      goog.net.xpc.logger, 'messageReceived: channel=' + channelName +\n          ', service=' + service + ', payload=' + payload);\n\n  // Attempt to deliver message to the channel. Keep in mind that it may not\n  // exist for several reasons, including but not limited to:\n  //  - a malformed message\n  //  - the channel simply has not been created\n  //  - channel was created in a different namespace\n  //  - message was sent to the wrong window\n  //  - channel has become stale (e.g. caching iframes and back clicks)\n  var channel = goog.net.xpc.channels[channelName];\n  if (channel) {\n    channel.xpcDeliver(\n        service, payload,\n        /** @type {!MessageEvent} */ (msgEvt.getBrowserEvent()).origin);\n    return true;\n  }\n\n  var transportMessageType =\n      goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];\n\n  // Check if there are any stale channel names that can be updated.\n  for (var staleChannelName in goog.net.xpc.channels) {\n    var staleChannel = goog.net.xpc.channels[staleChannelName];\n    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER &&\n        !staleChannel.isConnected() &&\n        service == goog.net.xpc.TRANSPORT_SERVICE_ &&\n        (transportMessageType == goog.net.xpc.SETUP ||\n         transportMessageType == goog.net.xpc.SETUP_NTPV2) &&\n        staleChannel.isMessageOriginAcceptable(\n            msgEvt.getBrowserEvent().origin)) {\n      // Inner peer received SETUP message but channel names did not match.\n      // Start using the channel name sent from outer peer. The channel name\n      // of the inner peer can easily become out of date, as iframe's and their\n      // JS state get cached in many browsers upon page reload or history\n      // navigation (particularly Firefox 1.5+). We can trust the outer peer,\n      // since we only accept postMessage messages from the same hostname that\n      // originally setup the channel.\n      staleChannel.updateChannelNameAndCatalog(channelName);\n      staleChannel.xpcDeliver(service, payload);\n      return true;\n    }\n  }\n\n  // Failed to find a channel to deliver this message to, so simply ignore it.\n  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored\"');\n  return false;\n};\n\n\n/**\n * Handles transport service messages.\n * @param {string} payload The message content.\n * @override\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler =\n    function(payload) {\n  var transportParts =\n      goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);\n  var transportMessageType = transportParts[0];\n  var peerEndpointId = transportParts[1];\n  switch (transportMessageType) {\n    case goog.net.xpc.SETUP_ACK_:\n      this.setPeerProtocolVersion_(1);\n      if (!this.setupAckReceived_.hasFired()) {\n        this.setupAckReceived_.callback(true);\n      }\n      break;\n    case goog.net.xpc.SETUP_ACK_NTPV2:\n      if (this.protocolVersion_ == 2) {\n        this.setPeerProtocolVersion_(2);\n        if (!this.setupAckReceived_.hasFired()) {\n          this.setupAckReceived_.callback(true);\n        }\n      }\n      break;\n    case goog.net.xpc.SETUP:\n      this.setPeerProtocolVersion_(1);\n      this.sendSetupAckMessage_(1);\n      break;\n    case goog.net.xpc.SETUP_NTPV2:\n      if (this.protocolVersion_ == 2) {\n        var prevPeerProtocolVersion = this.peerProtocolVersion_;\n        this.setPeerProtocolVersion_(2);\n        this.sendSetupAckMessage_(2);\n        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) &&\n            this.peerEndpointId_ != peerEndpointId) {\n          // Send a new SETUP message since the peer has been replaced.\n          goog.log.info(\n              goog.net.xpc.logger,\n              'Sending SETUP and changing peer ID to: ' + peerEndpointId);\n          this.sendSetupMessage_();\n        }\n        this.peerEndpointId_ = peerEndpointId;\n      }\n      break;\n  }\n};\n\n\n/**\n * Sends a SETUP transport service message of the correct protocol number for\n * our current situation.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {\n  // 'real' (legacy) v1 transports don't know about there being v2 ones out\n  // there, and we shouldn't either.\n  goog.asserts.assert(\n      !(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));\n\n  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {\n    var payload = goog.net.xpc.SETUP_NTPV2;\n    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;\n    payload += this.endpointId_;\n    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);\n  }\n\n  // For backward compatibility reasons, the V1 SETUP message can be sent by\n  // both V1 and V2 transports.  Once a V2 transport has 'heard' another V2\n  // transport it starts ignoring V1 messages, so the V2 message must be sent\n  // first.\n  if (this.couldPeerVersionBe_(1)) {\n    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);\n  }\n};\n\n\n/**\n * Sends a SETUP_ACK transport service message of the correct protocol number\n * for our current situation.\n * @param {number} protocolVersion The protocol version of the SETUP message\n *     which gave rise to this ack message.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(\n    protocolVersion) {\n  goog.asserts.assert(\n      this.protocolVersion_ != 1 || protocolVersion != 2,\n      'Shouldn\\'t try to send a v2 setup ack in v1 mode.');\n  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) &&\n      protocolVersion == 2) {\n    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);\n  } else if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {\n    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);\n  } else {\n    return;\n  }\n\n  if (!this.setupAckSent_.hasFired()) {\n    this.setupAckSent_.callback(true);\n  }\n};\n\n\n/**\n * Attempts to set the peer protocol number.  Downgrades from 2 to 1 are not\n * permitted.\n * @param {number} version The new protocol number.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ =\n    function(version) {\n  if (version > this.peerProtocolVersion_) {\n    this.peerProtocolVersion_ = version;\n  }\n  if (this.peerProtocolVersion_ == 1) {\n    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {\n      this.setupAckSent_.callback(true);\n    }\n    this.peerEndpointId_ = null;\n  }\n};\n\n\n/**\n * Connects this transport.\n * @override\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.connect = function() {\n  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());\n  this.initialized_ = true;\n  this.maybeAttemptToConnect_();\n};\n\n\n/**\n * Connects to other peer. In the case of the outer peer, the setup messages are\n * likely sent before the inner peer is ready to receive them. Therefore, this\n * function will continue trying to send the SETUP message until the inner peer\n * responds. In the case of the inner peer, it will occasionally have its\n * channel name fall out of sync with the outer peer, particularly during\n * soft-reloads and history navigations.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ =\n    function() {\n  // In a one-sided handshake, the outer frame does not send a SETUP message,\n  // but the inner frame does.\n  var outerFrame =\n      this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;\n  if ((this.oneSidedHandshake_ && outerFrame) || this.channel_.isConnected() ||\n      this.isDisposed()) {\n    this.maybeAttemptToConnectTimer_.stop();\n    return;\n  }\n  this.maybeAttemptToConnectTimer_.start();\n  this.sendSetupMessage_();\n};\n\n\n/**\n * Sends a message.\n * @param {string} service The name off the service the message is to be\n * delivered to.\n * @param {string} payload The message content.\n * @override\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.send = function(\n    service, payload) {\n  var win = this.channel_.getPeerWindowObject();\n  if (!win) {\n    goog.log.fine(goog.net.xpc.logger, 'send(): window not ready');\n    return;\n  }\n\n  this.send = function(service, payload) {\n    // In IE8 (and perhaps elsewhere), it seems like postMessage is sometimes\n    // implemented as a synchronous call.  That is, calling it synchronously\n    // calls whatever listeners it has, and control is not returned to the\n    // calling thread until those listeners are run.  This produces different\n    // ordering to all other browsers, and breaks this protocol.  This timer\n    // callback is introduced to produce standard behavior across all browsers.\n    var transport = this;\n    var channelName = this.channel_.name;\n    var sendFunctor = function() {\n      transport.sendTimerId_ = 0;\n\n      try {\n        // postMessage is a method of the window object, except in some\n        // versions of Opera, where it is a method of the document object.  It\n        // also seems that the appearance of postMessage on the peer window\n        // object can sometimes be delayed.\n        var obj = win.postMessage ? win : win.document;\n        if (!obj.postMessage) {\n          goog.log.warning(\n              goog.net.xpc.logger, 'Peer window had no postMessage function.');\n          return;\n        }\n\n        obj.postMessage(\n            channelName + '|' + service + ':' + payload,\n            transport.peerHostname_);\n        goog.log.fine(\n            goog.net.xpc.logger, 'send(): service=' + service + ' payload=' +\n                payload + ' to hostname=' + transport.peerHostname_);\n      } catch (error) {\n        // There is some evidence (not totally convincing) that postMessage can\n        // be missing or throw errors during a narrow timing window during\n        // startup.  This protects against that.\n        goog.log.warning(\n            goog.net.xpc.logger, 'Error performing postMessage, ignoring.',\n            error);\n      }\n    };\n    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);\n  };\n  this.send(service, payload);\n};\n\n\n/**\n * Notify the channel that this transport is connected.  If either transport is\n * protocol v1, a short delay is required to paper over timing vulnerabilities\n * in that protocol version.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {\n  var delay = (this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1) ?\n      goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ :\n      undefined;\n  this.channel_.notifyConnected(delay);\n};\n\n\n/** @override */\ngoog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {\n  if (this.initialized_) {\n    var listenWindow = this.getWindow();\n    var uid = goog.getUid(listenWindow);\n    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];\n    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;\n    if (value == 1) {\n      goog.events.unlisten(\n          listenWindow.postMessage ? listenWindow : listenWindow.document,\n          'message', goog.net.xpc.NativeMessagingTransport.messageReceived_,\n          false, goog.net.xpc.NativeMessagingTransport);\n    }\n  }\n\n  if (this.sendTimerId_) {\n    goog.Timer.clear(this.sendTimerId_);\n    this.sendTimerId_ = 0;\n  }\n\n  goog.dispose(this.eventHandler_);\n  delete this.eventHandler_;\n\n  goog.dispose(this.maybeAttemptToConnectTimer_);\n  delete this.maybeAttemptToConnectTimer_;\n\n  this.setupAckReceived_.cancel();\n  delete this.setupAckReceived_;\n  this.setupAckSent_.cancel();\n  delete this.setupAckSent_;\n  this.connected_.cancel();\n  delete this.connected_;\n\n  // Cleaning up this.send as it is an instance method, created in\n  // goog.net.xpc.NativeMessagingTransport.prototype.send and has a closure over\n  // this.channel_.peerWindowObject_.\n  delete this.send;\n\n  goog.net.xpc.NativeMessagingTransport.base(this, 'disposeInternal');\n};\n\n\n/**\n * Parse a transport service payload message.  For v1, it is simply expected to\n * be 'SETUP' or 'SETUP_ACK'.  For v2, an example setup message is\n * 'SETUP_NTPV2,abc123', where the second part is the endpoint id.  The v2 setup\n * ack message is simply 'SETUP_ACK_NTPV2'.\n * @param {string} payload The payload.\n * @return {!Array<?string>} An array with the message type as the first member\n *     and the endpoint id as the second, if one was sent, or null otherwise.\n * @private\n */\ngoog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(\n    payload) {\n  var transportParts = /** @type {!Array<?string>} */ (\n      payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));\n  transportParts[1] = transportParts[1] || null;\n  return transportParts;\n};\n"],
"names":["goog","provide","require","net","xpc","NativeMessagingTransport","goog.net.xpc.NativeMessagingTransport","channel","peerHostname","opt_domHelper","opt_oneSidedHandshake","opt_protocolVersion","base","channel_","protocolVersion_","asserts","assert","peerHostname_","eventHandler_","events","EventHandler","maybeAttemptToConnectTimer_","Timer","getWindow","oneSidedHandshake_","setupAckReceived_","async","Deferred","setupAckSent_","connected_","endpointId_","getRandomString","peerEndpointId_","getRole","CrossPageChannelRole","INNER","awaitDeferred","addCallback","notifyConnected_","callback","listen","TICK","maybeAttemptToConnect_","log","info","logger","inherits","Transport","CONNECTION_DELAY_MS_","prototype","peerProtocolVersion_","initialized_","transportType","TransportTypes","NATIVE_MESSAGING","MESSAGE_DELIMITER_","activeCount_","sendTimerId_","couldPeerVersionBe_","goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_","version","initialize_","goog.net.xpc.NativeMessagingTransport.initialize_","listenWindow","uid","getUid","value","isNumber","postMessage","document","messageReceived_","goog.net.xpc.NativeMessagingTransport.messageReceived_","msgEvt","data","getBrowserEvent","isString","headDelim","indexOf","serviceDelim","channelName","substring","service","payload","fine","channels","xpcDeliver","origin","transportMessageType","parseTransportPayload_","staleChannelName","staleChannel","isConnected","TRANSPORT_SERVICE_","SETUP","SETUP_NTPV2","isMessageOriginAcceptable","updateChannelNameAndCatalog","transportServiceHandler","goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler","transportParts","peerEndpointId","SETUP_ACK_","setPeerProtocolVersion_","hasFired","SETUP_ACK_NTPV2","sendSetupAckMessage_","prevPeerProtocolVersion","sendSetupMessage_","goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_","send","goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_","protocolVersion","goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_","connect","goog.net.xpc.NativeMessagingTransport.prototype.connect","goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_","outerFrame","OUTER","isDisposed","stop","start","goog.net.xpc.NativeMessagingTransport.prototype.send","win","getPeerWindowObject","this.send","transport","name","sendFunctor","obj","warning","error","callOnce","goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_","delay","undefined","notifyConnected","disposeInternal","goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal","unlisten","clear","dispose","cancel","goog.net.xpc.NativeMessagingTransport.parseTransportPayload_","split"]
}
