{
"version":3,
"file":"module$node_modules$comma_separated_tokens$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAGlID,OAAAE,MAAA,CAQAA,QAAc,CAACC,KAAD,CAAQ,CACpB,IAAIC,OAAS,EACTC,MAAAA,CAAQC,MAAA,CAAOH,KAAP,EAAgBI,KAAhB,CAMZ,KALA,IAAIC,MAAQH,KAAAI,QAAA,CAAcC,KAAd,CAAZ,CACIC,UAAY,CADhB,CAEIC,IAAM,CAAA,CAGV,CAAO,CAACA,GAAR,CAAA,CACiB,EAYf,GAZIJ,KAYJ,GAXEA,KACA,CADQH,KAAAQ,OACR,CAAAD,GAAA,CAAM,CAAA,CAUR,EAPAE,SAOA,CAPMT,KAAAU,MAAA,CAAYJ,SAAZ,CAAuBH,KAAvB,CAAAQ,KAAA,EAON,CALIF,CAAAA,SAKJ,EALYF,GAKZ,EAJER,MAAAa,KAAA,CAAYH,SAAZ,CAIF,CADAH,SACA,CADYH,KACZ,CADoB,CACpB,CAAAA,KAAA,CAAQH,KAAAI,QAAA,CAAcC,KAAd,CAAqBC,SAArB,CAGV,OAAOP,OAxBa,CAPtBJ,QAAAkB,UAAA,CAqCAA,QAAkB,CAACd,MAAD,CAASe,OAAT,CAAkB,CAClC,IAAIC;AAAWD,OAAXC,EAAsB,EACtBC,QAAAA,CAA4B,CAAA,CAArB,GAAAD,QAAAE,QAAA,CAA6Bf,KAA7B,CAAqCgB,KAC5CC,SAAAA,CAAQJ,QAAAK,SAAA,CAAoBF,KAApB,CAA4BhB,KAGpCH,OAAA,CAAOA,MAAAS,OAAP,CAAuB,CAAvB,CAAJ,GAAkCN,KAAlC,GACEH,MADF,CACWA,MAAAsB,OAAA,CAAcnB,KAAd,CADX,CAIA,OAAOH,OAAAuB,KAAA,CAAYH,QAAZ,CAAoBd,KAApB,CAA4BW,OAA5B,CAAAL,KAAA,EAV2B,CAnCpC,KAAIN,MAAQ,GAAZ,CACIa,MAAQ,GADZ,CAEIhB,MAAQ,EARsH;",
"sources":["node_modules/comma-separated-tokens/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$comma_separated_tokens$index\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nexports.parse = parse\nexports.stringify = stringify\n\nvar comma = ','\nvar space = ' '\nvar empty = ''\n\n// Parse comma-separated tokens to an array.\nfunction parse(value) {\n  var values = []\n  var input = String(value || empty)\n  var index = input.indexOf(comma)\n  var lastIndex = 0\n  var end = false\n  var val\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    val = input.slice(lastIndex, index).trim()\n\n    if (val || !end) {\n      values.push(val)\n    }\n\n    lastIndex = index + 1\n    index = input.indexOf(comma, lastIndex)\n  }\n\n  return values\n}\n\n// Compile an array to comma-separated tokens.\n// `options.padLeft` (default: `true`) pads a space left of each token, and\n// `options.padRight` (default: `false`) pads a space to the right of each token.\nfunction stringify(values, options) {\n  var settings = options || {}\n  var left = settings.padLeft === false ? empty : space\n  var right = settings.padRight ? space : empty\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === empty) {\n    values = values.concat(empty)\n  }\n\n  return values.join(right + comma + left).trim()\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","parse","value","values","input","String","empty","index","indexOf","comma","lastIndex","end","length","val","slice","trim","push","stringify","options","settings","left","padLeft","space","right","padRight","concat","join"]
}
