{
"version":3,
"file":"goog.net.xpc.directtransport.js",
"lineCount":294,
"mappings":"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",
"sources":["goog/net/xpc/directtransport.js"],
"sourcesContent":["// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides an implementation of a transport that can call methods\n * directly on a frame. Useful if you want to use XPC for crossdomain messaging\n * (using another transport), or same domain messaging (using this transport).\n */\n\n\ngoog.provide('goog.net.xpc.DirectTransport');\n\ngoog.require('goog.Timer');\ngoog.require('goog.async.Deferred');\ngoog.require('goog.events.EventHandler');\ngoog.require('goog.log');\ngoog.require('goog.net.xpc');\ngoog.require('goog.net.xpc.CfgFields');\ngoog.require('goog.net.xpc.CrossPageChannelRole');\ngoog.require('goog.net.xpc.Transport');\ngoog.require('goog.net.xpc.TransportTypes');\ngoog.require('goog.object');\n\n\ngoog.scope(function() {\nvar CfgFields = goog.net.xpc.CfgFields;\nvar CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;\nvar Deferred = goog.async.Deferred;\nvar EventHandler = goog.events.EventHandler;\nvar Timer = goog.Timer;\nvar Transport = goog.net.xpc.Transport;\n\n\n\n/**\n * A direct window to window method transport.\n *\n * If the windows are in the same security context, this transport calls\n * directly into the other window without using any additional mechanism. This\n * is mainly used in scenarios where you want to optionally use a cross domain\n * transport in cross security context situations, or optionally use a direct\n * transport in same security context situations.\n *\n * Note: Global properties are exported by using this transport. One to\n * communicate with the other window by, currently crosswindowmessaging.channel,\n * and by using goog.getUid on window, currently closure_uid_[0-9]+.\n *\n * @param {!goog.net.xpc.CrossPageChannel} channel The channel this\n *     transport belongs to.\n * @param {goog.dom.DomHelper=} opt_domHelper The dom helper to use for\n *     finding the correct window/document. If omitted, uses the current\n *     document.\n * @constructor\n * @extends {Transport}\n */\ngoog.net.xpc.DirectTransport = function(channel, opt_domHelper) {\n  goog.net.xpc.DirectTransport.base(this, 'constructor', opt_domHelper);\n\n  /**\n   * The channel this transport belongs to.\n   * @private {!goog.net.xpc.CrossPageChannel}\n   */\n  this.channel_ = channel;\n\n  /** @private {!EventHandler<!goog.net.xpc.DirectTransport>} */\n  this.eventHandler_ = new EventHandler(this);\n  this.registerDisposable(this.eventHandler_);\n\n  /**\n   * Timer for connection reattempts.\n   * @private {!Timer}\n   */\n  this.maybeAttemptToConnectTimer_ = new Timer(\n      DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());\n  this.registerDisposable(this.maybeAttemptToConnectTimer_);\n\n  /**\n   * Fires once we've received our SETUP_ACK message.\n   * @private {!Deferred}\n   */\n  this.setupAckReceived_ = new Deferred();\n\n  /**\n   * Fires once we've sent our SETUP_ACK message.\n   * @private {!Deferred}\n   */\n  this.setupAckSent_ = new Deferred();\n\n  /**\n   * Fires once we're marked connected.\n   * @private {!Deferred}\n   */\n  this.connected_ = new Deferred();\n\n  /**\n   * The unique ID of this side of the connection. Used to determine when a peer\n   * is reloaded.\n   * @private {string}\n   */\n  this.endpointId_ = goog.net.xpc.getRandomString(10);\n\n  /**\n   * The unique ID of the peer. If we get a message from a peer with an ID we\n   * don't expect, we reset the connection.\n   * @private {?string}\n   */\n  this.peerEndpointId_ = null;\n\n  /**\n   * The map of sending messages.\n   * @private {Object}\n   */\n  this.asyncSendsMap_ = {};\n\n  /**\n   * The original channel name.\n   * @private {string}\n   */\n  this.originalChannelName_ = this.channel_.name;\n\n  // We reconfigure the channel name to include the role so that we can\n  // communicate in the same window between the different roles on the\n  // same channel.\n  this.channel_.updateChannelNameAndCatalog(\n      DirectTransport.getRoledChannelName_(\n          this.channel_.name, this.channel_.getRole()));\n\n  /**\n   * Flag indicating if this instance of the transport has been initialized.\n   * @private {boolean}\n   */\n  this.initialized_ = false;\n\n  // We don't want to mark ourselves connected until we have sent whatever\n  // message will cause our counterpart in the other frame to also declare\n  // itself connected, if there is such a message.  Otherwise we risk a user\n  // message being sent in advance of that message, and it being discarded.\n\n  // Two sided handshake:\n  // SETUP_ACK has to have been received, and sent.\n  this.connected_.awaitDeferred(this.setupAckReceived_);\n  this.connected_.awaitDeferred(this.setupAckSent_);\n\n  this.connected_.addCallback(this.notifyConnected_, this);\n  this.connected_.callback(true);\n\n  this.eventHandler_.listen(\n      this.maybeAttemptToConnectTimer_, Timer.TICK,\n      this.maybeAttemptToConnect_);\n\n  goog.log.info(\n      goog.net.xpc.logger,\n      'DirectTransport created. role=' + this.channel_.getRole());\n};\ngoog.inherits(goog.net.xpc.DirectTransport, Transport);\nvar DirectTransport = goog.net.xpc.DirectTransport;\n\n\n/**\n * @private {number}\n * @const\n */\nDirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;\n\n\n/**\n * The delay to notify the xpc of a successful connection. This is used\n * to allow both parties to be connected if one party's connection callback\n * invokes an immediate send.\n * @private {number}\n * @const\n */\nDirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;\n\n\n/**\n * @param {!Window} peerWindow The peer window to check if DirectTranport is\n *     supported on.\n * @return {boolean} Whether this transport is supported.\n */\nDirectTransport.isSupported = function(peerWindow) {\n\n  try {\n    return window.document.domain == peerWindow.document.domain;\n  } catch (e) {\n    return false;\n  }\n};\n\n\n/**\n * Tracks the number of DirectTransport channels that have been\n * initialized but not disposed yet in a map keyed by the UID of the window\n * object.  This allows for multiple windows to be initiallized and listening\n * for messages.\n * @private {!Object<number>}\n */\nDirectTransport.activeCount_ = {};\n\n\n/**\n * Path of global message proxy.\n * @private {string}\n * @const\n */\n// TODO(user): Make this configurable using the CfgFields.\nDirectTransport.GLOBAL_TRANPORT_PATH_ = 'crosswindowmessaging.channel';\n\n\n/**\n * The delimiter used for transport service messages.\n * @private {string}\n * @const\n */\nDirectTransport.MESSAGE_DELIMITER_ = ',';\n\n\n/**\n * Initializes this transport. Registers a method for 'message'-events in the\n * global scope.\n * @param {!Window} listenWindow The window to listen to events on.\n * @private\n */\nDirectTransport.initialize_ = function(listenWindow) {\n  var uid = goog.getUid(listenWindow);\n  var value = DirectTransport.activeCount_[uid] || 0;\n  if (value == 0) {\n    // Set up a handler on the window to proxy messages to class.\n    var globalProxy = goog.getObjectByName(\n        DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);\n    if (globalProxy == null) {\n      goog.exportSymbol(\n          DirectTransport.GLOBAL_TRANPORT_PATH_,\n          DirectTransport.messageReceivedHandler_, listenWindow);\n    }\n  }\n  DirectTransport.activeCount_[uid]++;\n};\n\n\n/**\n * @param {string} channelName The channel name.\n * @param {string|number} role The role.\n * @return {string} The formatted channel name including role.\n * @private\n */\nDirectTransport.getRoledChannelName_ = function(channelName, role) {\n  return channelName + '_' + role;\n};\n\n\n/**\n * @param {!Object} literal The literal unrenamed message.\n * @return {boolean} Whether the message was successfully delivered to a\n *     channel.\n * @private\n */\nDirectTransport.messageReceivedHandler_ = function(literal) {\n  var msg = DirectTransport.Message_.fromLiteral(literal);\n\n  var channelName = msg.channelName;\n  var service = msg.service;\n  var payload = msg.payload;\n\n  goog.log.fine(\n      goog.net.xpc.logger, 'messageReceived: channel=' + channelName +\n          ', service=' + service + ', payload=' + payload);\n\n  // Attempt to deliver message to the channel. Keep in mind that it may not\n  // exist for several reasons, including but not limited to:\n  //  - a malformed message\n  //  - the channel simply has not been created\n  //  - channel was created in a different namespace\n  //  - message was sent to the wrong window\n  //  - channel has become stale (e.g. caching iframes and back clicks)\n  var channel = goog.net.xpc.channels[channelName];\n  if (channel) {\n    channel.xpcDeliver(service, payload);\n    return true;\n  }\n\n  var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];\n\n  // Check if there are any stale channel names that can be updated.\n  for (var staleChannelName in goog.net.xpc.channels) {\n    var staleChannel = goog.net.xpc.channels[staleChannelName];\n    if (staleChannel.getRole() == CrossPageChannelRole.INNER &&\n        !staleChannel.isConnected() &&\n        service == goog.net.xpc.TRANSPORT_SERVICE_ &&\n        transportMessageType == goog.net.xpc.SETUP) {\n      // Inner peer received SETUP message but channel names did not match.\n      // Start using the channel name sent from outer peer. The channel name\n      // of the inner peer can easily become out of date, as iframe's and their\n      // JS state get cached in many browsers upon page reload or history\n      // navigation (particularly Firefox 1.5+).\n      staleChannel.updateChannelNameAndCatalog(channelName);\n      staleChannel.xpcDeliver(service, payload);\n      return true;\n    }\n  }\n\n  // Failed to find a channel to deliver this message to, so simply ignore it.\n  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored.');\n  return false;\n};\n\n\n/**\n * The transport type.\n * @type {number}\n * @override\n */\nDirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;\n\n\n/**\n * Handles transport service messages.\n * @param {string} payload The message content.\n * @override\n */\nDirectTransport.prototype.transportServiceHandler = function(payload) {\n  var transportParts = DirectTransport.parseTransportPayload_(payload);\n  var transportMessageType = transportParts[0];\n  var peerEndpointId = transportParts[1];\n  switch (transportMessageType) {\n    case goog.net.xpc.SETUP_ACK_:\n      if (!this.setupAckReceived_.hasFired()) {\n        this.setupAckReceived_.callback(true);\n      }\n      break;\n    case goog.net.xpc.SETUP:\n      this.sendSetupAckMessage_();\n      if ((this.peerEndpointId_ != null) &&\n          (this.peerEndpointId_ != peerEndpointId)) {\n        // Send a new SETUP message since the peer has been replaced.\n        goog.log.info(\n            goog.net.xpc.logger,\n            'Sending SETUP and changing peer ID to: ' + peerEndpointId);\n        this.sendSetupMessage_();\n      }\n      this.peerEndpointId_ = peerEndpointId;\n      break;\n  }\n};\n\n\n/**\n * Sends a SETUP transport service message.\n * @private\n */\nDirectTransport.prototype.sendSetupMessage_ = function() {\n  // Although we could send real objects, since some other transports are\n  // limited to strings we also keep this requirement.\n  var payload = goog.net.xpc.SETUP;\n  payload += DirectTransport.MESSAGE_DELIMITER_;\n  payload += this.endpointId_;\n  this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);\n};\n\n\n/**\n * Sends a SETUP_ACK transport service message.\n * @private\n */\nDirectTransport.prototype.sendSetupAckMessage_ = function() {\n  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);\n  if (!this.setupAckSent_.hasFired()) {\n    this.setupAckSent_.callback(true);\n  }\n};\n\n\n/** @override */\nDirectTransport.prototype.connect = function() {\n  var win = this.getWindow();\n  if (win) {\n    DirectTransport.initialize_(win);\n    this.initialized_ = true;\n    this.maybeAttemptToConnect_();\n  } else {\n    goog.log.fine(goog.net.xpc.logger, 'connect(): no window to initialize.');\n  }\n};\n\n\n/**\n * Connects to other peer. In the case of the outer peer, the setup messages are\n * likely sent before the inner peer is ready to receive them. Therefore, this\n * function will continue trying to send the SETUP message until the inner peer\n * responds. In the case of the inner peer, it will occasionally have its\n * channel name fall out of sync with the outer peer, particularly during\n * soft-reloads and history navigations.\n * @private\n */\nDirectTransport.prototype.maybeAttemptToConnect_ = function() {\n  if (this.channel_.isConnected()) {\n    this.maybeAttemptToConnectTimer_.stop();\n    return;\n  }\n  this.maybeAttemptToConnectTimer_.start();\n  this.sendSetupMessage_();\n};\n\n\n/**\n * Prepares to send a message.\n * @param {string} service The name of the service the message is to be\n *     delivered to.\n * @param {string} payload The message content.\n * @override\n */\nDirectTransport.prototype.send = function(service, payload) {\n  if (!this.channel_.getPeerWindowObject()) {\n    goog.log.fine(goog.net.xpc.logger, 'send(): window not ready');\n    return;\n  }\n  var channelName = DirectTransport.getRoledChannelName_(\n      this.originalChannelName_, this.getPeerRole_());\n\n  var message = new DirectTransport.Message_(channelName, service, payload);\n\n  if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {\n    this.executeScheduledSend_(message);\n  } else {\n    // Note: goog.async.nextTick doesn't support cancelling or disposal so\n    // leaving as 0ms timer, though this may have performance implications.\n    this.asyncSendsMap_[goog.getUid(message)] =\n        Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);\n  }\n};\n\n\n/**\n * Sends the message.\n * @param {!DirectTransport.Message_} message The message to send.\n * @private\n */\nDirectTransport.prototype.executeScheduledSend_ = function(message) {\n  var messageId = goog.getUid(message);\n  if (this.asyncSendsMap_[messageId]) {\n    delete this.asyncSendsMap_[messageId];\n  }\n\n\n  try {\n    var peerProxy = goog.getObjectByName(\n        DirectTransport.GLOBAL_TRANPORT_PATH_,\n        this.channel_.getPeerWindowObject());\n  } catch (error) {\n    goog.log.warning(\n        goog.net.xpc.logger, 'Can\\'t access other window, ignoring.', error);\n    return;\n  }\n\n  if (goog.isNull(peerProxy)) {\n    goog.log.warning(\n        goog.net.xpc.logger, 'Peer window had no global function.');\n    return;\n  }\n\n\n  try {\n    peerProxy(message.toLiteral());\n    goog.log.info(\n        goog.net.xpc.logger, 'send(): channelName=' + message.channelName +\n            ' service=' + message.service + ' payload=' + message.payload);\n  } catch (error) {\n    goog.log.warning(\n        goog.net.xpc.logger, 'Error performing call, ignoring.', error);\n  }\n};\n\n\n/**\n * @return {goog.net.xpc.CrossPageChannelRole} The role of peer channel (either\n *     inner or outer).\n * @private\n */\nDirectTransport.prototype.getPeerRole_ = function() {\n  var role = this.channel_.getRole();\n  return role == goog.net.xpc.CrossPageChannelRole.OUTER ?\n      goog.net.xpc.CrossPageChannelRole.INNER :\n      goog.net.xpc.CrossPageChannelRole.OUTER;\n};\n\n\n/**\n * Notifies the channel that this transport is connected.\n * @private\n */\nDirectTransport.prototype.notifyConnected_ = function() {\n  // Add a delay as the connection callback will break if this transport is\n  // synchronous and the callback invokes send() immediately.\n  this.channel_.notifyConnected(\n      this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ?\n          DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ :\n          0);\n};\n\n\n/** @override */\nDirectTransport.prototype.disposeInternal = function() {\n  if (this.initialized_) {\n    var listenWindow = this.getWindow();\n    var uid = goog.getUid(listenWindow);\n    var value = --DirectTransport.activeCount_[uid];\n    if (value == 1) {\n      goog.exportSymbol(\n          DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);\n    }\n  }\n\n  if (this.asyncSendsMap_) {\n    goog.object.forEach(\n        this.asyncSendsMap_, function(timerId) { Timer.clear(timerId); });\n    this.asyncSendsMap_ = null;\n  }\n\n  // Deferred's aren't disposables.\n  if (this.setupAckReceived_) {\n    this.setupAckReceived_.cancel();\n    delete this.setupAckReceived_;\n  }\n  if (this.setupAckSent_) {\n    this.setupAckSent_.cancel();\n    delete this.setupAckSent_;\n  }\n  if (this.connected_) {\n    this.connected_.cancel();\n    delete this.connected_;\n  }\n\n  DirectTransport.base(this, 'disposeInternal');\n};\n\n\n/**\n * Parses a transport service payload message.\n * @param {string} payload The payload.\n * @return {!Array<?string>} An array with the message type as the first member\n *     and the endpoint id as the second, if one was sent, or null otherwise.\n * @private\n */\nDirectTransport.parseTransportPayload_ = function(payload) {\n  var transportParts = /** @type {!Array<?string>} */ (\n      payload.split(DirectTransport.MESSAGE_DELIMITER_));\n  transportParts[1] = transportParts[1] || null;  // Usually endpointId.\n  return transportParts;\n};\n\n\n\n/**\n * Message container that gets passed back and forth between windows.\n * @param {string} channelName The channel name to tranport messages on.\n * @param {string} service The service to send the payload to.\n * @param {string} payload The payload to send.\n * @constructor\n * @struct\n * @private\n */\nDirectTransport.Message_ = function(channelName, service, payload) {\n  /**\n   * The name of the channel.\n   * @type {string}\n   */\n  this.channelName = channelName;\n\n  /**\n   * The service on the channel.\n   * @type {string}\n   */\n  this.service = service;\n\n  /**\n   * The payload.\n   * @type {string}\n   */\n  this.payload = payload;\n};\n\n\n/**\n * Converts a message to a literal object.\n * @return {!Object} The message as a literal object.\n */\nDirectTransport.Message_.prototype.toLiteral = function() {\n  return {\n    'channelName': this.channelName,\n    'service': this.service,\n    'payload': this.payload\n  };\n};\n\n\n/**\n * Creates a Message_ from a literal object.\n * @param {!Object} literal The literal to convert to Message.\n * @return {!DirectTransport.Message_} The Message.\n */\nDirectTransport.Message_.fromLiteral = function(literal) {\n  return new DirectTransport.Message_(\n      literal['channelName'], literal['service'], literal['payload']);\n};\n\n});  // goog.scope\n"],
"names":["goog","provide","require","scope","CfgFields","net","xpc","CrossPageChannelRole","Deferred","async","EventHandler","events","Timer","Transport","DirectTransport","goog.net.xpc.DirectTransport","channel","opt_domHelper","base","channel_","eventHandler_","registerDisposable","maybeAttemptToConnectTimer_","CONNECTION_ATTEMPT_INTERVAL_MS_","getWindow","setupAckReceived_","setupAckSent_","connected_","endpointId_","getRandomString","peerEndpointId_","asyncSendsMap_","originalChannelName_","name","updateChannelNameAndCatalog","getRoledChannelName_","getRole","initialized_","awaitDeferred","addCallback","notifyConnected_","callback","listen","TICK","maybeAttemptToConnect_","log","info","logger","inherits","CONNECTION_DELAY_INTERVAL_MS_","isSupported","DirectTransport.isSupported","peerWindow","window","document","domain","e","activeCount_","GLOBAL_TRANPORT_PATH_","MESSAGE_DELIMITER_","initialize_","DirectTransport.initialize_","listenWindow","uid","getUid","value","globalProxy","getObjectByName","exportSymbol","messageReceivedHandler_","DirectTransport.getRoledChannelName_","channelName","role","DirectTransport.messageReceivedHandler_","literal","msg","Message_","fromLiteral","service","payload","fine","channels","xpcDeliver","transportMessageType","parseTransportPayload_","staleChannelName","staleChannel","INNER","isConnected","TRANSPORT_SERVICE_","SETUP","prototype","transportType","TransportTypes","DIRECT","transportServiceHandler","DirectTransport.prototype.transportServiceHandler","transportParts","peerEndpointId","SETUP_ACK_","hasFired","sendSetupAckMessage_","sendSetupMessage_","DirectTransport.prototype.sendSetupMessage_","send","DirectTransport.prototype.sendSetupAckMessage_","connect","DirectTransport.prototype.connect","win","DirectTransport.prototype.maybeAttemptToConnect_","stop","start","DirectTransport.prototype.send","getPeerWindowObject","getPeerRole_","message","getConfig","DIRECT_TRANSPORT_SYNC_MODE","executeScheduledSend_","callOnce","bind","DirectTransport.prototype.executeScheduledSend_","messageId","peerProxy","error","warning","isNull","toLiteral","DirectTransport.prototype.getPeerRole_","OUTER","DirectTransport.prototype.notifyConnected_","notifyConnected","disposeInternal","DirectTransport.prototype.disposeInternal","object","forEach","timerId","clear","cancel","DirectTransport.parseTransportPayload_","split","DirectTransport.Message_","DirectTransport.Message_.prototype.toLiteral","DirectTransport.Message_.fromLiteral"]
}
