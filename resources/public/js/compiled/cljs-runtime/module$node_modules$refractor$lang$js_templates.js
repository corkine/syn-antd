shadow$provide.module$node_modules$refractor$lang$js_templates=function(global,process,require,module,exports,shadow$shims){function jsTemplates(Prism$jscomp$0){(function(Prism){function createTemplate(language,tag){if(Prism.languages[language])return{pattern:RegExp("((?:"+tag+")\\s*)"+templateLiteralPattern),lookbehind:!0,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},"embedded-code":{pattern:/[\s\S]+/,alias:language}}}}function getPlaceholder(counter,language){return"___"+
language.toUpperCase()+"_"+counter+"___"}function tokenizeWithHooks(code,grammar,language){code={code:code,grammar:grammar,language:language};Prism.hooks.run("before-tokenize",code);code.tokens=Prism.tokenize(code.code,code.grammar);Prism.hooks.run("after-tokenize",code);return code.tokens}function tokenizeEmbedded(code,grammar,language){function walkTokens(tokens){for(var i=0;i<tokens.length&&!(placeholderCounter>=placeholders.length);i++){var token=tokens[i];if("string"===typeof token||"string"===
typeof token.content){var placeholder=placeholders[placeholderCounter],s="string"===typeof token?token:token.content,index=s.indexOf(placeholder);if(-1!==index){++placeholderCounter;var before=s.substring(0,index);var middle=placeholderMap[placeholder];var tempGrammar={};tempGrammar["interpolation-punctuation"]=interpolationPunctuationObject;tempGrammar=Prism.tokenize(middle,tempGrammar);if(3===tempGrammar.length){var args=[1,1];args.push.apply(args,tokenizeWithHooks(tempGrammar[1],Prism.languages.javascript,
"javascript"));tempGrammar.splice.apply(tempGrammar,args)}middle=new Prism.Token("interpolation",tempGrammar,interpolationObject.alias,middle);s=s.substring(index+placeholder.length);placeholder=[];before&&placeholder.push(before);placeholder.push(middle);s&&(before=[s],walkTokens(before),placeholder.push.apply(placeholder,before));"string"===typeof token?(tokens.splice.apply(tokens,[i,1].concat(placeholder)),i+=placeholder.length-1):token.content=placeholder}}else token=token.content,Array.isArray(token)?
walkTokens(token):walkTokens([token])}}var placeholderCounter=0,placeholderMap={},embeddedCode=Prism.tokenize(code,{interpolation:{pattern:RegExp(interpolationPattern),lookbehind:!0}}).map(function(token){if("string"===typeof token)return token;token=token.content;for(var placeholder;-1!==code.indexOf(placeholder=getPlaceholder(placeholderCounter++,language)););placeholderMap[placeholder]=token;return placeholder}).join("");grammar=tokenizeWithHooks(embeddedCode,grammar,language);var placeholders=
Object.keys(placeholderMap);placeholderCounter=0;walkTokens(grammar);return new Prism.Token(language,grammar,"language-"+language,code)}function stringContent(value){return"string"===typeof value?value:Array.isArray(value)?value.map(stringContent).join(""):stringContent(value.content)}var templateString=Prism.languages.javascript["template-string"],templateLiteralPattern=templateString.pattern.source,interpolationObject=templateString.inside.interpolation,interpolationPunctuationObject=interpolationObject.inside["interpolation-punctuation"],
interpolationPattern=interpolationObject.pattern.source;Prism.languages.javascript["template-string"]=[createTemplate("css",/\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),createTemplate("html",/\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),createTemplate("svg",/\bsvg/.source),createTemplate("markdown",/\b(?:md|markdown)/.source),createTemplate("graphql",/\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source),templateString].filter(Boolean);
var supportedLanguages={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};Prism.hooks.add("after-tokenize",function(env){function findTemplateStrings(tokens){for(var i=0,l=tokens.length;i<l;i++){var token=tokens[i];if("string"!==typeof token){var content=token.content;if(Array.isArray(content))if("template-string"===token.type){var embedded=content[1];if(3===content.length&&"string"!==typeof embedded&&"embedded-code"===embedded.type){token=stringContent(embedded);embedded=embedded.alias;embedded=
Array.isArray(embedded)?embedded[0]:embedded;var grammar=Prism.languages[embedded];grammar&&(content[1]=tokenizeEmbedded(token,grammar,embedded))}}else findTemplateStrings(content);else"string"!==typeof content&&findTemplateStrings([content])}}}env.language in supportedLanguages&&findTemplateStrings(env.tokens)})})(Prism$jscomp$0)}module.exports=jsTemplates;jsTemplates.displayName="jsTemplates";jsTemplates.aliases=[]}
//# sourceMappingURL=module$node_modules$refractor$lang$js_templates.js.map
