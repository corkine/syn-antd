{
"version":3,
"file":"module$node_modules$refractor$lang$lilypond.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM7HC,QAASA,SAAQ,CAACC,KAAD,CAAQ,CAMrB,IAJA,IAAIC,iBAAmB,6FAAAC,OAAvB,CAISC,EAAI,CAAb,CADwBC,CACxB,CAAgBD,CAAhB,CAAuCA,CAAA,EAAvC,CACEF,gBAAA,CAAmBA,gBAAAI,QAAA,CAAyB,SAAzB,CAAoCJ,gBAApC,CAErBA,iBAAA,CAAmBA,gBAAAI,QAAA,CAAyB,SAAzB,CAAoC,SAAAH,OAApC,CACfH,iBAAAA,CA6DHC,KA7DeM,UAAAP,SAAZA,CAAuC,CACzCQ,QAAS,6BADgC;AAEzC,kBAAmB,CACjBC,QAASC,MAAA,CACP,6DAAAP,OAAAG,QAAA,CACE,SADF,CAEEJ,gBAFF,CADO,CAKP,GALO,CADQ,CAQjBS,WAAY,CAAA,CARK,CASjBC,OAAQ,CAAA,CATS,CAUjBC,OAAQ,CACNC,OAAQ,CACNL,QAAS,cADH,CAENE,WAAY,CAAA,CAFN,CAGNI,MAAO,iBAHD,CAINF,OAAQ,CACN,oBAAqB,CACnBJ,QAAS,gBADU,CAEnBG,OAAQ,CAAA,CAFW,CAGnBC,OAAQ,CACNG,YAAa,WADP,CAENhB,SAAU,CACRS,QAAS,SADD,CAERM,MAAO,mBAFC,CAGRF,OAAQ,IAHA,CAFJ,CAHW,CADf,CAaNI,KA+BThB,KA/BeM,UAAAO,OAbA,CAJF,CADF,CAqBNE,YAAa,GArBP,CAVS,CAFsB,CAoCzCE,OAAQ,CACNT,QAAS,mBADH,CAENG,OAAQ,CAAA,CAFF,CApCiC;AAwCzC,aAAc,CACZH,QAAS,kBADG,CAEZE,WAAY,CAAA,CAFA,CAxC2B,CA4CzCQ,QAAS,CACPV,QAAS,gBADF,CAEPI,OAAQ,CACNG,YAAa,KADP,CAFD,CA5CgC,CAkDzCI,SAAU,YAlD+B,CAmDzCJ,YAAa,CACXP,QAAS,sGADE,CAEXE,WAAY,CAAA,CAFD,CAnD4B,CAuDzCU,OAAQ,mBAvDiC,CAyD3CrB,iBAAA,CAAS,iBAAT,CAAAa,OAAA,OAAAA,OAAA,CACE,mBADF,CAAAA,OAAA,SAAAA,OAAA,CAE8Bb,gBAE7BC,MADDM,UAAAe,GAAA,CAAqBtB,gBAtEA,CAHzBH,MAAAC,QAAA,CAAiBE,QACjBA,SAAAuB,YAAA;AAAuB,UACvBvB,SAAAwB,QAAA,CAAmB,EAL0G;",
"sources":["node_modules/refractor/lang/lilypond.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$lilypond\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  ;(function(Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n      .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, schemeExpression)\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            schemeExpression\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","lilypond","Prism","schemeExpression","source","i","recursivenessLog2","replace","languages","comment","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","punctuation","rest","string","keyword","operator","number","ly","displayName","aliases"]
}
