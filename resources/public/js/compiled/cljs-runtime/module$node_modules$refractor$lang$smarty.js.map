{
"version":3,
"file":"module$node_modules$refractor$lang$smarty.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,cAAD,CAAQ,CACrBA,cAAAC,SAAA,CAAeC,yBAAf,CAKE,UAAQ,CAACF,KAAD,CAAQ,CAChBA,KAAAG,UAAAJ,OAAA,CAAyB,CACvBK,QAAS,kBADc,CAEvBC,UAAW,CACTC,QAAS,UADA,CAETC,MAAO,aAFE,CAFY,CAMvBC,OAAQ,kCANe,CAOvBC,OAAQ,0DAPe,CAQvBC,SAAU,CACR,aADQ,CAER,aAFQ,CAGR,CACEJ,QAAS,kBADX,CAEEK,WAAY,CAAA,CAFd,CAHQ;AAOR,CACEL,QAAS,qBADX,CAEEK,WAAY,CAAA,CAFd,CAPQ,CARa,CAoBvBC,SAAU,CACR,CACEN,QAAS,oBADX,CAEEK,WAAY,CAAA,CAFd,CADQ,CAKR,eALQ,CAMR,iBANQ,CApBa,CA4BvB,YAAa,CAEXL,QAAS,0BAFE,CAGXO,OAAQ,CACNH,SAAU,CACRJ,QAAS,iBADD,CAERK,WAAY,CAAA,CAFJ,CADJ,CAKNG,SAAU,GALJ,CAHG,CA5BU,CAuCvBC,YAAa,CAAC,iBAAD,CAvCU,CAwCvBD,SAAU,CACR,kCADQ,CAER,gDAFQ,CAGR,gDAHQ,CAxCa,CA6CvBE,QAAS,kCA7Cc,CA+CzBhB,MAAAiB,MAAAC,IAAA,CAAgB,iBAAhB;AAAmC,QAAQ,CAACC,GAAD,CAAM,CAI/C,IAAIC,mBAAqB,CAAA,CACzBpB,MAAAG,UAAA,CAAgB,mBAAhB,CAAAkB,kBAAA,CACEF,GADF,CAEE,QAFF,CAJoBG,gCAIpB,CAIE,QAAQ,CAACC,KAAD,CAAQ,CANMC,YAQpB,GAAID,KAAJ,GACEH,kBADF,CACuB,CAAA,CADvB,CAGA,OAAKA,mBAAL,CAMO,CAAA,CANP,EAZsBK,WAgBb,GAHHF,KAGG,GAFLH,kBAEK,CAFgB,CAAA,CAEhB,EAAA,CAAA,CAJT,CALc,CAJlB,CAL+C,CAAjD,CAwBApB,MAAAiB,MAAAC,IAAA,CAAgB,gBAAhB,CAAkC,QAAQ,CAACC,GAAD,CAAM,CAC9CnB,KAAAG,UAAA,CAAgB,mBAAhB,CAAAuB,qBAAA,CAA0DP,GAA1D,CAA+D,QAA/D,CAD8C,CAAhD,CAxEgB,CAAhB,CAAD,CA2EEnB,cA3EF,CANoB,CAJvB,IAAIE,0BAA4BP,OAAA,CAAQ,sDAAR,CAChCC;MAAAC,QAAA,CAAiBE,MACjBA,OAAA4B,YAAA,CAAqB,QACrB5B,OAAA6B,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/smarty.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$smarty\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\nAdd support for variables inside double quoted strings\nAdd support for {php}\n*/\n  ;(function(Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: [\n        {\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /^\\/?(?!\\d)\\w+/,\n        /(?!\\d)\\w+(?=\\()/\n      ],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n      ],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    } // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\n      var smartyLitteralStart = '{literal}'\n      var smartyLitteralEnd = '{/literal}'\n      var smartyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function(match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLitteralEnd) {\n            smartyLitteralMode = false\n          }\n          if (!smartyLitteralMode) {\n            if (match === smartyLitteralStart) {\n              smartyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","smarty","Prism","register","refractorMarkupTemplating","languages","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyLitteralMode","buildPlaceholders","smartyPattern","match","smartyLitteralEnd","smartyLitteralStart","tokenizePlaceholders","displayName","aliases"]
}
