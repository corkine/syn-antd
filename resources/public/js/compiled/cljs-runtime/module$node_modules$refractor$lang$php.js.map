{
"version":3,
"file":"module$node_modules$refractor$lang$php.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/refractor/lang/php.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$php\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function(Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function(env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","php","Prism","register","refractorMarkupTemplating","languages","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","greedy","interpolation","hooks","add","env","test","code","buildPlaceholders","phpPattern","tokenizePlaceholders","displayName","aliases"]
}
