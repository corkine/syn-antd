{"version":3,"sources":["clojure/browser/event.cljs"],"mappings":"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","names":["x__4433__auto__","m__4434__auto__","clojure.browser.event/event-types","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","clojure.browser.event/IEventType","this","cljs.core/PROTOCOL_SENTINEL","js/goog.events.EventTarget","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__26594","vec__26595","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/goog.events.EventType","js/Element","p__26598","vec__26599","var_args","G__26603","clojure.browser.event/listen","js/Error","src","type","fn","clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4","capture?","G__26604","G__26605","G__26606","G__26607","goog.events/listen","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__26609","clojure.browser.event/listen-once","clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4","G__26610","G__26611","G__26612","G__26613","goog.events/listenOnce","G__26615","clojure.browser.event/unlisten","clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4","G__26616","G__26617","G__26618","G__26619","goog.events/unlisten","clojure.browser.event/unlisten-by-key","key","goog.events/unlistenByKey","clojure.browser.event/dispatch-event","event","goog.events/dispatchEvent","clojure.browser.event/expose","e","goog.events/expose","clojure.browser.event/fire-listeners","obj","capture","clojure.browser.event/total-listener-count","goog.events/getTotalListenerCount","clojure.browser.event/get-listener","listener","opt_capt","opt_handler","clojure.browser.event/all-listeners","clojure.browser.event/unique-event-id","event-type","clojure.browser.event/has-listener","opt_type","opt_capture","clojure.browser.event/remove-all","opt_obj"],"sourcesContent":[";;  Copyright (c) Rich Hickey. All rights reserved.\n;;  The use and distribution terms for this software are covered by the\n;;  Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;  which can be found in the file epl-v10.html at the root of this distribution.\n;;  By using this software in any fashion, you are agreeing to be bound by\n;;  the terms of this license.\n;;  You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"This namespace contains functions to work with browser\nevents.  It is based on the Google Closure Library event system.\"\n      :author \"Bobby Calderwood\"}\n  clojure.browser.event\n  (:require [goog.events :as events])\n  (:import (goog.events EventTarget EventType)))\n\n(defprotocol IEventType\n  (event-types [this]))\n\n(extend-protocol IEventType\n\n  EventTarget\n  (event-types\n    [this]\n    (into {}\n          (map\n           (fn [[k v]]\n             [(keyword (.toLowerCase k))\n              v])\n           (merge\n            (js->clj EventType))))))\n\n(when (exists? js/Element)\n  (extend-protocol IEventType\n\n    js/Element\n    (event-types\n      [this]\n      (into {}\n            (map\n             (fn [[k v]]\n               [(keyword (.toLowerCase k))\n                v])\n             (merge\n              (js->clj EventType)))))))\n\n(defn listen\n  ([src type fn]\n     (listen src type fn false))\n  ([src type fn capture?]\n     (events/listen src\n                    (get (event-types src) type type)\n                    fn\n                    capture?)))\n\n(defn listen-once\n  ([src type fn]\n     (listen-once src type fn false))\n  ([src type fn capture?]\n     (events/listenOnce src\n                        (get (event-types src) type type)\n                        fn\n                        capture?)))\n\n(defn unlisten\n  ([src type fn]\n     (unlisten src type fn false))\n  ([src type fn capture?]\n     (events/unlisten src\n                      (get (event-types src) type type)\n                      fn\n                      capture?)))\n\n(defn unlisten-by-key\n  [key]\n  (events/unlistenByKey key))\n\n(defn dispatch-event\n  [src event]\n  (events/dispatchEvent src event))\n\n(defn expose [e]\n  (events/expose e))\n\n(defn fire-listeners\n  [obj type capture event])\n\n(defn total-listener-count []\n  (events/getTotalListenerCount))\n\n;; TODO\n(defn get-listener [src type listener opt_capt opt_handler]); \u21d2 ?Listener\n(defn all-listeners [obj type capture]); \u21d2 Array.<Listener>\n\n(defn unique-event-id [event-type]); \u21d2 string\n\n(defn has-listener [obj opt_type opt_capture]); \u21d2 boolean\n;; TODO? (defn listen-with-wrapper [src wrapper listener opt_capt opt_handler])\n;; TODO? (defn protect-browser-event-entry-point [errorHandler])\n\n(defn remove-all [opt_obj opt_type opt_capt]); \u21d2 number\n;; TODO? (defn unlisten-with-wrapper [src wrapper listener opt_capt opt_handler])\n"]}