{
"version":3,
"file":"module$node_modules$refractor$lang$vala.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAAC,UAAAF,KAAA,CAAuBC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CAErD,aAAc,CACZ,CAEEC,QAAS,kDAFX,CAGEC,OAAQ,CACNC,YAAa,IADP,CAHV,CADY,CAQZ,CAEEF,QAAS,0BAFX,CAGEG,WAAY,CAAA,CAHd,CAIEF,OAAQ,CACNC,YAAa,IADP,CAJV,CARY,CAgBZ,CAEEF,QAAS,yEAFX,CAGEG,WAAY,CAAA,CAHd,CAIEF,OAAQ,CACNC,YAAa,IADP,CAJV,CAhBY,CAwBZ,CAEEF,QAAS,mFAFX;AAGEG,WAAY,CAAA,CAHd,CAIEF,OAAQ,CACNC,YAAa,IADP,CAJV,CAxBY,CAFuC,CAmCrDE,SAAU,gBAnC2C,CAoCrDC,SAAU,cApC2C,CAqCrDC,QAAS,2kBArC4C;AAsCrDC,OAAQ,sEAtC6C,CAuCrDC,SAAU,mEAvC2C,CAwCrDN,YAAa,eAxCwC,CAAhC,CA0CvBL,MAAAC,UAAAW,aAAA,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAC7C,aAAc,CACZT,QAAS,gBADG,CAEZU,OAAQ,CAAA,CAFI,CAGZC,MAAO,QAHK,CAD+B,CAM7C,kBAAmB,CACjBX,QAAS,aADQ,CAEjBU,OAAQ,CAAA,CAFS,CAGjBT,OAAQ,CACNW,cAAe,CACbZ,QAAS,6BADI,CAEbC,OAAQ,CACNY,UAAW,CACTb,QAAS,YADA,CAETW,MAAO,aAFE,CADL,CAKNG,KAAMjB,KAAAC,UAAAF,KALA,CAFK,CADT,CAWNmB,OAAQ,SAXF,CAHS,CAN0B,CAA/C,CAwBAlB;KAAAC,UAAAW,aAAA,CAA6B,MAA7B,CAAqC,SAArC,CAAgD,CAC9CO,MAAO,CACLhB,QAAS,oFADJ,CAELU,OAAQ,CAAA,CAFH,CADuC,CAAhD,CAnEmB,CAHrBjB,MAAAC,QAAA,CAAiBE,IACjBA,KAAAqB,YAAA,CAAmB,MACnBrB,KAAAsB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/vala.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$vala\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = vala\nvala.displayName = 'vala'\nvala.aliases = []\nfunction vala(Prism) {\n  Prism.languages.vala = Prism.languages.extend('clike', {\n    // Classes copied from prism-csharp\n    'class-name': [\n      {\n        // (Foo bar, Bar baz)\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // [Foo]\n        pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo : Bar\n        pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo\n        pattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    ],\n    constant: /\\b[A-Z0-9_]+\\b/,\n    function: /\\w+(?=\\s*\\()/,\n    keyword: /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n    number: /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n    punctuation: /[{}[\\];(),.:]/\n  })\n  Prism.languages.insertBefore('vala', 'string', {\n    'raw-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'template-string': {\n      pattern: /@\"[\\s\\S]*?\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n          inside: {\n            delimiter: {\n              pattern: /^\\$\\(?|\\)$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.vala\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('vala', 'keyword', {\n    regex: {\n      pattern: /\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n      greedy: true\n    }\n  })\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","vala","Prism","languages","extend","pattern","inside","punctuation","lookbehind","constant","function","keyword","number","operator","insertBefore","greedy","alias","interpolation","delimiter","rest","string","regex","displayName","aliases"]
}
