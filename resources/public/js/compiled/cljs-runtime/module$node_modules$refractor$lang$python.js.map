{
"version":3,
"file":"module$node_modules$refractor$lang$python.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAAC,UAAAF,OAAA,CAAyB,CACvBG,QAAS,CACPC,QAAS,cADF,CAEPC,WAAY,CAAA,CAFL,CADc,CAKvB,uBAAwB,CACtBD,QAAS,qEADa,CAEtBE,OAAQ,CAAA,CAFc,CAGtBC,OAAQ,CACNC,cAAe,CAEbJ,QAAS,0EAFI,CAGbC,WAAY,CAAA,CAHC,CAIbE,OAAQ,CACN,cAAe,CACbH,QAAS,oBADI,CAEbC,WAAY,CAAA,CAFC,CADT;AAKN,oBAAqB,CACnBD,QAAS,iBADU,CAEnBK,MAAO,aAFY,CALf,CASNC,KAAM,IATA,CAJK,CADT,CAiBNC,OAAQ,SAjBF,CAHc,CALD,CA4BvB,uBAAwB,CACtBP,QAAS,sCADa,CAEtBE,OAAQ,CAAA,CAFc,CAGtBG,MAAO,QAHe,CA5BD,CAiCvBE,OAAQ,CACNP,QAAS,kDADH,CAENE,OAAQ,CAAA,CAFF,CAjCe,CAqCvBM,SAAU,CACRR,QAAS,2CADD,CAERC,WAAY,CAAA,CAFJ,CArCa,CAyCvB,aAAc,CACZD,QAAS,kBADG,CAEZC,WAAY,CAAA,CAFA,CAzCS,CA6CvBQ,UAAW,CACTT,QAAS,uBADA,CAETC,WAAY,CAAA,CAFH,CAGTI,MAAO,CAAC,YAAD,CAAe,aAAf,CAHE,CAITF,OAAQ,CACNO,YAAa,IADP,CAJC,CA7CY;AAqDvBC,QAAS,kMArDc,CAsDvBC,QAAS,qhBAtDc;AAuDvBC,QAAS,yBAvDc,CAwDvBC,OAAQ,4FAxDe,CAyDvBC,SAAU,mDAzDa,CA0DvBL,YAAa,eA1DU,CA4DzBb,MAAAC,UAAAF,OAAA,CAAuB,sBAAvB,CAAAO,OAAA,cAAAA,OAAAG,KAAA,CAEgBT,KAAAC,UAAAF,OAChBC,MAAAC,UAAAkB,GAAA,CAAqBnB,KAAAC,UAAAF,OAhEA,CAHvBH,MAAAC,QAAA,CAAiBE,MACjBA,OAAAqB,YAAA,CAAqB,QACrBrB,OAAAsB,QAAA,CAAiB,CAAC,IAAD,CAL0G;",
"sources":["node_modules/refractor/lang/python.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$python\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = python\npython.displayName = 'python'\npython.aliases = ['py']\nfunction python(Prism) {\n  Prism.languages.python = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    'string-interpolation': {\n      pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n      greedy: true,\n      inside: {\n        interpolation: {\n          // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n          pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n          lookbehind: true,\n          inside: {\n            'format-spec': {\n              pattern: /(:)[^:(){}]+(?=}$)/,\n              lookbehind: true\n            },\n            'conversion-option': {\n              pattern: /![sra](?=[:}]$)/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    'triple-quoted-string': {\n      pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n      greedy: true\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n      lookbehind: true\n    },\n    'class-name': {\n      pattern: /(\\bclass\\s+)\\w+/i,\n      lookbehind: true\n    },\n    decorator: {\n      pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n      lookbehind: true,\n      alias: ['annotation', 'punctuation'],\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword: /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    boolean: /\\b(?:True|False|None)\\b/,\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n    operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.python['string-interpolation'].inside[\n    'interpolation'\n  ].inside.rest = Prism.languages.python\n  Prism.languages.py = Prism.languages.python\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","python","Prism","languages","comment","pattern","lookbehind","greedy","inside","interpolation","alias","rest","string","function","decorator","punctuation","keyword","builtin","boolean","number","operator","py","displayName","aliases"]
}
