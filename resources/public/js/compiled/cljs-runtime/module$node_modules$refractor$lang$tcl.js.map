{
"version":3,
"file":"module$node_modules$refractor$lang$tcl.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMxHC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAAC,UAAAF,IAAA,CAAsB,CACpBG,QAAS,CACPC,QAAS,cADF,CAEPC,WAAY,CAAA,CAFL,CADW,CAKpBC,OAAQ,CACNF,QAAS,qCADH,CAENG,OAAQ,CAAA,CAFF,CALY,CASpBC,SAAU,CACR,CACEJ,QAAS,mCADX,CAEEC,WAAY,CAAA,CAFd,CADQ,CAKR,CACED,QAAS,aADX,CAEEC,WAAY,CAAA,CAFd,CALQ,CASR,CACED,QAAS,+CADX,CAEEC,WAAY,CAAA,CAFd,CATQ,CATU,CAuBpBI,SAAU,CACRL,QAAS,yBADD,CAERC,WAAY,CAAA,CAFJ,CAvBU;AA2BpBK,QAAS,CACP,CACEN,QAAS,2FADX,CAEEC,WAAY,CAAA,CAFd,CADO,CAKP,qBALO,CA3BW,CAkCpBM,MAAO,CACLP,QAAS,oCADJ,CAELC,WAAY,CAAA,CAFP,CAGLO,MAAO,UAHF,CAlCa,CAuCpBC,QAAS,CACPT,QAAS,+uBADF;AAEPC,WAAY,CAAA,CAFL,CAvCW,CA2CpBS,SAAU,qEA3CU,CA4CpBC,YAAa,YA5CO,CADJ,CAHpBlB,MAAAC,QAAA,CAAiBE,GACjBA,IAAAgB,YAAA,CAAkB,KAClBhB,IAAAiB,QAAA,CAAc,EAL0G;",
"sources":["node_modules/refractor/lang/tcl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$tcl\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = tcl\ntcl.displayName = 'tcl'\ntcl.aliases = []\nfunction tcl(Prism) {\n  Prism.languages.tcl = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n      greedy: true\n    },\n    variable: [\n      {\n        pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\$){[^}]+}/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^\\s*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n        lookbehind: true\n      }\n    ],\n    function: {\n      pattern: /(^\\s*proc[ \\t]+)[^\\s]+/m,\n      lookbehind: true\n    },\n    builtin: [\n      {\n        pattern: /(^\\s*)(?:proc|return|class|error|eval|exit|for|foreach|if|switch|while|break|continue)\\b/m,\n        lookbehind: true\n      },\n      /\\b(?:elseif|else)\\b/\n    ],\n    scope: {\n      pattern: /(^\\s*)(?:global|upvar|variable)\\b/m,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    keyword: {\n      pattern: /(^\\s*|\\[)(?:after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|Safe_Base|scan|seek|set|socket|source|split|string|subst|Tcl|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|wordBreak(?:After|Before)|test|vars)|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n      lookbehind: true\n    },\n    operator: /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|ne|in|ni)\\b/,\n    punctuation: /[{}()\\[\\]]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","tcl","Prism","languages","comment","pattern","lookbehind","string","greedy","variable","function","builtin","scope","alias","keyword","operator","punctuation","displayName","aliases"]
}
