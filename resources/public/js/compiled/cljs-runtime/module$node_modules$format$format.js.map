{
"version":3,
"file":"module$node_modules$format$format.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/format/format.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$format$format\"] = function(global,process,require,module,exports,shadow$shims) {\n//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","printf","console","log","format","apply","arguments","fmt","argIndex","args","slice","call","i","n","length","result","escaped","leadingZero","nextArg","slurpNumber","digits","test","c","parseInt","precision","toString","arg","String","fromCharCode","tmp","parseFloat","toFixed","replace","JSON","stringify","toUpperCase","namespace","eval","vsprintf","replacements","concat"]
}
