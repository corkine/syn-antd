{
"version":3,
"file":"module$node_modules$refractor$lang$parser.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM3HC,QAASA,OAAM,CAACC,KAAD,CAAQ,CAEnB,IAAID,OAwEHC,KAxEaC,UAAAF,OAAVA,CAwEHC,KAxEsCC,UAAAC,OAAA,CAAuB,QAAvB,CAAiC,CACtEC,QAAS,CACPC,QAAS,8GADF,CAEPC,WAAY,CAAA,CAFL,CAD6D,CAKtEC,SAAU,CACRF,QAAS,2DADD,CAERC,WAAY,CAAA,CAFJ,CAGRE,OAAQ,CACNC,YAAa,OADP,CAHA,CAL4D,CAYtEC,SAAU,CACRL,QAAS,gDADD;AAERC,WAAY,CAAA,CAFJ,CAGRE,OAAQ,CACNJ,QAAS,CACPC,QAAS,mBADF,CAEPC,WAAY,CAAA,CAFL,CADH,CAKNG,YAAa,OALP,CAHA,CAZ4D,CAuBtEE,OAAQ,CACNN,QAAS,oCADH,CAENO,MAAO,SAFD,CAvB8D,CA2BtEH,YAAa,aA3ByD,CAAjC,CA6BvCT,OAAA,CA2CCC,KA3CQC,UAAAW,aAAA,CAA6B,QAA7B,CAAuC,SAAvC,CAAkD,CACzD,iBAAkB,CAChBR,QAAS,SADO,CAEhBC,WAAY,CAAA,CAFI,CAGhBM,MAAO,SAHS,CADuC,CAMzDE,WAAY,CAEVT,QAAS,sDAFC,CAGVU,OAAQ,CAAA,CAHE,CAIVT,WAAY,CAAA,CAJF,CAKVE,OAAQ,CACNQ,OAAQ,CACNX,QAAS,0CADH,CAENC,WAAY,CAAA,CAFN,CADF,CAKNF,QAASJ,MAAAI,QALH;AAMNG,SAAUP,MAAAO,SANJ,CAONG,SAAUV,MAAAU,SAPJ,CAQNO,QAAS,oBARH,CASNC,OAAQ,6CATF,CAUNP,OAAQX,MAAAW,OAVF,CAWNQ,SAAU,gGAXJ,CAYNV,YAAaT,MAAAS,YAZP,CALE,CAN6C,CAAlD,CA2CRR,MAhBQC,UAAAW,aAAA,CACP,QADO,CAEP,aAFO,CAGP,CACEC,WAAYd,MAAAc,WADd,CAEEV,QAASJ,MAAAI,QAFX,CAGEG,SAAUP,MAAAO,SAHZ,CAIEG,SAAUV,MAAAU,SAJZ,CAKEC,OAAQX,MAAAW,OALV,CAME,qBAAsB,CACpBN,QAASL,MAAAS,YADW;AAEpBG,MAAO,aAFa,CANxB,CAHO,CAcPZ,MAAA,IAAAQ,OAAA,CAAqB,YAArB,CAdO,CA1DU,CAHvBX,MAAAC,QAAA,CAAiBE,MACjBA,OAAAoB,YAAA,CAAqB,QACrBpB,OAAAqB,QAAA,CAAiB,EAL0G;",
"sources":["node_modules/refractor/lang/parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$parser\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = parser\nparser.displayName = 'parser'\nparser.aliases = []\nfunction parser(Prism) {\n  ;(function(Prism) {\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    }))\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:true|false)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    })\n    parser = Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        expression: parser.expression,\n        keyword: parser.keyword,\n        variable: parser.variable,\n        function: parser.function,\n        escape: parser.escape,\n        'parser-punctuation': {\n          pattern: parser.punctuation,\n          alias: 'punctuation'\n        }\n      },\n      parser['tag'].inside['attr-value']\n    )\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","parser","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator","displayName","aliases"]
}
