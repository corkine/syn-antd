{
"version":3,
"file":"module$node_modules$refractor$lang$javadoclike.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMhIC,QAASA,YAAW,CAACC,cAAD,CAAQ,CACxB,SAAQ,CAACA,KAAD,CAAQ,CAoBhBC,QAASA,kBAAiB,CAACC,IAAD,CAAOC,QAAP,CAAiB,CAEzC,IAAIC,QAAUJ,KAAAK,UAAA,CAAgBH,IAAhB,CACd,IAAKE,OAAL,CAAA,CAGA,IAAIE,MAAQF,OAAA,CALIG,aAKJ,CACPD,MAAL,GAOEF,OACA,CADUJ,KAAAK,UAAAG,aAAA,CAA6BN,IAA7B,CAAmC,SAAnC,CALOO,CARHF,cASU,CACtBG,QAAS,uCADa,CAEtBC,MAAO,SAFe,CADPF,CAKP,CACV,CAAAH,KAAA,CAAQF,OAAA,CAdMG,aAcN,CARV,CAUID,MAAJ,WAAqBM,OAArB,GAEEN,KAFF;AAEUF,OAAA,CAlBMG,aAkBN,CAFV,CAE+B,CAC3BG,QAASJ,KADkB,CAF/B,CAMA,IAAIO,KAAAC,QAAA,CAAcR,KAAd,CAAJ,CACE,IAASS,IAAOC,CAAH,CAAGA,CAAAA,OAAAA,CAAIV,KAAAW,OAApB,CAAkCF,IAAlC,CAAsCC,OAAtC,CAAyCD,IAAA,EAAzC,CACMT,KAAA,CAAMS,IAAN,CAKJ,UALwBH,OAKxB,GAJEN,KAAA,CAAMS,IAAN,CAIF,CAJa,CACTL,QAASJ,KAAA,CAAMS,IAAN,CADA,CAIb,EAAAZ,QAAA,CAASG,KAAA,CAAMS,IAAN,CAAT,CAPJ,KAUEZ,SAAA,CAASG,KAAT,CA9BF,CAHyC,CAnB3C,IAAIY,YAAelB,KAAAK,UAAAN,YAAfmB,CAA6C,CAC/CC,UAAW,CACTT,QAAS,6DADA,CAETU,WAAY,CAAA,CAFH,CADoC,CAK/CC,QAAS,CAGPX,QAAS,oDAHF,CAIPU,WAAY,CAAA,CAJL,CALsC,CAW/CE,YAAa,MAXkC,CA0EjDC,OAAAC,eAAA,CAAsBN,WAAtB;AAAmC,YAAnC,CAAiD,CAC/CO,MAdFC,QAAmB,CAACrB,SAAD,CAAYsB,WAAZ,CAAyB,CACjB,QAAzB,GAAI,MAAOtB,UAAX,GACEA,SADF,CACc,CAACA,SAAD,CADd,CAGAA,UAAAuB,QAAA,CAAkB,QAAQ,CAAC1B,IAAD,CAAO,CAC/BD,iBAAA,CAAkBC,IAAlB,CAAwB,QAAQ,CAACQ,OAAD,CAAU,CACnCA,OAAAmB,OAAL,GACEnB,OAAAmB,OADF,CACmB,EADnB,CAGAnB,QAAAmB,OAAAC,KAAA,CAAsBH,WAJkB,CAA1C,CAD+B,CAAjC,CAJ0C,CAaK,CAAjD,CAGAT,YAAAQ,WAAA,CAAuB,CAAC,MAAD,CAAS,YAAT,CAAuB,KAAvB,CAAvB,CAAsDR,WAAtD,CA9EgB,CAAhB,CAAD,CA+EElB,cA/EF,CADyB,CAH5BJ,MAAAC,QAAA,CAAiBE,WACjBA,YAAAgC,YAAA,CAA0B,aAC1BhC,YAAAiC,QAAA,CAAsB,EAL0G;",
"sources":["node_modules/refractor/lang/javadoclike.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$javadoclike\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function(Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function(lang) {\n        docCommentSupport(lang, function(pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","javadoclike","Prism","docCommentSupport","lang","callback","grammar","languages","token","tokenName","insertBefore","definition","pattern","alias","RegExp","Array","isArray","i","l","length","javaDocLike","parameter","lookbehind","keyword","punctuation","Object","defineProperty","value","addSupport","docLanguage","forEach","inside","rest","displayName","aliases"]
}
