{
"version":3,
"file":"module$node_modules$refractor$lang$c.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMtHC,QAASA,EAAC,CAACC,KAAD,CAAQ,CAChBA,KAAAC,UAAAF,EAAA,CAAoBC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CAClD,aAAc,CACZC,QAAS,2BADG,CAEZC,WAAY,CAAA,CAFA,CADoC,CAKlDC,QAAS,qUALyC;AAMlDC,SAAU,iDANwC,CAOlDC,OAAQ,uGAP0C,CAAhC,CASpBP,MAAAC,UAAAO,aAAA,CAA6B,GAA7B,CAAkC,QAAlC,CAA4C,CAC1CC,MAAO,CAGLN,QAAS,oDAHJ,CAILC,WAAY,CAAA,CAJP,CAKLM,MAAO,UALF,CAMLC,OAAQ,CAENC,OAAQ,CACNT,QAAS,6CADH,CAENC,WAAY,CAAA,CAFN,CAFF,CAONS,UAAW,CACTV,QAAS,2GADA;AAETC,WAAY,CAAA,CAFH,CAGTM,MAAO,SAHE,CAPL,CANH,CADmC,CAsB1CI,SAAU,4HAtBgC,CAA5C,CAwBA,QAAOd,KAAAC,UAAAF,EAAA,CAAkB,SAAlB,CAlCS,CAHlBH,MAAAC,QAAA,CAAiBE,CACjBA,EAAAgB,YAAA,CAAgB,GAChBhB,EAAAiB,QAAA,CAAY,EAL0G;",
"sources":["node_modules/refractor/lang/c.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$c\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n    number: /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight the path of the include statement as a string\n        string: {\n          pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n          lookbehind: true\n        },\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    },\n    // highlight predefined macros as constants\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","c","Prism","languages","extend","pattern","lookbehind","keyword","operator","number","insertBefore","macro","alias","inside","string","directive","constant","displayName","aliases"]
}
