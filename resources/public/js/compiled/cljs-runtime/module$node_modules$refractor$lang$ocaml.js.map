{
"version":3,
"file":"module$node_modules$refractor$lang$ocaml.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM1HC,QAASA,MAAK,CAACC,KAAD,CAAQ,CACpBA,KAAAC,UAAAF,MAAA,CAAwB,CACtBG,QAAS,kBADa,CAEtBC,OAAQ,CACN,CACEC,QAAS,uBADX,CAEEC,OAAQ,CAAA,CAFV,CADM,CAKN,CACED,QAAS,oDADX,CAEEC,OAAQ,CAAA,CAFV,CALM,CAFc,CAYtBC,OAAQ,wEAZc,CAatBC,KAAM,CACJH,QAAS,WADL,CAEJI,MAAO,UAFH,CAbgB,CAiBtBC,UAAW,CACTL,QAAS,QADA,CAETI,MAAO,UAFE,CAjBW,CAqBtBE,QAAS,0RArBa;AAsBtBC,QAAS,oBAtBa,CAwBtBC,SAAU,iGAxBY,CAyBtBC,YAAa,kBAzBS,CADJ,CAHtBjB,MAAAC,QAAA,CAAiBE,KACjBA,MAAAe,YAAA,CAAoB,OACpBf,MAAAgB,QAAA,CAAgB,EAL0G;",
"sources":["node_modules/refractor/lang/ocaml.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$ocaml\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = ocaml\nocaml.displayName = 'ocaml'\nocaml.aliases = []\nfunction ocaml(Prism) {\n  Prism.languages.ocaml = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: [\n      {\n        pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      {\n        pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n        greedy: true\n      }\n    ],\n    number: /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n    type: {\n      pattern: /\\B['`]\\w*/,\n      alias: 'variable'\n    },\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'function'\n    },\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    // Custom operators are allowed\n    operator: /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n    punctuation: /[(){}\\[\\]|_.,:;]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","ocaml","Prism","languages","comment","string","pattern","greedy","number","type","alias","directive","keyword","boolean","operator","punctuation","displayName","aliases"]
}
