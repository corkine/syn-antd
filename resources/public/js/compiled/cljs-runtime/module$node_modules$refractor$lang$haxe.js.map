{
"version":3,
"file":"module$node_modules$refractor$lang$haxe.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAAC,UAAAF,KAAA,CAAuBC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CAErDC,OAAQ,CACNC,QAAS,mCADH,CAENC,OAAQ,CAAA,CAFF,CAGNC,OAAQ,CACNC,cAAe,CACbH,QAAS,8BADI,CAEbI,WAAY,CAAA,CAFC,CAGbF,OAAQ,CACNC,cAAe,CACbH,QAAS,QADI,CAEbK,MAAO,UAFM,CADT,CAHK,CADT,CAHF,CAF6C,CAmBrDC,QAAS,uRAnB4C;AAoBrDC,SAAU,4DApB2C,CAAhC,CAsBvBX,MAAAC,UAAAW,aAAA,CAA6B,MAA7B,CAAqC,YAArC,CAAmD,CACjDC,MAAO,CACLT,QAAS,mCADJ,CAELC,OAAQ,CAAA,CAFH,CAD0C,CAAnD,CAMAL,MAAAC,UAAAW,aAAA,CAA6B,MAA7B,CAAqC,SAArC,CAAgD,CAC9CE,aAAc,CACZV,QAAS,MADG,CAEZK,MAAO,SAFK,CADgC,CAK9CM,SAAU,CACRX,QAAS,QADD,CAERK,MAAO,QAFC,CALoC,CAS9CO,YAAa,CACXZ,QAAS,kBADE,CAEXK,MAAO,UAFI,CATiC,CAAhD,CAcAT,MAAAC,UAAAF,KAAA,OAAAO,OAAA,cAAAA,OAAAW,KAAA,CACEjB,KAAAC,UAAAF,KACF,QAAOC,KAAAC,UAAAF,KAAA,CAAqB,YAArB,CA7CY;AAHrBH,MAAAC,QAAA,CAAiBE,IACjBA,KAAAmB,YAAA,CAAmB,MACnBnB,KAAAoB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/haxe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$haxe\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable' // See rest below\n            }\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  })\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest =\n    Prism.languages.haxe\n  delete Prism.languages.haxe['class-name']\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","haxe","Prism","languages","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest","displayName","aliases"]
}
