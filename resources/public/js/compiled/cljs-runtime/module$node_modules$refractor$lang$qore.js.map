{
"version":3,
"file":"module$node_modules$refractor$lang$qore.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAAC,UAAAF,KAAA,CAAuBC,KAAAC,UAAAC,OAAA,CAAuB,OAAvB,CAAgC,CACrDC,QAAS,CACPC,QAAS,4CADF,CAEPC,WAAY,CAAA,CAFL,CAD4C,CAMrDC,OAAQ,CACNF,QAAS,gCADH,CAENG,OAAQ,CAAA,CAFF,CAN6C,CAUrDC,SAAU,eAV2C,CAWrDC,QAAS,sdAX4C;AAYrDC,OAAQ,wEAZ6C,CAarDC,QAAS,qBAb4C,CAcrDC,SAAU,CACRR,QAAS,6FADD,CAERC,WAAY,CAAA,CAFJ,CAd2C,CAkBrDQ,SAAU,sBAlB2C,CAAhC,CADJ,CAHrBjB,MAAAC,QAAA,CAAiBE,IACjBA,KAAAe,YAAA,CAAmB,MACnBf,KAAAgB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/qore.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$qore\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = qore\nqore.displayName = 'qore'\nqore.aliases = []\nfunction qore(Prism) {\n  Prism.languages.qore = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n      lookbehind: true\n    },\n    // Overridden to allow unescaped multi-line strings\n    string: {\n      pattern: /(\"|')(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    },\n    variable: /\\$(?!\\d)\\w+\\b/,\n    keyword: /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:int|float|number|bool|string|date|list)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n    number: /\\b(?:0b[01]+|0x[\\da-f]*\\.?[\\da-fp\\-]+|\\d*\\.?\\d+e?\\d*[df]|\\d*\\.?\\d+)\\b/i,\n    boolean: /\\b(?:true|false)\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n      lookbehind: true\n    },\n    function: /\\$?\\b(?!\\d)\\w+(?=\\()/\n  })\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","qore","Prism","languages","extend","comment","pattern","lookbehind","string","greedy","variable","keyword","number","boolean","operator","function","displayName","aliases"]
}
