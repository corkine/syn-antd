{
"version":3,
"file":"module$node_modules$refractor$lang$flow.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAkChBA,KAhCDC,UAAAF,KAAA,CAgCCC,KAhCsBC,UAAAC,OAAA,CAAuB,YAAvB,CAAqC,EAArC,CAgCtBF,MA/BDC,UAAAE,aAAA,CAA6B,MAA7B,CAAqC,SAArC,CAAgD,CAC9CC,KAAM,CACJ,CACEC,QAAS,qEADX,CAEEC,MAAO,KAFT,CADI,CADwC,CAAhD,CA+BCN,MAvBDC,UAAAF,KAAA,CACE,mBADF,CAAAM,QAAA,CAEY,sIACZ;OAoBCL,KApBMC,UAAAF,KAAA,UAoBNC,MAnBDC,UAAAE,aAAA,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAC/C,mBAAoB,CAClBE,QAAS,WADS,CAElBC,MAAO,aAFW,CAD2B,CAAjD,CAMKC,MAAAC,QAAA,CAaJR,KAbkBC,UAAAF,KAAAU,QAAd,CAAL,GAaCT,KAZCC,UAAAF,KAAAU,QADF,CACiC,CAYhCT,KAZiCC,UAAAF,KAAAU,QAAD,CADjC,CAaCT,MAVDC,UAAAF,KAAAU,QAAAC,QAAA,CACE,CACEL,QAAS,iDADX,CAEEM,WAAY,CAAA,CAFd,CADF,CAKE,CACEN,QAAS,uGADX,CAEEM,WAAY,CAAA,CAFd,CALF,CAxBiB,CAHrBf,MAAAC,QAAA;AAAiBE,IACjBA,KAAAa,YAAA,CAAmB,MACnBb,KAAAc,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/flow.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$flow\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = flow\nflow.displayName = 'flow'\nflow.aliases = []\nfunction flow(Prism) {\n  ;(function(Prism) {\n    Prism.languages.flow = Prism.languages.extend('javascript', {})\n    Prism.languages.insertBefore('flow', 'keyword', {\n      type: [\n        {\n          pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n          alias: 'tag'\n        }\n      ]\n    })\n    Prism.languages.flow[\n      'function-variable'\n    ].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i\n    delete Prism.languages.flow['parameter']\n    Prism.languages.insertBefore('flow', 'operator', {\n      'flow-punctuation': {\n        pattern: /\\{\\||\\|\\}/,\n        alias: 'punctuation'\n      }\n    })\n    if (!Array.isArray(Prism.languages.flow.keyword)) {\n      Prism.languages.flow.keyword = [Prism.languages.flow.keyword]\n    }\n    Prism.languages.flow.keyword.unshift(\n      {\n        pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n        lookbehind: true\n      }\n    )\n  })(Prism)\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","flow","Prism","languages","extend","insertBefore","type","pattern","alias","Array","isArray","keyword","unshift","lookbehind","displayName","aliases"]
}
