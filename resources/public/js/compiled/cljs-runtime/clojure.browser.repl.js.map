{"version":3,"sources":["clojure/browser/repl.cljs"],"mappings":"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","names":["goog/define","clojure.browser.repl/*repl*","clojure.browser.repl/xpc-connection","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","clojure.browser.repl/parent-connected?","clojure.browser.repl/print-queue","clojure.browser.repl/flush-print-queue!","conn","seq__26657","cljs.core/seq","chunk__26658","count__26659","i__26660","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","str","clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3","G__26664","G__26665","goog.json/serialize","goog.array/clear","clojure.browser.repl/repl-print","data","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/deref","cljs.core/*print-newline*","cljs.core/set-print-fn!","cljs.core/set-print-err-fn!","clojure.browser.repl/get-ua-product","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","clojure.browser.repl/evaluate-javascript","block","result","e26666","e","cljs.repl/error->str","clojure.browser.repl/send-result","connection","url","clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6","var_args","G__26668","clojure.browser.repl/send-print","js/Error","clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3","n","clojure.browser.net/xhr-connection","clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3","_","js/console","clojure.browser.repl/order","clojure.browser.repl/wrap-message","repl","t","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","clojure.browser.repl/start-evaluator","temp__5718__auto__","repl-connection","clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0","repl-connected?","try-handshake","js/setTimeout","clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2","clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3","cljs.core/reset!","json","obj","goog.json/parse","goog.object/get","clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2","js/alert","clojure.browser.repl/load-queue","clojure.browser.repl/bootstrap","js/COMPILED","js/goog","js/goog.require","name","goog/constructNamespace_","src","opt_sourceText","loaded","onload","and__4120__auto__","cljs.core/not","js/goog.writeScriptTag__","js/document.body","js/document","script","G__26671","goog.object/set","G__26672","G__26673","goog.dom/setTextContext","goog/debugLoader_","js/CLOSURE_IMPORT_SCRIPT","reload","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","reload?","or__4131__auto__","path","cljs.core/name","G__26674","G__26675","goog.object/remove","G__26676","G__26677","js/goog.basePath","js/goog.dependencies_.nameToPath","js/goog.dependencies_.visited","js/goog.dependencies_.written","G__26678","G__26679","ret","clojure.browser.repl/connect","repl-server-url","connected?","clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1","cljs.core/constantly","form","G__26681","*repl*-orig-val__26682","*repl*-temp-val__26683","clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3","iframe"],"sourcesContent":[";;  Copyright (c) Rich Hickey. All rights reserved.\n;;  The use and distribution terms for this software are covered by the\n;;  Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;  which can be found in the file epl-v10.html at the root of this distribution.\n;;  By using this software in any fashion, you are agreeing to be bound by\n;;  the terms of this license.\n;;  You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Receive - Eval - Print - Loop\n\n  Receive a block of JS (presumably generated by a ClojureScript compiler)\n  Evaluate it naively\n  Print the result of evaluation to a string\n  Send the resulting string back to the server Loop!\"\n\n      :author \"Bobby Calderwood and Alex Redington\"}\n  clojure.browser.repl\n  (:require [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [goog.array :as garray]\n            [goog.json :as json]\n            [goog.userAgent.product :as product]\n            [clojure.browser.net :as net]\n            [clojure.browser.event :as event]\n            ;; repl-connection callback will receive goog.require('cljs.repl')\n            ;; and monkey-patched require expects to be able to derive it\n            ;; via goog.basePath, so this namespace should be compiled together\n            ;; with clojure.browser.repl:\n            [cljs.repl]))\n\n(goog-define HOST \"localhost\")\n(goog-define PORT 9000)\n\n(def ^:dynamic *repl* nil)\n(def xpc-connection (atom nil))\n(def parent-connected? (atom false))\n(def print-queue (array))\n\n(defn flush-print-queue! [conn]\n  (doseq [str print-queue]\n    (net/transmit conn :print\n      (json/serialize\n        #js {\"repl\" *repl*\n             \"str\"  str})))\n  (garray/clear print-queue))\n\n(defn repl-print [data]\n  (.push print-queue (pr-str data))\n  (when @parent-connected?\n    (flush-print-queue! @xpc-connection)))\n\n(set! *print-newline* true)\n(set-print-fn! repl-print)\n(set-print-err-fn! repl-print)\n\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn evaluate-javascript\n  \"Process a single block of JavaScript received from the server\"\n  [conn block]\n  (let [result\n        (try\n          {:status :success\n           :value (str (js* \"eval(~{block})\"))}\n          (catch :default e\n            {:status :exception\n             :value (cljs.repl/error->str e)}))]\n    (pr-str result)))\n\n(defn send-result [connection url data]\n  (net/transmit connection url \"POST\" data nil 0))\n\n(defn send-print\n  \"Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times.\"\n  ([url data]\n   (send-print url data 0))\n  ([url data n]\n   (let [conn (net/xhr-connection)]\n     (event/listen conn :error\n       (fn [_]\n         (if (< n 10)\n           (send-print url data (inc n))\n           (.log js/console (str \"Could not send \" data \" after \" n \" attempts.\")))))\n     (net/transmit conn url \"POST\" data nil 0))))\n\n(def order (atom 0))\n\n(defn wrap-message [repl t data]\n  (pr-str\n    {:repl repl\n     :type t\n     :content data\n     :order (swap! order inc)}))\n\n(defn start-evaluator\n  \"Start the REPL server connection.\"\n  [url]\n  (if-let [repl-connection (net/xpc-connection)]\n    (let [connection (net/xhr-connection)\n          repl-connected? (atom false)\n          try-handshake (fn try-handshake []\n                          (when-not @repl-connected?\n                            (net/transmit repl-connection\n                                          :start-handshake\n                                          nil)\n                            ;; In case we miss, try again. Parent will only\n                            ;; ack once.\n                            (js/setTimeout try-handshake\n                                           10)))]\n      (net/connect repl-connection try-handshake)\n\n      (net/register-service repl-connection\n        :ack-handshake\n        (fn [_]\n          (when-not @repl-connected?\n            (reset! repl-connected? true)\n            ;; Now that we're connected to the parent, we can start talking to\n            ;; the server.\n            (send-result connection\n              url (wrap-message nil :ready \"ready\")))))\n\n      (event/listen connection\n        :success\n        (fn [e]\n          (net/transmit\n            repl-connection\n            :evaluate-javascript\n            (.getResponseText (.-currentTarget e) ()))))\n\n      (net/register-service repl-connection\n        :send-result\n        (fn [json]\n          (let [obj    (json/parse json)\n                repl   (gobj/get obj \"repl\")\n                result (gobj/get obj \"result\")]\n            (send-result connection url\n              (wrap-message repl :result result)))))\n\n      (net/register-service repl-connection\n        :print\n        (fn [json]\n          (let [obj  (json/parse json)\n                repl (gobj/get obj \"repl\")\n                str  (gobj/get obj \"str\")]\n            (send-print url (wrap-message repl :print str))))))\n    (js/alert \"No 'xpc' param provided to child iframe.\")))\n\n(def load-queue nil)\n\n(defn bootstrap\n  \"Reusable browser REPL bootstrapping. Patches the essential functions\n  in goog.base to support re-loading of namespaces after page load.\"\n  []\n  ;; Monkey-patch goog.provide if running under optimizations :none - David\n  (when-not js/COMPILED\n    (set! (.-require__ js/goog) js/goog.require)\n    ;; suppress useless Google Closure error about duplicate provides\n    (set! (.-isProvided_ js/goog) (fn [name] false))\n    ;; provide cljs.user\n    (goog/constructNamespace_ \"cljs.user\")\n    (set! (.-writeScriptTag__ js/goog)\n      (fn [src opt_sourceText]\n        ;; the page is already loaded, we can no longer leverage document.write\n        ;; instead construct script tag elements and append them to the body\n        ;; of the page, to avoid parallel script loading enforce sequential\n        ;; load with a simple load queue\n        (let [loaded (atom false)\n              onload (fn []\n                       (when (and load-queue (false? @loaded))\n                         (swap! loaded not)\n                         (if (zero? (alength load-queue))\n                           (set! load-queue nil)\n                           (.apply js/goog.writeScriptTag__ nil (.shift load-queue)))))]\n          (.appendChild js/document.body\n            (as-> (.createElement js/document \"script\") script\n              (doto script\n                (gobj/set \"type\" \"text/javascript\")\n                (gobj/set \"onload\" onload)\n                (gobj/set \"onreadystatechange\" onload)) ;; IE\n              (if (nil? opt_sourceText)\n                (doto script (gobj/set \"src\" src))\n                (doto script (gdom/setTextContext opt_sourceText))))))))\n    ;; queue or load\n    (set! (.-writeScriptTag_ js/goog)\n      (fn [src opt_sourceText]\n        (if load-queue\n          (.push load-queue #js [src opt_sourceText])\n          (do\n            (set! load-queue #js [])\n            (js/goog.writeScriptTag__ src opt_sourceText)))))\n    ;; In the latest Closure library implementation, there is no goog.writeScriptTag_,\n    ;; to monkey-patch. The behavior of interest is instead in goog.Dependency.prototype.load,\n    ;; which first checks and uses CLOSURE_IMPORT_SCRIPT if defined. So we hook our desired\n    ;; behavior here.\n    (when goog/debugLoader_\n      (set! js/CLOSURE_IMPORT_SCRIPT (.-writeScriptTag_ js/goog)))\n    ;; we must reuse Closure library dev time dependency management, under namespace\n    ;; reload scenarios we simply delete entries from the correct private locations\n    (set! (.-require js/goog)\n      (fn [src reload]\n        (when (= reload \"reload-all\")\n          (set! (.-cljsReloadAll_ js/goog) true))\n        (let [reload? (or reload (.-cljsReloadAll__ js/goog))]\n          (when reload?\n            (if (some? goog/debugLoader_)\n              (let [path (.getPathFromDeps_ goog/debugLoader_ name)]\n                (gobj/remove (.-written_ goog/debugLoader_) path)\n                (gobj/remove (.-written_ goog/debugLoader_)\n                  (str js/goog.basePath path)))\n              (let [path (gobj/get js/goog.dependencies_.nameToPath src)]\n                (gobj/remove js/goog.dependencies_.visited path)\n                (gobj/remove js/goog.dependencies_.written path)\n                (gobj/remove js/goog.dependencies_.written\n                  (str js/goog.basePath path)))))\n          (let [ret (.require__ js/goog src)]\n            (when (= reload \"reload-all\")\n              (set! (.-cljsReloadAll_ js/goog) false))\n            ret))))))\n\n(defn connect\n  \"Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function.\"\n  [repl-server-url]\n  (let [connected? (atom false)\n        repl-connection\n        (net/xpc-connection\n          {:peer_uri repl-server-url})]\n    (swap! xpc-connection (constantly repl-connection))\n    (net/register-service repl-connection\n      :start-handshake\n      (fn [_]\n        ;; Child will keep retrying, but we only want\n        ;; to ack once.\n        (when-not @connected?\n          (reset! connected? true)\n          (reset! parent-connected? true)\n          (net/transmit repl-connection\n                        :ack-handshake\n                        nil)\n          (flush-print-queue! repl-connection))))\n    (net/register-service repl-connection\n      :evaluate-javascript\n      (fn [json]\n        (let [obj  (json/parse json)\n              repl (gobj/get obj \"repl\")\n              form (gobj/get obj \"form\")]\n          (net/transmit\n            repl-connection\n            :send-result\n            (json/serialize\n              #js {\"repl\" repl\n                   \"result\"\n                   (binding [*repl* repl]\n                     (evaluate-javascript repl-connection form))})))))\n    (net/connect repl-connection\n      (constantly nil)\n      (fn [iframe]\n        (set! (.-display (.-style iframe))\n          \"none\")))\n    (bootstrap)\n    repl-connection))\n"]}