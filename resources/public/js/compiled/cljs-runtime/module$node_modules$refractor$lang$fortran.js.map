{
"version":3,
"file":"module$node_modules$refractor$lang$fortran.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAM5HC,QAASA,QAAO,CAACC,KAAD,CAAQ,CACtBA,KAAAC,UAAAF,QAAA,CAA0B,CACxB,gBAAiB,CACfG,QAAS,yBADM,CAEfC,MAAO,QAFQ,CADO,CAKxBC,OAAQ,CACNF,QAAS,+EADH,CAENG,OAAQ,CACNC,QAAS,CACPJ,QAAS,uBADF,CAEPK,WAAY,CAAA,CAFL,CADH,CAFF,CALgB,CAcxBD,QAAS,CACPJ,QAAS,KADF,CAEPM,OAAQ,CAAA,CAFD,CAde,CAkBxBC,QAAS,8BAlBe,CAmBxBC,OAAQ,wDAnBgB;AAoBxBC,QAAS,CAEP,mEAFO,CAGP,+HAHO,CAIP,2VAJO;AAKP,6JALO,CApBe,CA2BxBC,SAAU,CACR,kGADQ,CAER,CAEEV,QAAS,qBAFX,CAGEK,WAAY,CAAA,CAHd,CAFQ,CA3Bc,CAmCxBM,YAAa,oBAnCW,CADJ,CAHxBjB,MAAAC,QAAA,CAAiBE,OACjBA,QAAAe,YAAA,CAAsB,SACtBf,QAAAgB,QAAA,CAAkB,EAL0G;",
"sources":["node_modules/refractor/lang/fortran.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$fortran\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = fortran\nfortran.displayName = 'fortran'\nfortran.aliases = []\nfunction fortran(Prism) {\n  Prism.languages.fortran = {\n    'quoted-number': {\n      pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n      alias: 'number'\n    },\n    string: {\n      pattern: /(?:\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:\\s*!.+(?:\\r\\n?|\\n))?|(?!\\1).)*(?:\\1|&)/,\n      inside: {\n        comment: {\n          pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n          lookbehind: true\n        }\n      }\n    },\n    comment: {\n      pattern: /!.*/,\n      greedy: true\n    },\n    boolean: /\\.(?:TRUE|FALSE)\\.(?:_\\w+)?/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n    keyword: [\n      // Types\n      /\\b(?:INTEGER|REAL|DOUBLE ?PRECISION|COMPLEX|CHARACTER|LOGICAL)\\b/i, // END statements\n      /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, // Statements\n      /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, // Others\n      /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEWHERE|ELSEIF|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i\n    ],\n    operator: [\n      /\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.(?:EQ|NE|LT|LE|GT|GE|NOT|AND|OR|EQV|NEQV)\\.|\\.[A-Z]+\\./i,\n      {\n        // Use lookbehind to prevent confusion with (/ /)\n        pattern: /(^|(?!\\().)\\/(?!\\))/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /\\(\\/|\\/\\)|[(),;:&]/\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","fortran","Prism","languages","pattern","alias","string","inside","comment","lookbehind","greedy","boolean","number","keyword","operator","punctuation","displayName","aliases"]
}
