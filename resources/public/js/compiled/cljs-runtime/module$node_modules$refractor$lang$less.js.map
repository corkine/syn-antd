{
"version":3,
"file":"module$node_modules$refractor$lang$less.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMzHC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAQnBA,KAAAC,UAAAF,KAAA,CAAuBC,KAAAC,UAAAC,OAAA,CAAuB,KAAvB,CAA8B,CACnDC,QAAS,CACP,kBADO,CAEP,CACEC,QAAS,iBADX,CAEEC,WAAY,CAAA,CAFd,CAFO,CAD0C,CAQnDC,OAAQ,CACNF,QAAS,6CADH,CAENG,OAAQ,CACNC,YAAa,OADP,CAFF,CAR2C,CAenDC,SAAU,CACRL,QAAS,wEADD,CAERG,OAAQ,CAENG,SAAU,UAFJ,CAFA,CAfyC,CAsBnDC,SAAU,0CAtByC;AAuBnDC,SAAU,UAvByC,CAA9B,CAyBvBZ,MAAAC,UAAAY,aAAA,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAC/CH,SAAU,CAER,CACEN,QAAS,aADX,CAEEG,OAAQ,CACNC,YAAa,GADP,CAFV,CAFQ,CAQR,WARQ,CADqC,CAW/C,cAAe,CACbJ,QAAS,sCADI,CAEbC,WAAY,CAAA,CAFC,CAGbS,MAAO,UAHM,CAXgC,CAAjD,CAjCmB,CAHrBlB,MAAAC,QAAA,CAAiBE,IACjBA,KAAAgB,YAAA,CAAmB,MACnBhB,KAAAiB,QAAA,CAAe,EAL0G;",
"sources":["node_modules/refractor/lang/less.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$refractor$lang$less\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      }, // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","less","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","alias","displayName","aliases"]
}
