{
"version":3,
"file":"module$node_modules$parse_entities$decode_entity_browser.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,yDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAK1I,IAAIC,EAIJH,OAAAC,QAAA,CAEAG,QAAqB,CAACC,UAAD,CAAa,CAChC,IAAIC,OAAS,MAATA,CAAeD,UAAfC,CAA4B,GAGhCH,GAAA,CAAKA,EAAL,EAAWI,QAAAC,cAAA,CAAuB,GAAvB,CACXL,GAAAM,UAAA,CAAeH,MACf,KAAAI,KAAOP,EAAAQ,YAOP,OAjBcC,GAiBd,GAAIF,IAAAG,WAAA,CAAgBH,IAAAI,OAAhB,CAA8B,CAA9B,CAAJ,EAAqE,MAArE,GAAsDT,UAAtD,CACS,CAAA,CADT,CAKOK,IAAA,GAASJ,MAAT,CAAkB,CAAA,CAAlB,CAA0BI,IAlBD,CAXwG;",
"sources":["node_modules/parse-entities/decode-entity.browser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parse_entities$decode_entity_browser\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\n/* eslint-env browser */\n\nvar el\n\nvar semicolon = 59 //  ';'\n\nmodule.exports = decodeEntity\n\nfunction decodeEntity(characters) {\n  var entity = '&' + characters + ';'\n  var char\n\n  el = el || document.createElement('i')\n  el.innerHTML = entity\n  char = el.textContent\n\n  // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of &notit; will\n  // result in the string `\u00acit;`.  When we encounter a trailing semicolon after\n  // parsing and the entity to decode was not a semicolon (`&semi;`), we can\n  // assume that the matching was incomplete\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the entity was not valid\n  return char === entity ? false : char\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","el","decodeEntity","characters","entity","document","createElement","innerHTML","char","textContent","semicolon","charCodeAt","length"]
}
